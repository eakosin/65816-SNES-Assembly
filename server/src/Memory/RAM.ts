/* The code that generates this mess, run on SMW Central while viewing all RAM addresses, load the table element into global var temp1

JSON.stringify([...temp1.rows].map((d) => { return {
	address: d.cells[0].children[0].innerText,
	length: d.cells[1].innerHTML == "1 byte" ? d.cells[1].innerHTML : d.cells[1].innerText + ". " + d.cells[1].children[0].title,
	beginsAt: parseInt("0x" + d.cells[0].children[0].innerText.substr(1,6)),
	endsAt: d.cells[1].innerHTML == "1 byte" ? parseInt("0x" + d.cells[0].children[0].innerText.substr(1,6)) : parseInt("0x" + d.cells[1].innerHTML.match(/\$[\dABCDEF]+/)[0].substr(1,6)),
	type: d.cells[2].innerText,
	descriptio: d.cells[3].innerText,
}}))
*/

export var RAM = [{"address":"$7E0000","length":"16 bytes. Ends at $7E000F.","beginsAt":8257536,"endsAt":8257551,"type":"Misc.","descriptio":"Scratch RAM, is and can be used for a big number of purposes. The general purpose is temporarily preserving a value for later use in a routine.\nOf note is the following address, used in LM ASM hacks:\n$7E:0003 (16-bit) - Block number from LM Map16 editor. Also used in the custom Map16 tile change routine."},{"address":"$7E0010","length":"1 byte","beginsAt":8257552,"endsAt":8257552,"type":"Flag","descriptio":"If the value in it is not zero, run the actual game; otherwise, loop forever. It's set to a non-zero value during NMI, and it's set to zero after the game mode has been run, so that the game runs exactly once a frame - one NMI trigger per frame."},{"address":"$7E0011","length":"1 byte","beginsAt":8257553,"endsAt":8257553,"type":"Flag","descriptio":"Used to distinguish IRQ #1 from IRQ #2's code. (Inside the Morton/Ludwig/Roy room, where IRQ is used twice, although it can be used in other areas that run IRQ as well.) #$00 = IRQ #1; #$01 = IRQ #2."},{"address":"$7E0012","length":"1 byte","beginsAt":8257554,"endsAt":8257554,"type":"Graphics","descriptio":"Stripe image loader - value must be divisible by 3.\nA list of valid values can be found here."},{"address":"$7E0013","length":"1 byte","beginsAt":8257555,"endsAt":8257555,"type":"Counter","descriptio":"\"True\" frame counter. Increments once per frame, except when the game is lagging. Note that $7E:0014 is better suited for most purposes."},{"address":"$7E0014","length":"1 byte","beginsAt":8257556,"endsAt":8257556,"type":"Counter","descriptio":"\"Effective\" frame counter. Stops when, for example, RAM addresses such as $7E:009D are not zero (lock sprite flag, usually indicates the player is dying, grabbing a powerup, or something similar). Inside sprite code, this address is often preferred over $7E:0013, especially in graphics routines, as graphics will not be updated when the player dies if this address is used as an index to the tilemap."},{"address":"$7E0015","length":"1 byte","beginsAt":8257557,"endsAt":8257557,"type":"I/O","descriptio":"Controller buttons currently held down. Format: byetUDLR.\nb = A or B; y = X or Y; e = select; t = Start; U = up; D = down; L = left, R = right."},{"address":"$7E0016","length":"1 byte","beginsAt":8257558,"endsAt":8257558,"type":"I/O","descriptio":"Controller buttons newly pressed this frame. Format: byetUDLR.\nb = B only; y = X or Y; e = select; t = Start; U = up; D = down; L = left, R = right."},{"address":"$7E0017","length":"1 byte","beginsAt":8257559,"endsAt":8257559,"type":"I/O","descriptio":"Controller buttons currently held down. Format: axlr----.\na = A; x = X; l = L; r = R, - = null/unused."},{"address":"$7E0018","length":"1 byte","beginsAt":8257560,"endsAt":8257560,"type":"I/O","descriptio":"Controller buttons newly pressed this frame. Format: axlr----.\na = A; x = X; l = L; r = R, - = null/unused."},{"address":"$7E0019","length":"1 byte","beginsAt":8257561,"endsAt":8257561,"type":"Player","descriptio":"Player powerup/status. #$00 = small; #$01 = big; #$02 = cape; #$03 = fire."},{"address":"$7E001A","length":"2 bytes. Ends at $7E001B.","beginsAt":8257562,"endsAt":8257563,"type":"Hardware mirror","descriptio":"Layer 1 X position, current frame. Mirror of SNES register $210D."},{"address":"$7E001C","length":"2 bytes. Ends at $7E001D.","beginsAt":8257564,"endsAt":8257565,"type":"Hardware mirror","descriptio":"Layer 1 Y position, current frame. Mirror of SNES register $210E."},{"address":"$7E001E","length":"2 bytes. Ends at $7E001F.","beginsAt":8257566,"endsAt":8257567,"type":"Hardware mirror","descriptio":"Layer 2 X position, current frame. Mirror of SNES register $210F."},{"address":"$7E0020","length":"2 bytes. Ends at $7E0021.","beginsAt":8257568,"endsAt":8257569,"type":"Hardware mirror","descriptio":"Layer 2 Y position, current frame. Mirror of SNES register $2110."},{"address":"$7E0022","length":"2 bytes. Ends at $7E0023.","beginsAt":8257570,"endsAt":8257571,"type":"Hardware mirror","descriptio":"Layer 3 X position. Mirror of SNES register $2111."},{"address":"$7E0024","length":"2 bytes. Ends at $7E0025.","beginsAt":8257572,"endsAt":8257573,"type":"Hardware mirror","descriptio":"Layer 3 Y position. Mirror of SNES register $2112."},{"address":"$7E0026","length":"2 bytes. Ends at $7E0027.","beginsAt":8257574,"endsAt":8257575,"type":"Misc.","descriptio":"Depending on Layer 3 tides being activated or not, it's either:\n\nNot activated:\nLayer 2 X position minus Layer 1 X position.\nActivated:\nLayer 3 X position minus Layer 1 X position.\n\nUsed for various things, among which interaction with multiple layers is included."},{"address":"$7E0028","length":"2 bytes. Ends at $7E0029.","beginsAt":8257576,"endsAt":8257577,"type":"Misc.","descriptio":"Depending on Layer 3 tides being activated or not, it's either:\n\nNot activated:\nLayer 2 Y position minus Layer 1 Y position.\nActivated:\nLayer 3 Y position minus Layer 1 Y position.\n\nUsed for various things, among which interaction with multiple layers is included."},{"address":"$7E002A","length":"2 bytes. Ends at $7E002B.","beginsAt":8257578,"endsAt":8257579,"type":"Hardware mirror","descriptio":"Mode 7 Center X position. Mirror of SNES register $211F, + #$0080."},{"address":"$7E002C","length":"2 bytes. Ends at $7E002D.","beginsAt":8257580,"endsAt":8257581,"type":"Hardware mirror","descriptio":"Mode 7 Center Y position. Mirror of SNES register $2120, + #$0080."},{"address":"$7E002E","length":"2 bytes. Ends at $7E002F.","beginsAt":8257582,"endsAt":8257583,"type":"Hardware mirror","descriptio":"Mode 7 matrix parameter A. Mirror of SNES register $211B."},{"address":"$7E0030","length":"2 bytes. Ends at $7E0031.","beginsAt":8257584,"endsAt":8257585,"type":"Hardware mirror","descriptio":"Mode 7 matrix parameter B. Mirror of SNES register $211C."},{"address":"$7E0032","length":"2 bytes. Ends at $7E0033.","beginsAt":8257586,"endsAt":8257587,"type":"Hardware mirror","descriptio":"Mode 7 matrix parameter C. Mirror of SNES register $211D."},{"address":"$7E0034","length":"2 bytes. Ends at $7E0035.","beginsAt":8257588,"endsAt":8257589,"type":"Hardware mirror","descriptio":"Mode 7 matrix parameter D. Mirror of SNES register $211E."},{"address":"$7E0036","length":"2 bytes. Ends at $7E0037.","beginsAt":8257590,"endsAt":8257591,"type":"Misc.","descriptio":"Mode 7 rotation. Its values are calculated and stored into the respective Mode 7 parameter mirrors at $7E:002E through $7E:0035.\nValues #$0000 through #$01FF are all different values, after that it's the same pattern - that is, if you add this 16-bit address with #$0200, there is a 360 degree rotation.\nFurthermore, this address is used in the brown chained platform code as an index to the sine and cosine tables at $07:F7DB."},{"address":"$7E0038","length":"2 bytes. Ends at $7E0039.","beginsAt":8257592,"endsAt":8257593,"type":"Misc.","descriptio":"Mode 7 scaling; that is, making Layer 1 shrink or grow. Its values are calculated and stored into the respective Mode 7 parameter mirrors at $7E:002E through $7E:0035.\nThe first byte - $7E:0038 - is used for horizontal scaling, whereas the second byte - $7E:0039 - is used for vertical scaling.\nDefault value is #$20. The closer to #$00, the more the layer grows, the further from #$00, the more the layer shrinks. Value #$10 makes the layer twice as large as value #$20, value #$40 makes the layer twice as small as value #$20, etc."},{"address":"$7E003A","length":"2 bytes. Ends at $7E003B.","beginsAt":8257594,"endsAt":8257595,"type":"Hardware mirror","descriptio":"Mode 7 Layer 1 X position. Mirror of SNES register $210D."},{"address":"$7E003C","length":"2 bytes. Ends at $7E003D.","beginsAt":8257596,"endsAt":8257597,"type":"Hardware mirror","descriptio":"Mode 7 Layer 1 Y position. Mirror of SNES register $210E."},{"address":"$7E003E","length":"1 byte","beginsAt":8257598,"endsAt":8257598,"type":"Hardware mirror","descriptio":"Background mode select applied with IRQ below status bar (so the area above IRQ is not affected by this). Format: 4321pmmm.\n4321 = Layer 1/2/3/4 uses 8x8 tiles when clear, 16x16 tiles when set; p = Layer 3 absolute priority (only in background mode 1); mmm = background mode # (0-7).\nMirror of SNES register $2105."},{"address":"$7E003F","length":"1 byte","beginsAt":8257599,"endsAt":8257599,"type":"Hardware mirror","descriptio":"OAM Address, low byte. Also known as the mirror of SNES register $2102. High byte is at $00846B. Is sometimes used to alter priority of various sprite tiles, such as with the sprite backgrounds in the boss rooms."},{"address":"$7E0040","length":"1 byte","beginsAt":8257600,"endsAt":8257600,"type":"Hardware mirror","descriptio":"CGADSUB settings. Format: shbo4321.\ns = 0 for adding color layer, 1 for subtracting color layer; h = half-color enable; b = backdrop enable; o = object (aka sprite) enable; 4321 = enable Layer 4, 3, 2, 1 (Layer 3 is only affected below the status bar). Mirror of SNES register $2131."},{"address":"$7E0041","length":"1 byte","beginsAt":8257601,"endsAt":8257601,"type":"Hardware mirror","descriptio":"Layer 1/2 window mask settings. Format: aaaabbbb.\naaaa = Layer 2 window settings; bbbb = Layer 1 window settings. Mirror of SNES register $2123."},{"address":"$7E0042","length":"1 byte","beginsAt":8257602,"endsAt":8257602,"type":"Hardware mirror","descriptio":"Layer 3/4 window mask settings. Format: aaaabbbb.\naaaa = Layer 4 window settings; bbbb = Layer 3 window settings. Mirror of SNES register $2124."},{"address":"$7E0043","length":"1 byte","beginsAt":8257603,"endsAt":8257603,"type":"Hardware mirror","descriptio":"Object and color window settings. Format: aaaabbbb.\naaaa = color window settings; bbbb = object window settings. Mirror of SNES register $2125."},{"address":"$7E0044","length":"1 byte","beginsAt":8257604,"endsAt":8257604,"type":"Hardware mirror","descriptio":"Initial settings for color addition. Format: aabb00cd.\naa = main color window on/off; bb = sub color window on/off; c = fixed color add/subtract; d = direct color mode for 8bpp backgrounds. Mirror of SNES register $2130."},{"address":"$7E0045","length":"2 bytes. Ends at $7E0046.","beginsAt":8257605,"endsAt":8257606,"type":"Camera","descriptio":"Column/row of Map16 tiles to use for VRAM upload when layer 1 is scrolling left/up. Its value is equal to $7E:001A (or $7E:001C if vertical) divided by #$10, minus #$08."},{"address":"$7E0047","length":"2 bytes. Ends at $7E0048.","beginsAt":8257607,"endsAt":8257608,"type":"Camera","descriptio":"Column/row of Map16 tiles to use for VRAM upload when layer 1 is scrolling right/down. Its value is equal to $7E:001A (or $7E:001C if vertical) divided by #$10, plus #$17."},{"address":"$7E0049","length":"2 bytes. Ends at $7E004A.","beginsAt":8257609,"endsAt":8257610,"type":"Camera","descriptio":"Column/row of Map16 tiles to use for VRAM upload when interactive layer 2 is scrolling left/up. Its value is equal to $7E:001E (or $7E:0020 if vertical) divided by #$10 (16), minus #$08."},{"address":"$7E004B","length":"2 bytes. Ends at $7E004C.","beginsAt":8257611,"endsAt":8257612,"type":"Camera","descriptio":"Column/row of Map16 tiles to use for VRAM upload when interactive layer 2 is scrolling right/down. Its value is equal to $7E:001E (or $7E:0020 if vertical) divided by #$10, plus #$17."},{"address":"$7E004D","length":"2 bytes. Ends at $7E004E.","beginsAt":8257613,"endsAt":8257614,"type":"Camera","descriptio":"Last X/Y value of layer 1 where VRAM upload of Map16 tiles was performed when scrolling left/up.\nThe low 4 bits are forced to zero (AND #$FFF0) in order to get scroll values on a 16 pixel boundary.\nIt is used to determine if a VRAM update is necessary during scrolling."},{"address":"$7E004F","length":"2 bytes. Ends at $7E0050.","beginsAt":8257615,"endsAt":8257616,"type":"Camera","descriptio":"Last X/Y value of layer 1 where VRAM upload of Map16 tiles was performed when scrolling right/down.\nThe low 4 bits are forced to zero (AND #$FFF0) in order to get scroll values on a 16 pixel boundary.\nIt is used to determine if a VRAM update is necessary during scrolling."},{"address":"$7E0051","length":"2 bytes. Ends at $7E0052.","beginsAt":8257617,"endsAt":8257618,"type":"Camera","descriptio":"Last X/Y value of interactive layer 2 where VRAM upload of Map16 tiles was performed when scrolling left/up.\nThe low 4 bits are forced to zero (AND #$FFF0) in order to get scroll values on a 16 pixel boundary.\nIt is used to determine if a VRAM update is necessary during scrolling."},{"address":"$7E0053","length":"2 bytes. Ends at $7E0054.","beginsAt":8257619,"endsAt":8257620,"type":"Camera","descriptio":"Last X/Y value of interactive layer 2 where VRAM upload of Map16 tiles was performed when scrolling right/down.\nThe low 4 bits are forced to zero (AND #$FFF0) in order to get scroll values on a 16 pixel boundary.\nIt is used to determine if a VRAM update is necessary during scrolling."},{"address":"$7E0055","length":"1 byte","beginsAt":8257621,"endsAt":8257621,"type":"Camera","descriptio":"Direction of scrolling for Layer 1.\n#$00 = left (or up); #$02 = right (or down).\nUsed to index the various camera tables at $7E0045 to $7E0048 and $7E004D to $7E0050.\n\nWhen handling routine $00F70D, it is set to $00 if the player's on-screen X position is less than the value of $142A and $02 otherwise. This is used to determine which side to enable spawning sprites depending which side the player is on compared to $142A.\n\nIt is also temporarily set to #$01 during level load for loading onscreen sprites."},{"address":"$7E0056","length":"1 byte","beginsAt":8257622,"endsAt":8257622,"type":"Camera","descriptio":"Direction of scrolling for Layer 2.\n#$00 = left (or up); #$02 = right (or down).\nUsed to index the various camera tables at $7E:0049 through $7E:004C and $7E:0051 through $7E:0054."},{"address":"$7E0057","length":"1 byte","beginsAt":8257623,"endsAt":8257623,"type":"Blocks","descriptio":"Used in the level loading code. It's the position within the subscreen.\nFormat: yyyyxxxx, where yyyy is the Y position (units of 16 pixels) and xxxx is the X position."},{"address":"$7E0058","length":"1 byte","beginsAt":8257624,"endsAt":8257624,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E0059","length":"1 byte","beginsAt":8257625,"endsAt":8257625,"type":"Blocks","descriptio":"Used in the level loading routine as an indicator for the size of the object, or extended object type depending on what object is being loaded. Could be used as scratch RAM (except in ObjecTool and similar codes)."},{"address":"$7E005A","length":"1 byte","beginsAt":8257626,"endsAt":8257626,"type":"Blocks","descriptio":"Used in the level loading routine as the object number. Could be used as scratch RAM (except in ObjecTool and similar codes)."},{"address":"$7E005B","length":"1 byte","beginsAt":8257627,"endsAt":8257627,"type":"Misc.","descriptio":"Screen mode: CD----Vv.\nC = Collision with layer 2.\nD = Disable collision with layer 1.\nV = Vertical layer 2.\nv = Vertical layer 1.\n- = unused.\n\nThis address is set by a table at $05:8417, which is indexed by the level mode setting."},{"address":"$7E005C","length":"1 byte","beginsAt":8257628,"endsAt":8257628,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E005D","length":"1 byte","beginsAt":8257629,"endsAt":8257629,"type":"Misc.","descriptio":"Number of screens in level."},{"address":"$7E005E","length":"1 byte","beginsAt":8257630,"endsAt":8257630,"type":"Camera","descriptio":"The last screen number, plus 1 (so if a level is 2 screens wide (screens 0 and 1 are only accessible), $5E would have a value of $02) before the camera stops moving rightwards. (Only applies in horizontal levels.)"},{"address":"$7E005F","length":"1 byte","beginsAt":8257631,"endsAt":8257631,"type":"Camera","descriptio":"The last screen number, plus 1 (so if a level is 2 screens tall (screens 0 and 1 are only accessible), $5F would have a value of $02) before the camera stops moving downwards. (Only applies in vertical levels.)"},{"address":"$7E0060","length":"4 bytes. Ends at $7E0063.","beginsAt":8257632,"endsAt":8257635,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E0064","length":"1 byte","beginsAt":8257636,"endsAt":8257636,"type":"Misc.","descriptio":"Properties (YXPPCCCT) byte for most sprites inside levels - including the player. Exceptions to this include sprites that mess with sprite priority in a different way, such as Piranha Plants, items coming out of a box (and inside the item box) and Net Koopas behind the nets."},{"address":"$7E0065","length":"3 bytes. Ends at $7E0067.","beginsAt":8257637,"endsAt":8257639,"type":"Pointer","descriptio":"24-bit pointer to layer 1 data - both level and overworld."},{"address":"$7E0068","length":"3 bytes. Ends at $7E006A.","beginsAt":8257640,"endsAt":8257642,"type":"Pointer","descriptio":"24-bit pointer to layer 2 data."},{"address":"$7E006B","length":"3 bytes. Ends at $7E006D.","beginsAt":8257643,"endsAt":8257645,"type":"Pointer","descriptio":"24-bit pointer to low byte of Map16 block data. Used during level load."},{"address":"$7E006E","length":"3 bytes. Ends at $7E0070.","beginsAt":8257646,"endsAt":8257648,"type":"Pointer","descriptio":"24-bit pointer to high byte of Map16 block data. Used during level load."},{"address":"$7E0071","length":"1 byte","beginsAt":8257649,"endsAt":8257649,"type":"Player","descriptio":"Player animation trigger:\n\n\n00 None, the player is able to move freely.\n01 Flashing as if the player is hurt by an enemy.\n02 Get Mushroom animation.\n03 Get Feather animation. (Note: To make it work, write to $1496 also.)\n04 Get Fire Flower animation. (Note: To make it work, write to $149B also.)\n05 Enter a horizontal Warp Pipe.\n06 Enter a vertical Warp Pipe.\n07 Shoot from a slanted pipe.\n08 Shoot up into the sky (Yoshi Wings)\n09 End level without activating overworld events. (Dying)\n0A Castle entrance moves.\n0B Freeze player.\n0C Castle destruction moves.\n0D Enter a door."},{"address":"$7E0072","length":"1 byte","beginsAt":8257650,"endsAt":8257650,"type":"Player","descriptio":"Player is in the air flag. This is set to a certain value depending on how the player got in the air in the first place, and in what state he is currently (rising or sinking).\nThis address is not affected by phases such as climbing. It is, however, also used in swimming animation.\n\nNotable values:\n#$0B = Jumping/swimming upwards.\n#$0C = Shooting out of a slanted pipe, running at maximum speed.\n#$24 = Descending/sinking.\n\nThe address in general is used in many instances.\nFor example, the game checks if this address is #$0C. If not, the player cannot ascend properly with the cape. Furthermore, the Layer 3 smash won't hurt the player if he's not on the ground (any non-zero value) and this address prevents the player from locking in place when still airborne during the Morton/Roy/Ludwig battle.\nAlso, when airborne, the value in this address appears to be stored to $7E:13E0, which also explains the otherwise odd values used for the different airborne phases."},{"address":"$7E0073","length":"1 byte","beginsAt":8257651,"endsAt":8257651,"type":"Flag","descriptio":"Player is ducking flag. #$00 = No; #$04 = Yes. However, any value that is not zero also counts as 'Yes', SMW just stores that specific value to it."},{"address":"$7E0074","length":"1 byte","beginsAt":8257652,"endsAt":8257652,"type":"Player","descriptio":"Player is climbing flag: format: n--sifhb\nn: Net/vine flag. 1 - net, 0 - vine. Determines whether Mario can move diagonally.\ns: Side body collision point with climbing. If clear, block horizontal movement.\ni: Side head collision point with climbing.\nf: Feet collision point with climbing.\nh: Head collision point with climbing.\nb: Body collision point with climbing."},{"address":"$7E0075","length":"1 byte","beginsAt":8257653,"endsAt":8257653,"type":"Flag","descriptio":"Player is in water flag. #$00 = No; #$01 = Yes."},{"address":"$7E0076","length":"1 byte","beginsAt":8257654,"endsAt":8257654,"type":"Player","descriptio":"Player direction. #$00 = Left; #$01 = Right."},{"address":"$7E0077","length":"1 byte","beginsAt":8257655,"endsAt":8257655,"type":"Player","descriptio":"Player blocked status - Used to check if player is blocked in a certain direction. Format: SxxMUDLR\nThe M bit means that the player is in the middle of a block.\nThe S bit indicates that the player is touching the side of the screens while horizontal screen scrolling is disabled.\nUDLR = up, down, left, right (contact with walls).\n\nL is checked each 4 frames when the player have negative X speed. Others frames is zero.\n\nR is checked each 4 frames when the player have positive X speed. Others frames is zero."},{"address":"$7E0078","length":"1 byte","beginsAt":8257656,"endsAt":8257656,"type":"Player","descriptio":"Used to hide the player partially or fully. Format: dlucapLU.\nd = used in conjunction with all other set bits in order to disable processes such as the star timer decrementing.\nl = hide lower extra player tile when in flight (hovering with the cape).\nu = hide upper extra player tile when in flight (hovering with the cape).\nc = hide regular cape tile.\na = hide attributive 8x8 tile.\np = hide extra player tile that is shown during the inflated P-balloon pose (does not apply if the player is small).\nL = hide lower half of the body.\nU = hide upper half of the body."},{"address":"$7E0079","length":"1 byte","beginsAt":8257657,"endsAt":8257657,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E007A","length":"1 byte","beginsAt":8257658,"endsAt":8257658,"type":"Player","descriptio":"Accumulating fraction bits for fixed point player X speed (fractions of 256, see code around $00D792, this handles horizontal movement with the player and when the player is on the slope).\n\nNot to be confused with $7E13DA, which handles X position."},{"address":"$7E007B","length":"1 byte","beginsAt":8257659,"endsAt":8257659,"type":"Player","descriptio":"Player X speed. #$7F is the fastest rightwards speed, while #$80 is the highest leftwards. +/-#$14 is fully walking, +/-#$2F is fully running. #$01-#$7F is right, #$80-#$FF is left, #$00 is standing still."},{"address":"$7E007C","length":"1 byte","beginsAt":8257660,"endsAt":8257660,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E007D","length":"1 byte","beginsAt":8257661,"endsAt":8257661,"type":"Player","descriptio":"Player Y speed. #$00-#$7F = falling, #$80-#$FF = rising. #$80 is the highest upwards speed, while #$7F is the highest downwards speed. #$46 is the maximum fall speed, #$B3 is the normal jump speed, and #$A4 is the jump speed when fully running."},{"address":"$7E007E","length":"2 bytes. Ends at $7E007F.","beginsAt":8257662,"endsAt":8257663,"type":"Player","descriptio":"Player X position (16-bit), within the borders of the screen."},{"address":"$7E0080","length":"2 bytes. Ends at $7E0081.","beginsAt":8257664,"endsAt":8257665,"type":"Misc.","descriptio":"Player Y position (16-bit), within the borders of the screen.\nNote that this value may be displaced by $1888 (the screen shake), in addition to small one-pixel displacements based on Mario's powerup status and walking animation frame."},{"address":"$7E0082","length":"3 bytes. Ends at $7E0084.","beginsAt":8257666,"endsAt":8257668,"type":"Pointer","descriptio":"Points to how steep the various slopes are and which parts of the slopes they represent. Points to $00:E5C8 in tilesets 0 and 7, and $00:E55E in others.\nThe table this one points to has one byte per block, from tile 16E to tile 1D7.\nThe value in these tables is then multiplied by 16, the lowest nibble of the sprite/player X position is added, and this is then used as an index to $00:E632 to tell how many pixels the sprite/player should move down from the nearest 16x16 tile."},{"address":"$7E0085","length":"1 byte","beginsAt":8257669,"endsAt":8257669,"type":"Flag","descriptio":"Water level flag. #$00 = No; #$01 = Yes."},{"address":"$7E0086","length":"1 byte","beginsAt":8257670,"endsAt":8257670,"type":"Flag","descriptio":"Slippery level flag. #$00 = No; #$01 through #$7F = Half-slippery; #$80 through #$FF = Yes. Possible values in the clean ROM are #$00 and #$80."},{"address":"$7E0087","length":"1 byte","beginsAt":8257671,"endsAt":8257671,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E0088","length":"1 byte","beginsAt":8257672,"endsAt":8257672,"type":"Player","descriptio":"How long player goes into a pipe until he warps to another level.\n\nAlso used as a timer in the castle destruction scenes for holding inputs."},{"address":"$7E0089","length":"1 byte","beginsAt":8257673,"endsAt":8257673,"type":"Player","descriptio":"Action to take when the player enters or exits from a pipe.\n\n#$00 = Enter a right-facing horizontal pipe.\n#$01 = Enter a left-facing horizontal pipe.\n#$02 = Enter a down-facing vertical pipe.\n#$03 = Enter an up-facing vertical pipe.\n#$04 = Exit from a left-facing horizontal pipe.\n#$05 = Exit from a right-facing horizontal pipe.\n#$06 = Exit from an up-facing vertical pipe.\n#$07 = Exit from a down-facing vertical pipe.\n\nAlso:\nServes as a timer for the No Yoshi cutscenes for each controller command (for the table at $00:C848)."},{"address":"$7E008A","length":"3 bytes. Ends at $7E008C.","beginsAt":8257674,"endsAt":8257676,"type":"Misc.","descriptio":"Used for quite a number of things.\n\nAltogether, it's a 24-bit pointer to the location of the compressed graphics files inside the ROM.\n\nFurthermore, these addresses all appear to be used as scratch RAM. For example, solely $7E:008A is used as number of options to select in a blinking cursor menu."},{"address":"$7E008D","length":"3 bytes. Ends at $7E008F.","beginsAt":8257677,"endsAt":8257679,"type":"Misc.","descriptio":"This forms a 24-bit pointer to part of the decompressed graphics; starts at $7E:ACFE/F and keeps decrementing.\nThe three seperate RAM addresses have multiple purposes, however."},{"address":"$7E0090","length":"1 byte","beginsAt":8257680,"endsAt":8257680,"type":"Player","descriptio":"Player Y position within a block. Calculated with $7E:0096 & #$0F. Indicates whether the player is touching the top or the bottom of the block."},{"address":"$7E0091","length":"1 byte","beginsAt":8257681,"endsAt":8257681,"type":"Player","descriptio":"The direction to move the player out of a block.\n#$01-#$07 are up, #$08-#$0F are down. Directly storing to it is ineffective as $7E:0090 will be used to overwrite it at $00:EE19."},{"address":"$7E0092","length":"1 byte","beginsAt":8257682,"endsAt":8257682,"type":"Player","descriptio":"Player X position within a block. Calculated with $7E:0094 + #$08 & #$0F."},{"address":"$7E0093","length":"1 byte","beginsAt":8257683,"endsAt":8257683,"type":"Player","descriptio":"The side of a block the player is on. It's set to #$00 for the right side and #$01 for the left side. This address is relative to the block the player is currently inside."},{"address":"$7E0094","length":"2 bytes. Ends at $7E0095.","beginsAt":8257684,"endsAt":8257685,"type":"Player","descriptio":"Player X position (16-bit) within the level, next frame (calculates player position one frame ahead, as opposed to $7E:00D1).\nIt's also used as a player X position on-screen on the overworld border."},{"address":"$7E0096","length":"2 bytes. Ends at $7E0097.","beginsAt":8257686,"endsAt":8257687,"type":"Player","descriptio":"Player Y position (16-bit) within the level, next frame (calculates player position one frame ahead, as opposed to $7E:00D3).\nIt's also used as a player Y position on-screen on the overworld border."},{"address":"$7E0098","length":"1 byte","beginsAt":8257688,"endsAt":8257688,"type":"Misc.","descriptio":"Y position of block the player is touching, low byte. Also used in the creation of various sprite types/other blocks."},{"address":"$7E0099","length":"1 byte","beginsAt":8257689,"endsAt":8257689,"type":"Misc.","descriptio":"Y position of block the player is touching, high byte. Also used in the creation of various sprite types/other blocks."},{"address":"$7E009A","length":"1 byte","beginsAt":8257690,"endsAt":8257690,"type":"Misc.","descriptio":"X position of block the player is touching, low byte. Also used in the creation of various sprite types/other blocks."},{"address":"$7E009B","length":"1 byte","beginsAt":8257691,"endsAt":8257691,"type":"Misc.","descriptio":"X position of block the player is touching, high byte. Also used in the creation of various sprite types/other blocks."},{"address":"$7E009C","length":"1 byte","beginsAt":8257692,"endsAt":8257692,"type":"Blocks","descriptio":"Map16 tile to generate (used with $00:BEB0)."},{"address":"$7E009D","length":"1 byte","beginsAt":8257693,"endsAt":8257693,"type":"Flag","descriptio":"Lock animation and sprites flag. Most codes will still run if this is set, but almost nothing will move or animate."},{"address":"$7E009E","length":"12 bytes. Ends at $7E00A9.","beginsAt":8257694,"endsAt":8257705,"type":"Sprites","descriptio":"Sprite number, or Acts Like setting for custom sprites."},{"address":"$7E00AA","length":"12 bytes. Ends at $7E00B5.","beginsAt":8257706,"endsAt":8257717,"type":"Sprites","descriptio":"Sprite Y speed table."},{"address":"$7E00B6","length":"12 bytes. Ends at $7E00C1.","beginsAt":8257718,"endsAt":8257729,"type":"Sprites","descriptio":"Sprite X speed table."},{"address":"$7E00C2","length":"12 bytes. Ends at $7E00CD.","beginsAt":8257730,"endsAt":8257741,"type":"Sprites","descriptio":"Miscellaneous sprite table. In SMW, it's commonly used as a pointer to different parts of a sprite. More information can be found here."},{"address":"$7E00CE","length":"3 bytes. Ends at $7E00D0.","beginsAt":8257742,"endsAt":8257744,"type":"Pointer","descriptio":"24-bit pointer to level's sprite data."},{"address":"$7E00D1","length":"2 bytes. Ends at $7E00D2.","beginsAt":8257745,"endsAt":8257746,"type":"Player","descriptio":"Player X position (16-bit) within the level, current frame (as opposed to $7E:0094)."},{"address":"$7E00D3","length":"2 bytes. Ends at $7E00D4.","beginsAt":8257747,"endsAt":8257748,"type":"Player","descriptio":"Player Y position (16-bit) within the level, current frame (as opposed to $7E:0096)."},{"address":"$7E00D5","length":"3 bytes. Ends at $7E00D7.","beginsAt":8257749,"endsAt":8257751,"type":"Pointer","descriptio":"Pointer to X and Y positions of Wiggler segments. Table at $7F9A7B."},{"address":"$7E00D8","length":"12 bytes. Ends at $7E00E3.","beginsAt":8257752,"endsAt":8257763,"type":"Sprites","descriptio":"Sprite Y position, low byte."},{"address":"$7E00E4","length":"12 bytes. Ends at $7E00EF.","beginsAt":8257764,"endsAt":8257775,"type":"Sprites","descriptio":"Sprite X position, low byte."},{"address":"$7E00F0","length":"16 bytes. Ends at $7E00FF.","beginsAt":8257776,"endsAt":8257791,"type":"Empty","descriptio":"Used by Lunar Magic for various purposes.\n$7E:00FE is the current level number plus 1 (so Yoshi's Island 1 would store #$0106 here). It's used for the custom palette loading code. #$0000 means that the custom palette won't be loaded (this is probably used for castle intros and/or credits).\nThe rest is unknown.\n\nOriginally, this address is empty, and it's cleared at reset, titlescreen and overworld load."},{"address":"$7E0100","length":"1 byte","beginsAt":8257792,"endsAt":8257792,"type":"Misc.","descriptio":"Game Mode. A list of valid values can be found here."},{"address":"$7E0101","length":"4 bytes. Ends at $7E0104.","beginsAt":8257793,"endsAt":8257796,"type":"Misc.","descriptio":"Currently loaded sprite GFX files - stored in reverse order."},{"address":"$7E0105","length":"4 bytes. Ends at $7E0108.","beginsAt":8257797,"endsAt":8257800,"type":"Misc.","descriptio":"Currently loaded layer GFX files - stored in reverse order."},{"address":"$7E0109","length":"1 byte","beginsAt":8257801,"endsAt":8257801,"type":"Misc.","descriptio":"When set to a non-zero value, the overworld loading routine is overridden by loading a level value stored here, minus #$24 if it's above #$24. For example, the intro level (level C5) is loaded this way by storing #$E9 to this address.\nDepending on whether the player is on the main overworld or a submap, the level in question is either in the 0xx or 1xx area."},{"address":"$7E010A","length":"1 byte","beginsAt":8257802,"endsAt":8257802,"type":"Misc.","descriptio":"Current save file number."},{"address":"$7E010B","length":"245 bytes. Ends at $7E01FF.","beginsAt":8257803,"endsAt":8258047,"type":"Misc.","descriptio":"Stack. The first two bytes is the current level number in most hacks."},{"address":"$7E0200","length":"544 bytes. Ends at $7E041F.","beginsAt":8258048,"endsAt":8258591,"type":"I/O","descriptio":"OAM table - handles all sprite tiles that are on screen. Each \"slot\" has four bytes per tile, in the order X position, Y position, tile number, YXPPCCCT. Tiles which are currently unused are usually marked as such by giving them a Y position of #$F0 (which is offscreen).\n\nVarious tiles are documented here. Note that:\n\nCode\n$7E0310-$7E0313 is for the player's upper half\n$7E0314-$7E0317 for the player's lower half\n$7E0318-$7E031B is for the player's hand.\n\nAdditionally, $0400-$041F handles an additional ninth bit of the X position, as well as the tile's size (generally, 8x8 vs 16x16). However, it can't be used, as it will be overwritten each frame using the data at $0420-$049F; you should instead write the data there."},{"address":"$7E0420","length":"128 bytes. Ends at $7E049F.","beginsAt":8258592,"endsAt":8258719,"type":"Sprites","descriptio":"A table that determines the size of a sprite tile - 8x8 (#$00) or 16x16 (#$02). Each byte corresponds to four OAM bytes. Stores to $7E:0400-$7E:041F (where each two bits correspond to four OAM bytes.)\nThe lowest bit (#$01) is also used for the high bit of the X position."},{"address":"$7E04A0","length":"448 bytes. Ends at $7E065F.","beginsAt":8258720,"endsAt":8259167,"type":"Misc.","descriptio":"HDMA table for windowing effects, such as with the keyhole, level ending and titlescreen."},{"address":"$7E0660","length":"32 bytes. Ends at $7E067F.","beginsAt":8259168,"endsAt":8259199,"type":"Misc.","descriptio":"Gets overwritten by the HDMA table for the level ending circle. If the player gets above or below the borders of the screen, it can even run into $7E:0680 and beyond.\nOtherwise cleared on reset and titlescreen load, but usage as empty RAM is definitely not recommended."},{"address":"$7E0680","length":"1 byte","beginsAt":8259200,"endsAt":8259200,"type":"Palettes","descriptio":"Index to the palette updating tables, that are uploaded every frame.\n#$00 = Use table at $7E:0682.\n#$03 = Use table at $7E:0905.\n#$06 = Use table at $7E:0703."},{"address":"$7E0681","length":"1 byte","beginsAt":8259201,"endsAt":8259201,"type":"Palettes","descriptio":"Index to the table at $7E:0682 during the time when data is stored to this table in the lightning, Magikoopa and Big Boo Boss codes."},{"address":"$7E0682","length":"19 bytes. Ends at $7E0694.","beginsAt":8259202,"endsAt":8259220,"type":"Palettes","descriptio":"Used for uploading palettes dynamically. SMW uses this in the lightning/Magikoopa/Big Boo Boss palette effects. $7E:0682 holds the amount of bytes to transfer, $7E:0683 holds the color number (stored to SNES register $2121), the bytes afterwards hold the actual color values transferred to the CGRAM. Further, this table may be indexed by $7E:0681 to add more color destinations; it's terminated by a #$00. The format is the same as before, just at the new location.\nThis table doesn't actually have to end at $7E:0694, but SMW never goes beyond this. As such, the area after this address is listed as \"empty\"."},{"address":"$7E0695","length":"108 bytes. Ends at $7E0700.","beginsAt":8259221,"endsAt":8259328,"type":"Empty","descriptio":"100 bytes used in LM 1.70+ for VRAM modification.\n\nIn the clean ROM, it's empty (cleared on reset and titlescreen load)."},{"address":"$7E0701","length":"2 bytes. Ends at $7E0702.","beginsAt":8259329,"endsAt":8259330,"type":"Palettes","descriptio":"Background color. Used during gameplay in conjunction with $2132."},{"address":"$7E0703","length":"512 bytes. Ends at $7E0902.","beginsAt":8259331,"endsAt":8259842,"type":"Palettes","descriptio":"The entire palette. It is only uploaded to CGRAM during the level loading routine. Also used during overworld load, but not all of it."},{"address":"$7E0903","length":"2 bytes. Ends at $7E0904.","beginsAt":8259843,"endsAt":8259844,"type":"Palettes","descriptio":"Copy of background color $7E:0701/2."},{"address":"$7E0905","length":"496 bytes. Ends at $7E0AF4.","beginsAt":8259845,"endsAt":8260340,"type":"Palettes","descriptio":"Copy of palettes 0-F from $0703-$08F2. Only the first half of palette F is included. It is used in overworld path events fading in ($04:EAA0), and level ending fade in/out ($00:AF9D)."},{"address":"$7E0AF5","length":"1 byte","beginsAt":8260341,"endsAt":8260341,"type":"Empty","descriptio":"Cleared on reset and titlescreen load. Also cleared after a boss had been beaten - this can be disabled by changing [9C 5C 0A] at $00:B08D to [80 01 EA]."},{"address":"$7E0AF6","length":"256 bytes. Ends at $7E0BF5.","beginsAt":8260342,"endsAt":8260597,"type":"Misc.","descriptio":"Used for three different things:\n1. Decompressed overworld graphics, animated tiles. For that it also cooperates with $7E:0BF6-$7E:0C55.\n2. Iggy's/Larry's platform interaction. (16x16 tiles in a 16x16 square.)\n3. Various tables for the Yoshi eggs at the credits, such as how much time must be waited until a new egg breaks, Y speed tables. See this post."},{"address":"$7E0BF6","length":"384 bytes. Ends at $7E0D75.","beginsAt":8260598,"endsAt":8260981,"type":"Misc.","descriptio":"Decompressed GFX for tiles #$4A-#$4F, #$5A-#$5F of SP1."},{"address":"$7E0D76","length":"2 bytes. Ends at $7E0D77.","beginsAt":8260982,"endsAt":8260983,"type":"Graphics","descriptio":"Used during the GFX33 DMA routine. It holds the first of three possible source addresses for the animated graphics."},{"address":"$7E0D78","length":"2 bytes. Ends at $7E0D79.","beginsAt":8260984,"endsAt":8260985,"type":"Graphics","descriptio":"Used during the GFX33 DMA routine. It holds the second of three possible source addresses for the animated graphics."},{"address":"$7E0D7A","length":"2 bytes. Ends at $7E0D7B.","beginsAt":8260986,"endsAt":8260987,"type":"Graphics","descriptio":"Used during the GFX33 DMA routine. It holds the third of three possible source addresses for the animated graphics."},{"address":"$7E0D7C","length":"2 bytes. Ends at $7E0D7D.","beginsAt":8260988,"endsAt":8260989,"type":"Graphics","descriptio":"Used during the GFX33 DMA routine. It holds the first of three possible VRAM addresses for the animated graphics."},{"address":"$7E0D7E","length":"2 bytes. Ends at $7E0D7F.","beginsAt":8260990,"endsAt":8260991,"type":"Graphics","descriptio":"Used during the GFX33 DMA routine. It holds the second of three possible VRAM addresses for the animated graphics."},{"address":"$7E0D80","length":"2 bytes. Ends at $7E0D81.","beginsAt":8260992,"endsAt":8260993,"type":"Graphics","descriptio":"Used during the GFX33 DMA routine. It holds the third of three possible VRAM addresses for the animated graphics."},{"address":"$7E0D82","length":"2 bytes. Ends at $7E0D83.","beginsAt":8260994,"endsAt":8260995,"type":"Pointer","descriptio":"16-bit pointer to the player palette. #$B2C8 = regular Mario; #$B2DC = regular Luigi; #$B2F0 = fire Mario; #$B304 = fire Luigi. Always uses #$00 for bank byte (the first bank)."},{"address":"$7E0D84","length":"1 byte","beginsAt":8260996,"endsAt":8260996,"type":"Misc.","descriptio":"Used in Player Graphics DMA routine. This holds the amount of tiles to load. Is #$0A in levels (because of Yoshi) and #$06 on the overworld.\nIf it's set to zero, the player palette isn't reloaded. The presents screen makes use of that."},{"address":"$7E0D85","length":"20 bytes. Ends at $7E0D98.","beginsAt":8260997,"endsAt":8261016,"type":"Sprites","descriptio":"16-bit pointers in bank $7E for uploading the player's, Yoshi's and Podoboo's on-screen tiles.\nThey're divided in two sets of 10 bytes, each two bytes being used for two 8x8 tiles.\nThe first 10 bytes are for the top half of each 16x16 tile (player's head, player's bottom, cape, Yoshi's head/Podoboo, Yoshi's bottom). The latter 10 bytes are for the bottom half of each 16x16 tile (same order)."},{"address":"$7E0D99","length":"2 bytes. Ends at $7E0D9A.","beginsAt":8261017,"endsAt":8261018,"type":"Graphics","descriptio":"Holds the lower two bytes of the 24-bit RAM address (bank byte is $7E) of tile 7F's graphics; used during the player graphics DMA routine."},{"address":"$7E0D9B","length":"1 byte","beginsAt":8261019,"endsAt":8261019,"type":"Misc.","descriptio":"Activates different IRQ/NMI behavior for various game modes, depending on the following values:\n#$00 = Regular level.\n#$01 = Mario Start, Time Up, etc. + Title Screen + Castle destruction scene.\n#$02 = Overworld.\n#$80 = Iggy's and Larry's battle mode.\n#$C0 = Reznor's, Morton's and Roy's battle mode.\n#$C1 = Bowser's battle mode."},{"address":"$7E0D9C","length":"1 byte","beginsAt":8261020,"endsAt":8261020,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E0D9D","length":"1 byte","beginsAt":8261021,"endsAt":8261021,"type":"Hardware mirror","descriptio":"Main Screen and Window logic mask setting of current level mode (000abcde - a = Object layer; b = Layer 4; c = Layer 3; d = Layer 2; e = Layer 1). Appears as TM in Lunar Magic. Mirror of SNES registers $212C and $212E; transfer only occurs on level load."},{"address":"$7E0D9E","length":"1 byte","beginsAt":8261022,"endsAt":8261022,"type":"Hardware mirror","descriptio":"Sub Screen and Window logic mask setting of current level mode (000abcde - a = Object layer; b = Layer 4; c = Layer 3; d = Layer 2; e = Layer 1). Appears as TD in Lunar Magic. Mirror of SNES registers $212D and $212F; transfer only occurs on level load."},{"address":"$7E0D9F","length":"1 byte","beginsAt":8261023,"endsAt":8261023,"type":"Hardware mirror","descriptio":"HDMA Channel Enable: abcdefgh a = Channel 7 .. h = Channel 0: 1 = Enable 0 = Disable. Mirror of SNES register $420C."},{"address":"$7E0DA0","length":"1 byte","beginsAt":8261024,"endsAt":8261024,"type":"Misc.","descriptio":"Which controllers are plugged in (00 = port 1, 01 = port 2). Used to determine which port to accept data from when only one controller is plugged in.\n\nIf the high bit is set, then both controller ports are plugged in and $0DB3 will be used instead to determine the active controller."},{"address":"$7E0DA1","length":"1 byte","beginsAt":8261025,"endsAt":8261025,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E0DA2","length":"1 byte","beginsAt":8261026,"endsAt":8261026,"type":"I/O","descriptio":"Copy of controller data 1 ($7E:0015). Format: byetUDLR.\nb = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.\nUsed by player 1 (Mario)."},{"address":"$7E0DA3","length":"1 byte","beginsAt":8261027,"endsAt":8261027,"type":"I/O","descriptio":"Copy of controller data 1 ($7E:0015). Format: byetUDLR.\nb = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.\nUsed by player 2 (Luigi)."},{"address":"$7E0DA4","length":"1 byte","beginsAt":8261028,"endsAt":8261028,"type":"I/O","descriptio":"Copy of controller data 2 ($7E:0017). Format: axlr----.\na = A; x = X; l = L; r = R, 0 = null/unused.\nNote that the upper two bits are also used by controller data 1 at $7E:0015, so that A/B and X/Y are combined.\nUsed by player 1 (Mario)."},{"address":"$7E0DA5","length":"1 byte","beginsAt":8261029,"endsAt":8261029,"type":"I/O","descriptio":"Copy of controller data 2 ($7E:0017). Format: axlr----.\na = A; x = X; l = L; r = R, 0 = null/unused.\nNote that the upper two bits are also used by controller data 1 at $7E:0015, so that A/B and X/Y are combined.\nUsed by player 2 (Luigi)."},{"address":"$7E0DA6","length":"1 byte","beginsAt":8261030,"endsAt":8261030,"type":"I/O","descriptio":"Copy of controller data 1, one frame ($7E:0016). Format: byetUDLR.\nb = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.\nUsed by player 1 (Mario)."},{"address":"$7E0DA7","length":"1 byte","beginsAt":8261031,"endsAt":8261031,"type":"I/O","descriptio":"Copy of controller data 1, one frame ($7E:0016). Format: byetUDLR.\nb = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right.\nUsed by player 2 (Luigi)."},{"address":"$7E0DA8","length":"1 byte","beginsAt":8261032,"endsAt":8261032,"type":"I/O","descriptio":"Copy of controller data 2, one frame ($7E:0018). Format: axlr----.\na = A; x = X; l = L; r = R, 0 = null/unused.\nNote that the sixth bit is also used by controller data 1 at $7E:0016, so that X/Y are combined.\nUsed by player 1 (Mario)."},{"address":"$7E0DA9","length":"1 byte","beginsAt":8261033,"endsAt":8261033,"type":"I/O","descriptio":"Copy of controller data 2, one frame ($7E:0018). Format: axlr----.\na = A; x = X; l = L; r = R, 0 = null/unused.\nNote that the sixth bit is also used by controller data 1 at $7E:0016, so that X/Y are combined.\nUsed by player 2 (Luigi)."},{"address":"$7E0DAA","length":"1 byte","beginsAt":8261034,"endsAt":8261034,"type":"I/O","descriptio":"Player 1 controller disable flags ($4219), one frame. If a bit is set here, that bit will be disabled in $7E:0016.\nFormat: byetUDLR.\nb = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right."},{"address":"$7E0DAB","length":"1 byte","beginsAt":8261035,"endsAt":8261035,"type":"I/O","descriptio":"Player 2 controller disable flags ($421B), one frame. If a bit is set here, that bit will be disabled in $7E:0016.\nFormat: byetUDLR.\nb = B, y = Y, e = Select, t = Start, UDLR = Up/Down/Left/Right."},{"address":"$7E0DAC","length":"1 byte","beginsAt":8261036,"endsAt":8261036,"type":"I/O","descriptio":"Player 1 controller disable flags ($4218), one frame. If a bit is set here, that bit will be disabled in $7E:0018.\nFormat: axlr----.\na = A, x = X, l = L, r = R, 0 = null/unused."},{"address":"$7E0DAD","length":"1 byte","beginsAt":8261037,"endsAt":8261037,"type":"I/O","descriptio":"Player 2 controller disable flags ($421A), one frame. If a bit is set here, that bit will be disabled in $7E:0018.\nFormat: axlr----.\na = A, x = X, l = L, r = R, 0 = null/unused."},{"address":"$7E0DAE","length":"1 byte","beginsAt":8261038,"endsAt":8261038,"type":"Hardware mirror","descriptio":"Handles brightness and force blank. Format: f---bbbb. f = force blank flag, --- = unused bits, bbbb = brightness setting. Mirror of SNES register $2100."},{"address":"$7E0DAF","length":"1 byte","beginsAt":8261039,"endsAt":8261039,"type":"Misc.","descriptio":"Mosaic direction. #$00 = shrinking mosaic; #$01 = growing mosaic."},{"address":"$7E0DB0","length":"1 byte","beginsAt":8261040,"endsAt":8261040,"type":"Hardware mirror","descriptio":"Current mosaic pixel size on level load. Mirror of SNES register $2106, though bits 0 and 1 are always set ($2106 = $7E:0DB0 | #$03)."},{"address":"$7E0DB1","length":"1 byte","beginsAt":8261041,"endsAt":8261041,"type":"Timer","descriptio":"Is used to keep a mode active. If the respective value is positive, the game mode doesn't change. This is primarily used in the fading routines (example: from overworld to level and vice versa)."},{"address":"$7E0DB2","length":"1 byte","beginsAt":8261042,"endsAt":8261042,"type":"Flag","descriptio":"Two player game flag. #$00 = No; #$01 = Yes."},{"address":"$7E0DB3","length":"1 byte","beginsAt":8261043,"endsAt":8261043,"type":"Player","descriptio":"Which character is in play. #$00 = Mario; #$01 = Luigi. If you prefer Luigi to be #$04, use $7E:0DD6."},{"address":"$7E0DB4","length":"1 byte","beginsAt":8261044,"endsAt":8261044,"type":"Player","descriptio":"Mario's lives. Note that this is only used in two player games, you'll want $7E:0DBE in 99% of the cases."},{"address":"$7E0DB5","length":"1 byte","beginsAt":8261045,"endsAt":8261045,"type":"Player","descriptio":"Luigi's lives. Note that this is only used in two player games, you'll want $7E:0DBE in 99% of the cases."},{"address":"$7E0DB6","length":"1 byte","beginsAt":8261046,"endsAt":8261046,"type":"Player","descriptio":"Mario's coins. Note that this is only used in two player games, you'll want $7E:0DBF in 99% of the cases."},{"address":"$7E0DB7","length":"1 byte","beginsAt":8261047,"endsAt":8261047,"type":"Player","descriptio":"Luigi's coins. Note that this is only used in two player games, you'll want $7E:0DBF in 99% of the cases."},{"address":"$7E0DB8","length":"1 byte","beginsAt":8261048,"endsAt":8261048,"type":"Player","descriptio":"Mario's powerup/status. Note that this is only used in two player games, you'll want $7E:0019 in 99% of the cases."},{"address":"$7E0DB9","length":"1 byte","beginsAt":8261049,"endsAt":8261049,"type":"Player","descriptio":"Luigi's powerup/status. Note that this is only used in two player games, you'll want $7E:0019 in 99% of the cases."},{"address":"$7E0DBA","length":"1 byte","beginsAt":8261050,"endsAt":8261050,"type":"Yoshi","descriptio":"Mario's Yoshi color. #$04=yellow; #$06=blue; #$08=red; #$0A=green"},{"address":"$7E0DBB","length":"1 byte","beginsAt":8261051,"endsAt":8261051,"type":"Yoshi","descriptio":"Luigi's Yoshi color. #$04=yellow; #$06=blue; #$08=red; #$0A=green"},{"address":"$7E0DBC","length":"1 byte","beginsAt":8261052,"endsAt":8261052,"type":"Player","descriptio":"Item in Mario's item box. #$00 = Nothing; #$01 = Mushroom; #$02 = Cape; #$03 = Fire Flower. Note that you'll want $7E:0DC2 in most cases."},{"address":"$7E0DBD","length":"1 byte","beginsAt":8261053,"endsAt":8261053,"type":"Player","descriptio":"Item in Luigi's item box. #$00 = Nothing; #$01 = Mushroom; #$02 = Cape; #$03 = Fire Flower. Note that you'll want $7E:0DC2 in most cases."},{"address":"$7E0DBE","length":"1 byte","beginsAt":8261054,"endsAt":8261054,"type":"Player","descriptio":"Current player lives, minus one (#$04 here means that the player has 5 lives)."},{"address":"$7E0DBF","length":"1 byte","beginsAt":8261055,"endsAt":8261055,"type":"Player","descriptio":"Current player coin count."},{"address":"$7E0DC0","length":"1 byte","beginsAt":8261056,"endsAt":8261056,"type":"Counter","descriptio":"Green star block coin counter. Starts at 30 at the beginning of a level, and decrements for each coin that is collected. Adjusts content of green star block when it hits zero. (A 1-Up mushroom comes out, instead of a spinning coin.)"},{"address":"$7E0DC1","length":"1 byte","beginsAt":8261057,"endsAt":8261057,"type":"Yoshi","descriptio":"Player can carry Yoshi over levels flag. #$00 = can't carry over levels; #$01 = can carry over levels."},{"address":"$7E0DC2","length":"1 byte","beginsAt":8261058,"endsAt":8261058,"type":"Player","descriptio":"Item in current player's item box. #$00 = None; #$01 = Mushroom; #$02 = Fire Flower; #$03 = Star; #$04 = Feather."},{"address":"$7E0DC3","length":"4 bytes. Ends at $7E0DC6.","beginsAt":8261059,"endsAt":8261062,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load. $7E:0DC3 is also cleared when selecting how many players to use, but this can be disabled with no known side effects by setting $00:9E48 to [80 01 EA]."},{"address":"$7E0DC7","length":"2 bytes. Ends at $7E0DC8.","beginsAt":8261063,"endsAt":8261064,"type":"Player","descriptio":"Overworld X position where Mario should be going to. Is used by overworld path tiles to indicate Mario's direction. Updated as soon as Mario starts moving - zero otherwise."},{"address":"$7E0DC9","length":"2 bytes. Ends at $7E0DCA.","beginsAt":8261065,"endsAt":8261066,"type":"Player","descriptio":"Overworld Y position where Mario should be going to. Is used by overworld path tiles to indicate Mario's direction. Updated as soon as Mario starts moving - zero otherwise."},{"address":"$7E0DCB","length":"2 bytes. Ends at $7E0DCC.","beginsAt":8261067,"endsAt":8261068,"type":"Player","descriptio":"Overworld X position where Luigi should be going to. Is used by overworld path tiles to indicate Luigi's direction. Updated as soon as Luigi starts moving - zero otherwise."},{"address":"$7E0DCD","length":"2 bytes. Ends at $7E0DCE.","beginsAt":8261069,"endsAt":8261070,"type":"Player","descriptio":"Overworld Y position where Luigi should be going to. Is used by overworld path tiles to indicate Luigi's direction. Updated as soon as Luigi starts moving - zero otherwise."},{"address":"$7E0DCF","length":"2 bytes. Ends at $7E0DD0.","beginsAt":8261071,"endsAt":8261072,"type":"Player","descriptio":"Player X speed on the overworld. Added with $7E:13D5, which does happen to be zero all the time."},{"address":"$7E0DD1","length":"2 bytes. Ends at $7E0DD2.","beginsAt":8261073,"endsAt":8261074,"type":"Player","descriptio":"Player Y speed on the overworld. Added with $7E:13D7, which is zero most of the time."},{"address":"$7E0DD3","length":"1 byte","beginsAt":8261075,"endsAt":8261075,"type":"Overworld","descriptio":"Player direction. #$00 = up; #$02 = down; #$04 = left; #$06 = right."},{"address":"$7E0DD4","length":"1 byte","beginsAt":8261076,"endsAt":8261076,"type":"Should be 00","descriptio":"This address is effectively the high byte of $0DD3 on the overworld and should not be touched there, though in levels it is unused. It is also referenced once as the low byte of $0DD5, though its value isn't used there.\nCleared on reset and titlescreen load, and when Mario starts walking on an overworld path."},{"address":"$7E0DD5","length":"1 byte","beginsAt":8261077,"endsAt":8261077,"type":"Misc.","descriptio":"Used to indicate how a level has been exited, and hence what events to activate on the overworld."},{"address":"$7E0DD6","length":"1 byte","beginsAt":8261078,"endsAt":8261078,"type":"Player","descriptio":"Which character is in play. Used on the overworld. The value of this address is actually $7E:0DB3 * 4.\n#$00 = Mario; #$04 = Luigi."},{"address":"$7E0DD7","length":"1 byte","beginsAt":8261079,"endsAt":8261079,"type":"Should be 00","descriptio":"An address that is expected to be #$00 throughout the entire game. $7E:0DD6 (current player) is sometimes used in 16bit mode, so using this address for different purposes is a bad idea."},{"address":"$7E0DD8","length":"1 byte","beginsAt":8261080,"endsAt":8261080,"type":"Flag","descriptio":"Used to tell if the game is currently switching between Mario and Luigi or not.\n#$00 = Not switching between Mario and Luigi.\n#$01 = Switching between Mario and Luigi, during the fade-out."},{"address":"$7E0DD9","length":"1 byte","beginsAt":8261081,"endsAt":8261081,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E0DDA","length":"1 byte","beginsAt":8261082,"endsAt":8261082,"type":"Misc.","descriptio":"Back-up of the music register. Gets its value from the level music table at $05:84DB.\nBit 7 of this address is set when the player has a star powerup or presses a P-switch; when this is cleared again, the music ends.\nThis address is also set to #$FF when the level ends, either by beating it or by dying.\nBit 6 is similar but is used to not reupload all music. This is used when changing from the Mario start screen to the level game mode."},{"address":"$7E0DDB","length":"3 bytes. Ends at $7E0DDD.","beginsAt":8261083,"endsAt":8261085,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E0DDE","length":"1 byte","beginsAt":8261086,"endsAt":8261086,"type":"Misc.","descriptio":"Which files to delete on the erase file screen. Format: xxxxx123. It is also used as an overworld sprite index."},{"address":"$7E0DDF","length":"1 byte","beginsAt":8261087,"endsAt":8261087,"type":"Sprites","descriptio":"Starting OAM index for overworld sprites. Appears to be used only by the cloud sprites."},{"address":"$7E0DE0","length":"5 bytes. Ends at $7E0DE4.","beginsAt":8261088,"endsAt":8261092,"type":"Sprites","descriptio":"Used for the overworld cloud sprites. This table is used in such a way that clouds check each other's 16-bit Y positions. By doing this, they can maintain their speed, making it the same for all clouds on-screen."},{"address":"$7E0DE5","length":"16 bytes. Ends at $7E0DF4.","beginsAt":8261093,"endsAt":8261108,"type":"Sprites","descriptio":"Overworld sprite number. A list of possible values can be found here."},{"address":"$7E0DF5","length":"16 bytes. Ends at $7E0E04.","beginsAt":8261109,"endsAt":8261124,"type":"Sprites","descriptio":"Miscellaneous overworld sprite table."},{"address":"$7E0E05","length":"16 bytes. Ends at $7E0E14.","beginsAt":8261125,"endsAt":8261140,"type":"Sprites","descriptio":"Miscellaneous overworld sprite table."},{"address":"$7E0E15","length":"16 bytes. Ends at $7E0E24.","beginsAt":8261141,"endsAt":8261156,"type":"Sprites","descriptio":"Miscellaneous overworld sprite table."},{"address":"$7E0E25","length":"16 bytes. Ends at $7E0E34.","beginsAt":8261157,"endsAt":8261172,"type":"Sprites","descriptio":"Miscellaneous overworld sprite table."},{"address":"$7E0E35","length":"16 bytes. Ends at $7E0E44.","beginsAt":8261173,"endsAt":8261188,"type":"Sprites","descriptio":"Overworld sprite X position, low byte."},{"address":"$7E0E45","length":"16 bytes. Ends at $7E0E54.","beginsAt":8261189,"endsAt":8261204,"type":"Sprites","descriptio":"Overworld sprite Y position, low byte."},{"address":"$7E0E55","length":"16 bytes. Ends at $7E0E64.","beginsAt":8261205,"endsAt":8261220,"type":"Sprites","descriptio":"Overworld sprite Z position, low byte; distance that the sprite is from the ground."},{"address":"$7E0E65","length":"16 bytes. Ends at $7E0E74.","beginsAt":8261221,"endsAt":8261236,"type":"Sprites","descriptio":"Overworld sprite X position, high byte."},{"address":"$7E0E75","length":"16 bytes. Ends at $7E0E84.","beginsAt":8261237,"endsAt":8261252,"type":"Sprites","descriptio":"Overworld sprite Y position, high byte."},{"address":"$7E0E85","length":"16 bytes. Ends at $7E0E94.","beginsAt":8261253,"endsAt":8261268,"type":"Sprites","descriptio":"Overworld sprite Z position, high byte; distance that the sprite is from the ground. Probably has no real purpose in the original SMW; it may not be anything but #$00."},{"address":"$7E0E95","length":"16 bytes. Ends at $7E0EA4.","beginsAt":8261269,"endsAt":8261284,"type":"Sprites","descriptio":"Overworld sprite X speed."},{"address":"$7E0EA5","length":"16 bytes. Ends at $7E0EB4.","beginsAt":8261285,"endsAt":8261300,"type":"Sprites","descriptio":"Overworld sprite Y speed."},{"address":"$7E0EB5","length":"16 bytes. Ends at $7E0EC4.","beginsAt":8261301,"endsAt":8261316,"type":"Sprites","descriptio":"Overworld sprite Z speed."},{"address":"$7E0EC5","length":"16 bytes. Ends at $7E0ED4.","beginsAt":8261317,"endsAt":8261332,"type":"Sprites","descriptio":"Accumulating fraction bits for overworld sprite X speed."},{"address":"$7E0ED5","length":"16 bytes. Ends at $7E0EE4.","beginsAt":8261333,"endsAt":8261348,"type":"Sprites","descriptio":"Accumulating fraction bits for overworld sprite Y speed."},{"address":"$7E0EE5","length":"16 bytes. Ends at $7E0EF4.","beginsAt":8261349,"endsAt":8261364,"type":"Sprites","descriptio":"Accumulating fraction bits for overworld sprite Z speed."},{"address":"$7E0EF5","length":"1 byte","beginsAt":8261365,"endsAt":8261365,"type":"Overworld","descriptio":"This would be used to check whether the Koopa Kid should activate. Most likely it was used to prevent the Koopa Kid from triggering multiple times. Uses bits 5-7 only (#$80, #$40 and #$20).\nThis address can be used as empty free RAM if you do not use the overworld koopa kids, it is cleared on reset and titlescreen load."},{"address":"$7E0EF6","length":"1 byte","beginsAt":8261366,"endsAt":8261366,"type":"Overworld","descriptio":"Indicates which of the koopa kid triggers you are standing on. By default the tiles are: #$49, #$4A and #$4B. These correspond to index #$00, #$01 and #$02 respectively. This address is unused in the original SMW and can be used as empty free RAM, it is cleared on reset and titlescreen load."},{"address":"$7E0EF7","length":"1 byte","beginsAt":8261367,"endsAt":8261367,"type":"Misc.","descriptio":"If bit 7 is set (#$80-#$FF) and the player is located on a level tile, he will enter it directly."},{"address":"$7E0EF8","length":"1 byte","beginsAt":8261368,"endsAt":8261368,"type":"Flag","descriptio":"Yoshi has been saved for the first time flag - used for Yoshi's thank message."},{"address":"$7E0EF9","length":"55 bytes. Ends at $7E0F2F.","beginsAt":8261369,"endsAt":8261423,"type":"Misc.","descriptio":"Status bar tilemap. A list of which byte goes where can be found here."},{"address":"$7E0F30","length":"1 byte","beginsAt":8261424,"endsAt":8261424,"type":"Counter","descriptio":"Timer frame counter. When this address reaches #$00, one second is subtracted from SMW's timer, after which this address is set to #$28. This means that a SMW second is only 40 frames - in NTSC (60Hz), three SMW seconds = two real seconds"},{"address":"$7E0F31","length":"3 bytes. Ends at $7E0F33.","beginsAt":8261425,"endsAt":8261427,"type":"Counter","descriptio":"Timer.\n$7E:0F31 = Hundreds.\n$7E:0F32 = Tens.\n$7E:0F33 = Ones."},{"address":"$7E0F34","length":"3 bytes. Ends at $7E0F36.","beginsAt":8261428,"endsAt":8261430,"type":"Counter","descriptio":"Mario's score, divided by 10 (the last digit of the score counter is always zero)."},{"address":"$7E0F37","length":"3 bytes. Ends at $7E0F39.","beginsAt":8261431,"endsAt":8261433,"type":"Counter","descriptio":"Luigi's score, divided by 10 (the last digit of the score counter is always zero)."},{"address":"$7E0F3A","length":"6 bytes. Ends at $7E0F3F.","beginsAt":8261434,"endsAt":8261439,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E0F40","length":"2 bytes. Ends at $7E0F41.","beginsAt":8261440,"endsAt":8261441,"type":"Counter","descriptio":"Amount of score to add up to the score total, at level end. Decrements as total score increments."},{"address":"$7E0F42","length":"6 bytes. Ends at $7E0F47.","beginsAt":8261442,"endsAt":8261447,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E0F48","length":"1 byte","beginsAt":8261448,"endsAt":8261448,"type":"Counter","descriptio":"Mario Bonus stars."},{"address":"$7E0F49","length":"1 byte","beginsAt":8261449,"endsAt":8261449,"type":"Counter","descriptio":"Luigi Bonus stars."},{"address":"$7E0F4A","length":"20 bytes. Ends at $7E0F5D.","beginsAt":8261450,"endsAt":8261469,"type":"Sprites","descriptio":"Cluster sprite table. Is used for the castle background flame's frame to display, as well as Boo ring's speed - #$00 = still; #$01-#$7F = counter-clockwise; #$80-#$FF = clockwise.\nIs also used for several other sprites that are generated, such as the ghost ceiling, but not necessarily for the same purpose."},{"address":"$7E0F5E","length":"20 bytes. Ends at $7E0F71.","beginsAt":8261470,"endsAt":8261489,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load. This table was probably meant to function as a cluster sprite table, but it was never used as such."},{"address":"$7E0F72","length":"20 bytes. Ends at $7E0F85.","beginsAt":8261490,"endsAt":8261509,"type":"Sprites","descriptio":"Cluster sprite table. Could be used for any purpose - in the original SMW, it holds the index of each individual Boo in a Boo ring (#$00-#$09). It is also used in the death bat ceiling to keep track of the bats' Y position."},{"address":"$7E0F86","length":"20 bytes. Ends at $7E0F99.","beginsAt":8261510,"endsAt":8261529,"type":"Sprites","descriptio":"Cluster sprite table, used for various purposes including determining which Boo ring is which and determining whether or not a particular \"death bat\" is visible."},{"address":"$7E0F9A","length":"20 bytes. Ends at $7E0FAD.","beginsAt":8261530,"endsAt":8261549,"type":"Sprites","descriptio":"Cluster sprite table. Its purpose in SMW are the following: act as a timer for determining when death bats will fly, and as a timer to freeze an active Boo in the ghost ceiling."},{"address":"$7E0FAE","length":"2 bytes. Ends at $7E0FAF.","beginsAt":8261550,"endsAt":8261551,"type":"Sprites","descriptio":"Low byte of the angle of the Boo rings. $7E:0FAE is for the first Boo ring active; $7E:0FAF is for the second Boo ring active.\nNote that this is not reset on level or overworld load."},{"address":"$7E0FB0","length":"2 bytes. Ends at $7E0FB1.","beginsAt":8261552,"endsAt":8261553,"type":"Sprites","descriptio":"High byte of the angle of the Boo rings. $7E:0FB0 is for the first Boo ring active; $7E:0FB1 is for the second Boo ring active.\nNote that this does not reset on level or overworld load."},{"address":"$7E0FB2","length":"2 bytes. Ends at $7E0FB3.","beginsAt":8261554,"endsAt":8261555,"type":"Sprites","descriptio":"Boo ring center X position, low byte. $7E:0FB2 is for the first active Boo ring; $7E:0FB3 is for the second active Boo ring."},{"address":"$7E0FB4","length":"2 bytes. Ends at $7E0FB5.","beginsAt":8261556,"endsAt":8261557,"type":"Sprites","descriptio":"Boo ring center X position, high byte. $7E:0FB4 is for the first active Boo ring; $7E:0FB5 is for the second active Boo ring."},{"address":"$7E0FB6","length":"2 bytes. Ends at $7E0FB7.","beginsAt":8261558,"endsAt":8261559,"type":"Sprites","descriptio":"Boo ring center Y position, low byte. $7E:0FB6 is for the first active Boo ring; $7E:0FB7 is for the second active Boo ring."},{"address":"$7E0FB8","length":"2 bytes. Ends at $7E0FB9.","beginsAt":8261560,"endsAt":8261561,"type":"Sprites","descriptio":"Boo ring center Y position, high byte. $7E:0FB8 is for the first active Boo ring; $7E:0FB9 is for the second active Boo ring."},{"address":"$7E0FBA","length":"2 bytes. Ends at $7E0FBB.","beginsAt":8261562,"endsAt":8261563,"type":"Sprites","descriptio":"Offscreen flag for the Boo ring. If a byte is set to 01, the ring is offscreen and doesn't show up. $7E:0FBA is for the first Boo ring active; $7E:0FBB is for the second."},{"address":"$7E0FBC","length":"2 bytes. Ends at $7E0FBD.","beginsAt":8261564,"endsAt":8261565,"type":"Sprites","descriptio":"Boo ring index to level table (see $7E:1938). They are never erased, though, so they will always be reloaded."},{"address":"$7E0FBE","length":"1024 bytes. Ends at $7E13BD.","beginsAt":8261566,"endsAt":8262589,"type":"Pointer","descriptio":"16-bit pointer table, indexed by Map16 tile number*2. Points to the image to use for a certain Map16 tile. Usually starts with #$8000 or $9100 (levels) or #$D000 (overworld) and the value counts up with eight per two RAM addresses. Bank byte should be #$0D (levels) or #$05 (overworld)."},{"address":"$7E13BE","length":"1 byte","beginsAt":8262590,"endsAt":8262590,"type":"Misc.","descriptio":"Item memory settings from header."},{"address":"$7E13BF","length":"1 byte","beginsAt":8262591,"endsAt":8262591,"type":"Misc.","descriptio":"Translevel number, set during transfer from world map to level. This identifies the first room of the current level. To convert this to a room number (the \"level number\" in Lunar Magic), if > #$24, then add #$DC.\n\nIn the clean ROM, the actual formula is more complex. If translevel number > #$24, then subtract #$24. Then check RAM $7E:1F11 or $7E:1F12. If the player is in a submap (not the big world map), then add #$100. The submaps of SMW use translevel numbers > #$24, and the big map uses numbers <= #$24, so the simplication is that #$100 - #$24 is #$DC; Lunar Magic forces this simplification to remain."},{"address":"$7E13C0","length":"1 byte","beginsAt":8262592,"endsAt":8262592,"type":"Should be 00","descriptio":"While this is never non-zero in the original SMW, $7E:13BF (level number) is sometimes used in 16bit mode, so using this address for different purposes is a bad idea\nTo make this one become useful free RAM, change $05:D9C9 to [E2 10 AC BF 13 B9 08 D6 8D EA 1D] (header : lorom : org $05D9C9 : SEP #$10 : LDY $13BF : LDA $D608,y : STA $1DEA)."},{"address":"$7E13C1","length":"1 byte","beginsAt":8262593,"endsAt":8262593,"type":"Overworld","descriptio":"Current Layer 1 overworld tile the player is standing on."},{"address":"$7E13C2","length":"1 byte","beginsAt":8262594,"endsAt":8262594,"type":"Should be 00","descriptio":"Used occasionally on the overworld as the high byte of $13C1, and thus should be kept as #$00 there. It is safe to use in levels, however.\nCleared on reset, title screen load, and when walking onto a new overworld tile."},{"address":"$7E13C3","length":"1 byte","beginsAt":8262595,"endsAt":8262595,"type":"Overworld","descriptio":"Current player submap. #$00 = Main map; #$01 = Yoshi's Island; #$02 = Vanilla Dome; #$03 = Forest of Illusion; #$04 = Valley of Bowser; #$05 = Special World; #$06 = Star World.\nNote that it is sometimes inaccurate. It is wiser to use $7E:0DB3 and $7E:1F11."},{"address":"$7E13C4","length":"1 byte","beginsAt":8262596,"endsAt":8262596,"type":"Should be 00","descriptio":"An address that is expected to be #$00 throughout the entire game. $7E:13C3 (current player submap) is often used in 16-bit mode, so using this address for different purposes is a bad idea, unless you make sure it's cleared on overworld load. Is also cleared during the switch between Mario and Luigi. Furthermore, cleared on reset and titlescreen load."},{"address":"$7E13C5","length":"1 byte","beginsAt":8262597,"endsAt":8262597,"type":"Counter","descriptio":"Increments each time a 3-Up moon is collected, serves no other purpose. (Its value is never loaded.)"},{"address":"$7E13C6","length":"1 byte","beginsAt":8262598,"endsAt":8262598,"type":"Misc.","descriptio":"Used by SMW's cutscenes. Goes from #$01 to #$08 and these values are in the order of the boss battles, e.g. #$01 = Iggy's castle, #$02 = Morton's castle. #$08 is the value used for the credits."},{"address":"$7E13C7","length":"1 byte","beginsAt":8262599,"endsAt":8262599,"type":"Yoshi","descriptio":"Yoshi color. #$04=yellow; #$06=blue; #$08=red; #$0A=green. Refreshes on level change"},{"address":"$7E13C8","length":"1 byte","beginsAt":8262600,"endsAt":8262600,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E13C9","length":"1 byte","beginsAt":8262601,"endsAt":8262601,"type":"Flag","descriptio":"Show \"Continue/End\" menu flag.\n#$00 = Don't show it; #$01 = freeze player, but don't load the text yet; #$02 = freeze player, load \"Continue/End\" menu."},{"address":"$7E13CA","length":"1 byte","beginsAt":8262602,"endsAt":8262602,"type":"Flag","descriptio":"Show save prompt flag. It actually triggers when you get on a new level tile. #$00 = Don't show save prompt; #$01 = show save prompt."},{"address":"$7E13CB","length":"1 byte","beginsAt":8262603,"endsAt":8262603,"type":"Misc.","descriptio":"This has been left out in the current SMW version.\n\nWhen you hit a goal tape, and spawn a starman (which never happens), this is set to #$01. Now each time you switch an area in a level, this gets multiplied by 2. When this reaches #$80 (changed area seven times), you will start the area with the star power. The instruction which sets this address to #$01 is located at $00:FB5C."},{"address":"$7E13CC","length":"1 byte","beginsAt":8262604,"endsAt":8262604,"type":"Counter","descriptio":"The value you store here is the amount of coins that are being added up to the total. Usually, $7E:13CC is either #$00 or #$01, but it can be set to other values in order to add up multiple coins at once."},{"address":"$7E13CD","length":"1 byte","beginsAt":8262605,"endsAt":8262605,"type":"Flag","descriptio":"If set to #$00, the midway point won't trigger if grabbed (it'll still make you big, but it won't set the midway flag). Never has any effect in the original SMW, probably left over from a beta."},{"address":"$7E13CE","length":"1 byte","beginsAt":8262606,"endsAt":8262606,"type":"Flag","descriptio":"Midway Point flag. #$00 = Midway Point not crossed; #$01 = Midway Point crossed.\n\nAlso used on the overworld as a flag to to indicate the level should activate an event."},{"address":"$7E13CF","length":"1 byte","beginsAt":8262607,"endsAt":8262607,"type":"Flag","descriptio":"Used to override the castle/ghost house entrance cutscene after you collect the midway point.\n\n#$00 = Show castle/ghost house entrance cutscene after collecting midway point.\n#$40 = Don't show castle/ghost house entrance cutscene after collecting midway point. Note that any non-zero value will work, this is just what SMW uses.\n\nChange $05:D9DE to #$9C to make the cutscene play regardless."},{"address":"$7E13D0","length":"1 byte","beginsAt":8262608,"endsAt":8262608,"type":"Overworld","descriptio":"Index to what tile should be stored to VRAM during the castle/switch palace/fortress destruction sequence.\n#$00 = Pressed green switch.\n#$01 = Pressed yellow/red/blue switch.\n#$02 = Destroyed fortress.\n#$03 = Destroyed castle with exit.\n#$04 = Destroyed castle without exit.\nThe tile data is then read from $04:EE7A through a 24-bit pointer at $7E:000A (scratch RAM)."},{"address":"$7E13D1","length":"1 byte","beginsAt":8262609,"endsAt":8262609,"type":"Overworld","descriptio":"Holds the value of the listed castle/fortress/switch tile that must be destroyed, by checking which event it uses (table at $04E5D6). For example, event #$06 (Iggy's Castle destroyed) makes this address hold value #$00 (it's the first slot in the table).\nThis address is then used as index to the address where the destroyed tile is uploaded to VRAM."},{"address":"$7E13D2","length":"1 byte","beginsAt":8262610,"endsAt":8262610,"type":"Misc.","descriptio":"Color of the currently pressed switch palace, or #$00 for None. It's set to #$01 when the player hits a switch palace, and then set to the correct color (#$01 for Yellow, #$02 for Blue, #$03 for Red and #$04 for Green, others are oddly colored and/or flipped) by the message box routine. It creates both the ! blocks in the message boxes and on the overworld."},{"address":"$7E13D3","length":"1 byte","beginsAt":8262611,"endsAt":8262611,"type":"Flag","descriptio":"Timer that disables Start from flipping the Pause flag when its value is not #$00 (thus, #$01-#$FF). If it is #$00, being able to press Start to get into the Pause mode is possible."},{"address":"$7E13D4","length":"1 byte","beginsAt":8262612,"endsAt":8262612,"type":"Flag","descriptio":"Pause flag for levels, and \"look around the map\" flag for the overworld. #$00 = off; #$01 = on."},{"address":"$7E13D5","length":"1 byte","beginsAt":8262613,"endsAt":8262613,"type":"Misc.","descriptio":"A flag that determines whether or not Layer 3 should scroll with the screen. If this is zero, Layer 3 will scroll depending on the tileset and tide setting; if it is any other value, Layer 3 will always be at the same position relative to Layer 1.\nAlso used on the overworld as accumulating fraction bits for player X speed (see $04:9801)."},{"address":"$7E13D6","length":"1 byte","beginsAt":8262614,"endsAt":8262614,"type":"Timer","descriptio":"Amount of time to wait until the score-incrementing drumroll begins when you beat a level. Any time you enter a level, this address is set to #$50. Once you beat the level and the number of bonus stars you won and the score is displayed (or just the score if you didn't cut the goal tape), this timer will decrement itself once per frame. Once it reaches a negative value or zero, the drumroll will commence.\nOnce the drumroll ends, this is set to #$30, and then set to zero upon going to the overworld. It serves the same purpose after you beat a boss as well."},{"address":"$7E13D7","length":"2 bytes. Ends at $7E13D8.","beginsAt":8262615,"endsAt":8262616,"type":"Overworld","descriptio":"Y position fraction bits for the intro march (walking to Yoshi's House). Treated as 16-bit, but the high byte is effectively unused outside of being written to.\n\nWith Lunar Magic v3.00, this address gains a new purpose in horizontal levels, being used to hold the height of the level data (in units of pixels).\nFor example, in the original level sizes, this value is set to 0x01B0 (for 0x1B blocks tall). Because the level screen is always 16 blocks wide, this is also the number of blocks per screen column."},{"address":"$7E13D9","length":"1 byte","beginsAt":8262617,"endsAt":8262617,"type":"Pointer","descriptio":"A pointer to various processes running on the overworld.\n\n#$01 = Activate overworld events.\n#$02 = Runs as soon as a level is beaten and the events have run.\n#$03 = Standing still on a level tile.\n#$04 = Player is moving in a certain direction.\n#$05 = Runs before settling on a level tile.\n#$06 = Fading out to #$07.\n#$07 = Switching between Mario and Luigi.\n#$08 = Fading in from #$07.\n#$09 = Follows up #$08, sets $7E:13D9 to #$03.\n#$0A = Switching between two submaps (not via warp pipe/star).\n#$0B = Activate star warp.\n#$0C = Player intro march (entering overworld for the first time).\n\nAlso used in the level end march:\n#$00 = Show up the course clear text.\n#$01 = Store bonus star text (if applicable), bonus stars not decrementing yet.\n#$02 = Count down timer/convert to score, add up bonus stars to total.\n#$03 = Do nothing."},{"address":"$7E13DA","length":"1 byte","beginsAt":8262618,"endsAt":8262618,"type":"Player","descriptio":"Accumulating fraction bits (fractions of 16; bits 4-7 used while bits 0-3 are always zero; #%XXXX0000) for fixed point player X position (not to be confused with $7E007A). This is used mainly for player's X speed position movement to enable increments for less-than a pixel.\n\nHandled via a routine at $00DC4F."},{"address":"$7E13DB","length":"1 byte","beginsAt":8262619,"endsAt":8262619,"type":"Player","descriptio":"Player walking frame pose.\n\nWhile walking, it gets the values from the table at $00:DC78, indexed by $7E:0019, which eventually becomes the player pose if the player does nothing else. The duration of each frame is read from $00:DC7C, though $7E:13DB plays no role in this. Note that this never is #$02 if the player is small.\n$7E:13DB plays a role in determining which walking frame should be raised one pixel - see $00E35D."},{"address":"$7E13DC","length":"1 byte","beginsAt":8262620,"endsAt":8262620,"type":"Player","descriptio":"Accumulating fraction bits for fixed point player Y position. Same format as $7E13DA but Y position instead of X."},{"address":"$7E13DD","length":"1 byte","beginsAt":8262621,"endsAt":8262621,"type":"Player","descriptio":"Pose used when player is turning around. Uses same format as $7E:13E0."},{"address":"$7E13DE","length":"1 byte","beginsAt":8262622,"endsAt":8262622,"type":"Player","descriptio":"Poses used on overworld map and during credits by the player. The animation uses three frames, namely: this value, this value + 1, and this value + 2.\nCan also be used as a \"Player is looking up\" flag. That's cleared every frame, and it's set to #$03 when holding the Up arrow and standing still. The graphics routine is the only code that actually reads it."},{"address":"$7E13DF","length":"1 byte","beginsAt":8262623,"endsAt":8262623,"type":"Player","descriptio":"Cape image. A list of valid values can be found here."},{"address":"$7E13E0","length":"1 byte","beginsAt":8262624,"endsAt":8262624,"type":"Player","descriptio":"Player image/pose. A list of valid values can be found here."},{"address":"$7E13E1","length":"1 byte","beginsAt":8262625,"endsAt":8262625,"type":"Player","descriptio":"What kind of slope the player is on. Also set when flying with a cape:\n\n#$00 = No slope.\n#$08 = Gradual slope left.\n#$10 = Gradual slope right.\n#$18 = Normal slope left.\n#$20 = Normal slope right.\n#$28 = Steep slope left.\n#$30 = Steep slope right.\n#$38 = Left facing up conveyor.\n#$40 = Left facing down conveyor.\n#$48 = Right facing up conveyor.\n#$50 = Right facing down conveyor.\n#$58 = Very steep slope left.\n#$60 = Very steep slope right.\n#$68 = Flying left while holding left, or holding right and tapping B.\n#$70 = Flying right while holding right, or holding left and tapping B."},{"address":"$7E13E2","length":"1 byte","beginsAt":8262626,"endsAt":8262626,"type":"Player","descriptio":"Spinjump fireball timer. It increments every frame when the player spinjumps, if he has fire power. If the lowest four bits are clear, the player will throw out a fireball. The fourth bit (#$10) is the direction in which that fireball will move."},{"address":"$7E13E3","length":"1 byte","beginsAt":8262627,"endsAt":8262627,"type":"Player","descriptio":"Player is wall-running flag.\n\n#$00 = not wall-running.\n#$02 = on bottom left (45° angle).\n#$03 = on bottom right (45° angle).\n#$04 = on top left (45° angle, on top of the wall).\n#$05 = on top right (45° angle, on top of the wall).\n#$06 = on the left wall.\n#$07 = on the right wall.\n\nNote that custom block codes will not run while wall-running!"},{"address":"$7E13E4","length":"1 byte","beginsAt":8262628,"endsAt":8262628,"type":"Player","descriptio":"Player dash timer/P-meter. Increments with #$02 every frame the player is walking on the ground with the dash button held, otherwise decrements until it is zero. #$70 indicates that the player is at its maximum running speed, and also means that the player is able to fly with a cape."},{"address":"$7E13E5","length":"1 byte","beginsAt":8262629,"endsAt":8262629,"type":"Misc.","descriptio":"This is the index used to get how many frames to store to the player animation timer, at $7E:1496. This is set to #$68 when the player is moving over a slippery surface."},{"address":"$7E13E6","length":"2 bytes. Ends at $7E13E7.","beginsAt":8262630,"endsAt":8262631,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E13E8","length":"1 byte","beginsAt":8262632,"endsAt":8262632,"type":"Flag","descriptio":"Cape spin interacts with sprites flag.\n#$00 = don't interact; #$01 = do interact."},{"address":"$7E13E9","length":"2 bytes. Ends at $7E13EA.","beginsAt":8262633,"endsAt":8262634,"type":"Player","descriptio":"Cape interaction X position within the level. It's adjusted when the cape attack is used."},{"address":"$7E13EB","length":"2 bytes. Ends at $7E13EC.","beginsAt":8262635,"endsAt":8262636,"type":"Player","descriptio":"Cape interaction Y position within the level. It's adjusted when the cape attack is used."},{"address":"$7E13ED","length":"1 byte","beginsAt":8262637,"endsAt":8262637,"type":"Player","descriptio":"Player pose on a slope when sliding, is set to #$1C.\nThis value is also negative (bit 7 set) when landing from flying, which allows the player to slide."},{"address":"$7E13EE","length":"1 byte","beginsAt":8262638,"endsAt":8262638,"type":"Player","descriptio":"What kind of slope the player is on.\n\n#$FC = Very steep slope left.\n#$FD = Steep slope left.\n#$FE = Normal slope left.\n#$FF = Gradual slope left.\n#$00 = Not on slope.\n#$01 = Gradual slope right.\n#$02 = Normal slope right.\n#$03 = Steep slope right.\n#$04 = Very steep slope right."},{"address":"$7E13EF","length":"1 byte","beginsAt":8262639,"endsAt":8262639,"type":"Player","descriptio":"Player is on ground flag. Set to #$01 on Layer 1, #$02 on Layer 2, and #$03 when on both. If he's running fast enough up a slope, that value is doubled.\n\nIs only set when touching an actual floor, and not when running up walls. Does not work correctly in blocks, as the value still has to be calculated at that point. Instead, the value is copied over to $7E008D during that time. If Layer 1 interaction is enabled, that address is also doubled."},{"address":"$7E13F0","length":"1 byte","beginsAt":8262640,"endsAt":8262640,"type":"Player","descriptio":"Used to calculate the index to the direction the player faces while using a climbing net door. The formula is $7E:149D << 1 & #$0E | $7E:13F0. This address gets its value from $7E:13F9."},{"address":"$7E13F1","length":"1 byte","beginsAt":8262641,"endsAt":8262641,"type":"Flag","descriptio":"Vertical Scroll enable flag. #$00 = disabled; #$01 = enabled. Not to be confused with $7E1412 (for most ASM codes, to enable/disable vertical scrolling, using $1412 is recommended instead)."},{"address":"$7E13F2","length":"1 byte","beginsAt":8262642,"endsAt":8262642,"type":"Empty","descriptio":"Cleared on reset, titlescreen, overworld, and cutscene load, as well as at $00F8A7. (TODO: What exactly is this routine?)"},{"address":"$7E13F3","length":"1 byte","beginsAt":8262643,"endsAt":8262643,"type":"Timer","descriptio":"When you get a P-balloon, this is set to #$09. Each frame afterwards, this is decremented until it gets to #$01, at which point the player will begin to show his inflated frame."},{"address":"$7E13F4","length":"5 bytes. Ends at $7E13F8.","beginsAt":8262644,"endsAt":8262648,"type":"Blocks","descriptio":"A byte assigned to each row of blocks in the coin bonus game. Updated as blocks are chosen by the player to decide whether a life is given or not. If the value is #$FF, a life will be handed out. $7E:13F4 is for the uppermost row, $7E:13F5 for the one below that, etc."},{"address":"$7E13F9","length":"1 byte","beginsAt":8262649,"endsAt":8262649,"type":"Player","descriptio":"Flag that sends Mario behind layers.\n01 will send him behind objects, 02 will send him behind objects and sprites, and 03 will only send him behind sprites.\n\nSetting to 01 also treats Mario as if he's behind a net, meaning he'll only interact with sprites also behind nets. 02 and 03 will disable sprite interaction altogether."},{"address":"$7E13FA","length":"1 byte","beginsAt":8262650,"endsAt":8262650,"type":"Player","descriptio":"Whether the player is capable of jumping out of the water immediately or not (so just below the surface). #$00 = No; #$01 = Yes."},{"address":"$7E13FB","length":"1 byte","beginsAt":8262651,"endsAt":8262651,"type":"Player","descriptio":"Player is frozen flag. This includes controls and animation. Other sprites still move and can interact with the player, but contact with them should be avoided, as it would freeze the game. This may be useful for cutscenes to eliminate the jumping sound."},{"address":"$7E13FC","length":"1 byte","beginsAt":8262652,"endsAt":8262652,"type":"Misc.","descriptio":"Currently active boss. Used for determining which graphics to load, as well as checking for various other purposes (like when the player should have priority over certain sprite backgrounds, that can be found in the boss rooms).\n#$00 = Morton; #$01 = Roy; #$02 = Ludwig; #$03 = Bowser; #$04 = Reznor\nNote that Iggy, Lemmy, Wendy and Larry don't make use of this. Cleared on level->overworld transitions, and possibly at other times too."},{"address":"$7E13FD","length":"1 byte","beginsAt":8262653,"endsAt":8262653,"type":"Flag","descriptio":"When the L/R button is pressed, this address gets set to #$01 which briefly freezes the screen while the screen scrolls in whatever direction you pressed. It's cleared again when scrolling is done."},{"address":"$7E13FE","length":"1 byte","beginsAt":8262654,"endsAt":8262654,"type":"Misc.","descriptio":"#$02 = scroll right, #$04 = scroll left. Used when L/R is pressed."},{"address":"$7E13FF","length":"1 byte","beginsAt":8262655,"endsAt":8262655,"type":"Player","descriptio":"Player direction ($7E:0076) times 2. Used in the L/R screen-scrolling routine to determine when the screen will stop scrolling."},{"address":"$7E1400","length":"1 byte","beginsAt":8262656,"endsAt":8262656,"type":"Camera","descriptio":"Controls if the camera should move to be at the proper place compared to the player. If this is set, L and R are ignored.\n#$00 = normal case, don't move camera automatically, keep it in place (assuming L/R aren't used).\n#$08 = move camera right.\n#$0A = move camera left."},{"address":"$7E1401","length":"1 byte","beginsAt":8262657,"endsAt":8262657,"type":"Timer","descriptio":"Increments with one each time one of the L/R buttons is pressed, until the timer hits #$10 (at which the L/R screen scroll is activated) or if the buttons are released."},{"address":"$7E1402","length":"1 byte","beginsAt":8262658,"endsAt":8262658,"type":"Blocks","descriptio":"A flag that is set when the player is on a note block that is currently going down, i.e. the bounce sprite is moving downwards. If this wouldn't be set, the player would be pushed away from tile 152 (the tile that temporarily comes into place of the note block)."},{"address":"$7E1403","length":"1 byte","beginsAt":8262659,"endsAt":8262659,"type":"Misc.","descriptio":"Settings for current layer 3 tide.\n#$00 - Not a tide image\n#$01 - Water level changes\n#$02 - Water level doesn't change"},{"address":"$7E1404","length":"1 byte","beginsAt":8262660,"endsAt":8262660,"type":"Flag","descriptio":"If \"vertical scroll at will\" is enabled, then this flag controls if the screen should scroll up to the player. If you set this to a non-zero value every frame, it can be seen as a temporary alternative to setting $00:F878/0x7A78 to #$80, since the latter is permanent."},{"address":"$7E1405","length":"1 byte","beginsAt":8262661,"endsAt":8262661,"type":"Flag","descriptio":"Indicates that the player is just about to warp to another level via a pipe, and whether or not Yoshi should be drawn at that point. It is set as soon as $7E:0088 reaches zero, and if Yoshi is inside the warp pipe too, his graphics will be hidden."},{"address":"$7E1406","length":"1 byte","beginsAt":8262662,"endsAt":8262662,"type":"Camera","descriptio":"This is set to #$80 if you bounce off of a springboard or a purple triangle (while on Yoshi, that is), and is cleared when touching the ground.\nThe game uses this, along with some other RAM addresses, to determine if the screen should scroll up with the player or not."},{"address":"$7E1407","length":"1 byte","beginsAt":8262663,"endsAt":8262663,"type":"Player","descriptio":"Player flying with cape phase.\n\n#$00 = Not gliding.\n#$01 = Gliding, rising.\n#$02 = Gliding, staying on level.\n#$03 = Gliding, sinking a little.\n#$04 = Gliding, sinking more.\n#$05 = Swooping down, initial phase.\n#$06 = Swooping down, fast.\n\nControls player pose as well (table at $00:CE79)."},{"address":"$7E1408","length":"1 byte","beginsAt":8262664,"endsAt":8262664,"type":"Player","descriptio":"Used to index the cape gliding table at $00:D7D4 to see what the next step should be in the cape gliding phase. That value is (eventually) stored in $7E:1407.\n#$00 = Make player rise.\n#$01 = Make player sink (eventually swoop down).\n#$02 = Holding off left/right button, make player sink, but not swoop down.\n#$03 = Holding off left/right button, swooping down, make player sink less.\n#$04 = Holding off left/right and X/Y buttons, terminate cape gliding."},{"address":"$7E1409","length":"1 byte","beginsAt":8262665,"endsAt":8262665,"type":"Player","descriptio":"Keeps track of the furthest stage the player has been diving during flight. Possible values are:\n#$F8: the stage when not holding the right or left button\n#$F4: Partially aiming towards floor\n#$F0: Almost completely diving\n#$C8: Diving completely, the stage where you cause an earthquake where you land.\n\nWhen set to #$C8, the player will gain the large upwards boost (instead of the little normal boost) when cathing air."},{"address":"$7E140A","length":"1 byte","beginsAt":8262666,"endsAt":8262666,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and during part of the cape flight routine."},{"address":"$7E140B","length":"2 bytes. Ends at $7E140C.","beginsAt":8262667,"endsAt":8262668,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."},{"address":"$7E140D","length":"1 byte","beginsAt":8262669,"endsAt":8262669,"type":"Flag","descriptio":"Spin Jump flag. #$00 = normal jump (or on ground); any other value = spinjumping."},{"address":"$7E140E","length":"1 byte","beginsAt":8262670,"endsAt":8262670,"type":"Sprites","descriptio":"Layer 2 is touched flag, which is used in the Layer 2 sinking/rising upon touch scroll sprite. #$00 = Layer 2 not touched; #$01 = Layer 2 touched."},{"address":"$7E140F","length":"1 byte","beginsAt":8262671,"endsAt":8262671,"type":"Flag","descriptio":"Keeps incrementing in the Reznor battle room. It is used as a flag to determine that a different OAM index needs to be used for a smoke sprite or a puff of smoke, to make sure there's no conflict with the platform tiles.\nHowever, since this keeps incrementing and thus sometimes hits #$00 again, it can occur that a platform tile disappears for one frame when a smoke sprite is shown."},{"address":"$7E1410","length":"1 byte","beginsAt":8262672,"endsAt":8262672,"type":"Flag","descriptio":"Yoshi has wings flag #1 (the other is $7E:141E). #$01 would mean that the player with a fire flower powerup can shoot fireballs while on Yoshi (never occurs in the game), whereas #$02 indicates Yoshi has wings.\nNote that this one only handles graphics of the wings (value #$02), and that it disables the Yoshi tongue action (value #$01).\nThe value from $7E:141E is stored here each frame."},{"address":"$7E1411","length":"1 byte","beginsAt":8262673,"endsAt":8262673,"type":"Flag","descriptio":"Horizontal scroll settings from header flag. #$00 = Disable; #$01 = Enable."},{"address":"$7E1412","length":"1 byte","beginsAt":8262674,"endsAt":8262674,"type":"Misc.","descriptio":"Vertical scroll settings from header. #$00 = Disable; #$01 = Enable; #$02 = Enable if flying/climbing/etc."},{"address":"$7E1413","length":"1 byte","beginsAt":8262675,"endsAt":8262675,"type":"Misc.","descriptio":"Horizontal scroll setting for Layer 2. #$00 = none; #$01 = constant; #$02 = variable."},{"address":"$7E1414","length":"1 byte","beginsAt":8262676,"endsAt":8262676,"type":"Misc.","descriptio":"Vertical scroll setting for Layer 2.\nLunar Magic v3.00 and above add values 04-07; the original game and older versions only allow 00-03."},{"address":"$7E1415","length":"2 bytes. Ends at $7E1416.","beginsAt":8262677,"endsAt":8262678,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and cutscene load."},{"address":"$7E1417","length":"2 bytes. Ends at $7E1418.","beginsAt":8262679,"endsAt":8262680,"type":"Camera","descriptio":"The base vertical offset of Layer 2 from Layer 1, when vertical scrolling is enabled for it. This is calculated based on the type of vertical scrolling set in $1414, using the initial FG/BG positions stored to $1C and $20:\n\nIf $1414 is #$01 (constant), then this is: $20 - $1C\nIf $1414 is #$02 (variable), then this is: $20 - ($1C / 2)\nIf $1414 is #$03 (slow), then this is: $20 - ($1C / 8)"},{"address":"$7E1417","length":"2 bytes. Ends at $7E1418.","beginsAt":8262679,"endsAt":8262680,"type":"Camera","descriptio":"The distance to scroll layer 2 vertically if that kind of scrolling is enabled. This is calculated based on the type of vertical scrolling set in $7E:1414. The scrolling is calculated as follows:\n\nIf $7E:1414 is #$01 (constant), then $7E:1417 is: $7E:0020-$7E:001C\nIf $7E:1414 is #$02 (variable), then $7E:1417 is: $7E:001C >> 1 ^ #$FFFF + 1 + $7E:0020\nIf $7E:1414 is #$03 (slow), then $7E:1417 is: $7E:001C >> 3 ^ #$FFFF + 1 + $7E:0020"},{"address":"$7E1419","length":"1 byte","beginsAt":8262681,"endsAt":8262681,"type":"Yoshi","descriptio":"How Yoshi should go inside a pipe.\n#$01 = Duck a little (horizontal pipe).\n#$02 = Face the screen (vertical pipe).\n#$FF = Don't change image, only go behind layer (shooting out of slanted pipe). Note that this will probably work with all values #$03-#$FF.\n\nAn immediate effect of this is that Yoshi goes beyond layer 1 with any non-zero value. Also, Yoshi's tongue isn't shown either. This is still set even if the player isn't mounted on Yoshi, it also affects the position of carrying sprites through pipes."},{"address":"$7E141A","length":"1 byte","beginsAt":8262682,"endsAt":8262682,"type":"Counter","descriptio":"Counter that increments every time a new level is entered (with a door or pipe) - this enables you to distinguish the 'mother'-level from sublevels, as this always is zero at the start of a level. Note: Don't enter a sublevel within a level 256 times, or a glitch will occur."},{"address":"$7E141B","length":"1 byte","beginsAt":8262683,"endsAt":8262683,"type":"Flag","descriptio":"Determines if you have played the bonus game before in the same level before. If it is non-zero (meaning you've played the game before), all blocks in the coin game will always be incorrect.\nNote that if you don't hit a single block the first time playing the game, then this will be zero, and you can play the game again."},{"address":"$7E141C","length":"1 byte","beginsAt":8262684,"endsAt":8262684,"type":"Flag","descriptio":"What type of goal tape has just been hit, for deciding which event to activate after the goal walk is finished.\nAlthough this value will still be written in vertical levels, it has no effect due to the goal walk not occurring."},{"address":"$7E141D","length":"1 byte","beginsAt":8262685,"endsAt":8262685,"type":"Flag","descriptio":"Whether \"Mario/Luigi Start!\" should be shown or not. Used for castle entrances and the likes.\n#$00 = enable; #$01 = disable."},{"address":"$7E141E","length":"1 byte","beginsAt":8262686,"endsAt":8262686,"type":"Yoshi","descriptio":"Yoshi has wings flag. The only possible value for this address in the original is #$02, but setting to #$01 will allow the player to throw fireballs if on Yoshi, even if he is not fiery. This will, however, disable flight as well as Yoshi's tongue attack.\nIt's recalculated each frame."},{"address":"$7E141F","length":"1 byte","beginsAt":8262687,"endsAt":8262687,"type":"Flag","descriptio":"Disable No Yoshi Intro flag.\n#$00 = regular behavior (depending on the tileset, the No Yoshi Intro is either shown or not).\n#$80 = the No Yoshi Intro is disabled, regardless of tileset."},{"address":"$7E1420","length":"1 byte","beginsAt":8262688,"endsAt":8262688,"type":"Counter","descriptio":"Yoshi Coins collected. Does not affect amount of Yoshi Coins on status bar."},{"address":"$7E1421","length":"1 byte","beginsAt":8262689,"endsAt":8262689,"type":"Counter","descriptio":"Counter used by the invisible 1-Up checkpoints. Starts at zero, and increments with one every time the next checkpoint has been touched. Resets to zero when a checkpoint has been touched that can't be checked yet, for example checkpoint #2 when #1 hasn't been touched yet."},{"address":"$7E1422","length":"1 byte","beginsAt":8262690,"endsAt":8262690,"type":"Counter","descriptio":"Amount of Yoshi Coins to display on the status bar. Values #$01 through #$04 are the values where it will display that number of Yoshi Coins, otherwise none are displayed."},{"address":"$7E1423","length":"1 byte","beginsAt":8262691,"endsAt":8262691,"type":"Misc.","descriptio":"Indicates which switch palace switch is being pressed.\nIts value also varies depending on which side of the switch was pressed. (Left side -> it uses the first value, right side -> it uses the second.)\n01/02 = green, 05/06 = yellow, 09/0A = blue, 0D/0E = red.\nThe bottom halves also set this, but this doesn't trigger anything."},{"address":"$7E1424","length":"1 byte","beginsAt":8262692,"endsAt":8262692,"type":"Timer","descriptio":"Used to determine whether or not the victory walk should display the number of collected bonus stars. If it is zero (see also $7E:1900), the amount of collected bonus stars is not displayed. Otherwise, it is. $7E:1900 is stored to it, causing this address to decrement as well. Also note that this value does NOT have any effect on the rest of the bonus text."},{"address":"$7E1425","length":"1 byte","beginsAt":8262693,"endsAt":8262693,"type":"Flag","descriptio":"Bonus game flag. If anything non-zero, the bonus game will commence after the level has been cleared."},{"address":"$7E1426","length":"1 byte","beginsAt":8262694,"endsAt":8262694,"type":"Misc.","descriptio":"Message box trigger. #$00 = none; #$01 = message 1; #$02 = message 2; #$03 = Yoshi thanks message."},{"address":"$7E1427","length":"1 byte","beginsAt":8262695,"endsAt":8262695,"type":"Misc.","descriptio":"Bowser clown car image.\n00-Regular\n01-Blinking\n02-Hurt\n03-Angry face\nHigher values makes it cycle through the above ones."},{"address":"$7E1428","length":"1 byte","beginsAt":8262696,"endsAt":8262696,"type":"Sprites","descriptio":"Used as an index for the frames of the Bowser propeller. Valid frames range from #$00-#$03."},{"address":"$7E1429","length":"1 byte","beginsAt":8262697,"endsAt":8262697,"type":"Sprites","descriptio":"Used to calculate which palette to use for Bowser. Valid values range from #$00-#$07. This value is calculated based on the Mode 7 scale factor, with the table at $03:A265."},{"address":"$7E142A","length":"2 bytes. Ends at $7E142B.","beginsAt":8262698,"endsAt":8262699,"type":"Player","descriptio":"Where the player has to be on the screen in order to justify moving the screen. If the player X position relative to the screen is less than $142A - #$000C, then the screen will move left. If the player X position relative to the screen is greater than or equal to $142A + #$000C, the screen will move right."},{"address":"$7E142C","length":"4 bytes. Ends at $7E142F.","beginsAt":8262700,"endsAt":8262703,"type":"Camera","descriptio":"Two 16-bit addresses, $142C and $142E, are set to $142A - #$000C and $142A + #$000C respectively during the screen-scrolling routine, read from to determine whether or not to scroll the screen."},{"address":"$7E1430","length":"1 byte","beginsAt":8262704,"endsAt":8262704,"type":"Blocks","descriptio":"Lowest tile that's solid for sprites from below (in addition to 111 through 16D). It's on page 1."},{"address":"$7E1431","length":"1 byte","beginsAt":8262705,"endsAt":8262705,"type":"Blocks","descriptio":"Highest tile that's solid for sprites from below (in addition to 111 through 16D) plus 1. It's on page 1."},{"address":"$7E1432","length":"1 byte","beginsAt":8262706,"endsAt":8262706,"type":"Flag","descriptio":"Directional coin activation flag. This is set to #$01 when the sprite changes the music, and it is used to prevent the player being able to spawn any more than one instance of the sprite in an entire level, as it carries across sublevels."},{"address":"$7E1433","length":"1 byte","beginsAt":8262707,"endsAt":8262707,"type":"Timer","descriptio":"Scaling factor of the circle for the windowing HDMA effects used with the titlescreen, level ending and keyhole.\nThe closer to zero, the smaller the circle.\nLoads titlescreen when value becomes #$F0 or higher."},{"address":"$7E1434","length":"1 byte","beginsAt":8262708,"endsAt":8262708,"type":"Timer","descriptio":"Set to #$30 to end level via keyhole. Works as a timer of some sorts, to indicate how long the keyhole sequence should last - but in SMW, this value is never set to anything other than #$00 or #$30. Also, this address freezes player and sprites by storing its value to $7E:13FB, resp. $7E:009D."},{"address":"$7E1435","length":"1 byte","beginsAt":8262709,"endsAt":8262709,"type":"Flag","descriptio":"Keyhole growing/shrinking flag. #$00 = growing; #$01 = shrinking."},{"address":"$7E1436","length":"2 bytes. Ends at $7E1437.","beginsAt":8262710,"endsAt":8262711,"type":"Misc.","descriptio":"Used for multiple purposes.\nKeyholes use it as the X position of the keyhole animation.\nThe Iggy/Larry boss fight uses it to control the player's X position when on the ground.\n\nThe overworld also uses it when spawning switch palace blocks.\n$1436 is used as the current base index to the tables at $7EB900; it increments by 0x08 with each set of blocks up to 0x28, at which point it resets to 0x00.\n$1437 is used as a timer for waiting between spawning each set of switch blocks."},{"address":"$7E1438","length":"2 bytes. Ends at $7E1439.","beginsAt":8262712,"endsAt":8262713,"type":"Misc.","descriptio":"Used for multiple purposes.\nKeyholes use it as the Y position of the keyhole animation.\nThe Iggy/Larry boss fight uses it to control the player's Y position when on the ground.\n\nThe overworld also uses it when spawning switch palace blocks.\n$1438 is the base OAM index of the current block set. Increments by 0x20 with each set of blocks, then resets to 0x00 once it reaches 0xA0.\n$1439 is a counter for how many sets of blocks have been spawned. It stops spawning at 0x08, but keeps counting up to 0x0C, at which point the spawn routine ends."},{"address":"$7E143A","length":"1 byte","beginsAt":8262714,"endsAt":8262714,"type":"Flag","descriptio":"When set to a value that is not zero, this will make the game overwrite tiles #$00 through #$05, #$10 through #$15, #$4A through #$4F and #$5A through #$5F with data it gets from $7F:977B-$7F:9A7A. These are uploaded during V-blank (NMI).\nIs used to write the graphics for \"MARIO START!\", \"LUIGI START!\", \"TIME UP!\", \"GAME OVER\" and \"BONUS GAME\"."},{"address":"$7E143B","length":"1 byte","beginsAt":8262715,"endsAt":8262715,"type":"Misc.","descriptio":"Which death message must be displayed. #$14 = \"GAME OVER\"; #$1D = \"TIME UP!\"."},{"address":"$7E143C","length":"1 byte","beginsAt":8262716,"endsAt":8262716,"type":"Timer","descriptio":"Death message animation timer. Amount of time until the two segments come together, such as with \"GAME OVER\", where the animation goes like this: GAME --> <-- OVER.\nIs set to #$C0, decrements by four at a time."},{"address":"$7E143D","length":"1 byte","beginsAt":8262717,"endsAt":8262717,"type":"Timer","descriptio":"Timer for the \"TIME UP!\"/\"GAME OVER\" death message - how long it should stay active after the two words have come together. Is set to #$FF, decrements by one at a time."},{"address":"$7E143E","length":"1 byte","beginsAt":8262718,"endsAt":8262718,"type":"Sprites","descriptio":"Scroll command number. A list of possible values can be found here.\n\nAlso used during castle cutscenes. Iggy/Ludwig/Roy use it to indicate the switch was hit, Wendy uses it to indicate when the castle is fully erased, and Morton/Lemmy/Larry use it for deciding how to move the castle."},{"address":"$7E143F","length":"1 byte","beginsAt":8262719,"endsAt":8262719,"type":"Sprites","descriptio":"Scroll command number used on layer 2. This address serves as a complement to $7E:143E. This address is set by the init routine of the layer one of each scroll address.\n\nAlso used during castle destruction cutscenes as a timer for animations, as well as a few miscellaneous wait timers."},{"address":"$7E1440","length":"1 byte","beginsAt":8262720,"endsAt":8262720,"type":"Sprites","descriptio":"The starting Y-position of the current scroll sprite, left-shifted twice and with the extra bits still added. (Format: --YYYYEE, where Y = Y position and EE = extra bits).\nRegularly adjusted inside the scroll sprites. It can be particularly useful for determining what type of scrolling should be applied with this scroll sprite.\nThis address is used for Layer 1 scrolling.\n\nAlso used during the castle destruction cutscenes as a frame number for various animations."},{"address":"$7E1441","length":"1 byte","beginsAt":8262721,"endsAt":8262721,"type":"Sprites","descriptio":"The starting Y-position of the current scroll sprite, left-shifted twice and with the extra bits still added. (Format: --YYYYEE, where Y = Y position and EE = extra bits).\nRegularly adjusted inside the scroll sprites. It can be particularly useful for determining what type of scrolling should be applied with this scroll sprite.\nThis address is used for Layer 2 scrolling.\n\nAlso used during Iggy, Ludwig, and Roy's castle destruction scenes as a timer for the explosion."},{"address":"$7E1442","length":"1 byte","beginsAt":8262722,"endsAt":8262722,"type":"Misc.","descriptio":"Various flags used in the Yoshi's House portion of the credits scene. Used values:\n#$00 = Player and companion walks in\n#$01 = Various Yoshis duck and watch in excitement.\n#$02 = Eggs are shattering, one by one.\n#$03 = Yoshis get up and \"THANK YOU\" appears on Yoshi's house.\n#$04 = Yoshis jump in excitement, then screen fades out.\n24-bit pointers for these actions are located at SNES $0C:A1DE.\n\nAlso used in the castle destruction sequence as a pointer to what actions should be taken. Each castle destruction has its own pointer table for this address. $0C:C9A5 is a pointer table which points the the pointer tables of each castle. You can view the breakdown of each sequence here.\n\nUsed in scroll sprites for tracking what type of scroll it is currently doing, usually depending on $7E:1440/$7E:1441. This is the Layer 1 counterpart of $7E:1443."},{"address":"$7E1443","length":"1 byte","beginsAt":8262723,"endsAt":8262723,"type":"Sprites","descriptio":"Used in scroll sprites for tracking what type of scroll it is currently doing, usually depending on $7E:1440/$7E:1441. This is the Layer 2 counterpart of $7E:1442.\n\nIt's also a castle destruction sequence text timer. Starts at #$FF when the 'Welcome' music starts, and a new line of text appears every #$20 frames after that. (#$DF, #$BF, #$9F, etc.)"},{"address":"$7E1444","length":"1 byte","beginsAt":8262724,"endsAt":8262724,"type":"Sprites","descriptio":"Layer 1 scroll command pointer/timer. This timer serves no defined purpose on itself, but is generally used for waiting a specific number of frames before updating scroll properties such as speed. For example, with the Layer 1 auto-scroll, this value being #$00 indicates the auto-scroll has finished.\n\nAlso used during the castle destruction scenes as an indicator to show the white surrender flag."},{"address":"$7E1445","length":"1 byte","beginsAt":8262725,"endsAt":8262725,"type":"Sprites","descriptio":"Layer 2 scroll command pointer/timer. This timer serves no defined purpose on itself, but is generally used for waiting a specific number of frames before updating scroll properties such as speed.\n\nAlso used during the castle destruction cutscenes for various purposes. Lemmy uses it as a timer for the hammer animation, Ludwig and Roy uses it as a counter for the ? marks (0-3 for Roy and 4-7 for Ludwig), and Wendy uses it to decide how the broom should move."},{"address":"$7E1446","length":"2 bytes. Ends at $7E1447.","beginsAt":8262726,"endsAt":8262727,"type":"Sprites","descriptio":"Layer 1 X speed used in the scrolling codes.\n#$0001-#$7FFF = move left; #$8000-#$FFFF = move right. #$0000 means there is no movement.\nEffectively, it's the X speed to give the player when he's touching the side of a screen, during a level which does not have regular Layer 1 scrolling. Values are different depending on the type of (auto-)scroll.\nThis value divided by #$10/#16 is stored into $7E:007B.\n\nAdditionally used during the castle destruction cutscenes for various purposes. $1446 is used in Morton/Roy's scenes to show the huff cloud at the end and as the Y position of the broom in Wendy's scene.\n$1447 is used in Ludwig's scene as the vertical speed of the castle as well as a counter for the dust animation when it hits the hill, and in Larry's as the vertical speed of the castle as well as a timer for when it crashes."},{"address":"$7E1448","length":"2 bytes. Ends at $7E1449.","beginsAt":8262728,"endsAt":8262729,"type":"Sprites","descriptio":"Layer 1 Y speed used in the scrolling codes.\n#$0001-#$7FFF = move upwards; #$8000-#$FFFF = move downwards. #$0000 means there is no movement.\n\n$1449 specifically is also used as a timer in Wendy's castle destruction scene for pausing between shifting broom directions or moving Mario to the side."},{"address":"$7E144A","length":"2 bytes. Ends at $7E144B.","beginsAt":8262730,"endsAt":8262731,"type":"Sprites","descriptio":"Layer 2 X speed used in the scrolling codes.\n#$0001-#$7FFF = move left; #$8000-#$FFFF = move right. #$0000 means there is no movement.\n\n$144A specifically is also used in the castle destruction cutscenes to indicate what sprite Mario is holding, if any, 00 indicates the egg, 01 indicates nothing, and anything greater indicates something else (e.g. the hammer or broom)."},{"address":"$7E144C","length":"2 bytes. Ends at $7E144D.","beginsAt":8262732,"endsAt":8262733,"type":"Sprites","descriptio":"Layer 2 Y speed used in the scrolling codes, particularly in the Layer 2 scroll command (sprite EA).\n#$0001-#$7FFF = move upwards; #$8000-#$FFFF = move downwards. #$0000 means there is no movement.\n\n$7E:144D also controls the time until you can press a button to end the castle destruction sequence (after all text has been generated on-screen)."},{"address":"$7E144E","length":"2 bytes. Ends at $7E144F.","beginsAt":8262734,"endsAt":8262735,"type":"Sprites","descriptio":"This is used internally by the scroll sprites for updating the layer 1 X position. In particular, the routine at $05:C4F9 uses it to add the current speed to.\n\nFurthermore, $7E:144E is used on the overworld to determine after how many frames the player should face the screen again after settling on a level tile.\n\n$7E:144E is also used in the credits, as a timer that is set to #$06 and decrements every frame. If this is zero, bit 0 of $7E:144F will get flipped, causing Peach's image during the walking phase to bounce.\n\n$7E:144F is a flag that makes Peach bounce during the time she walks in the credits.\n#$00 = Peach frame 1, upright; #$01 = Peach frame 2, one pixel lower."},{"address":"$7E1450","length":"2 bytes. Ends at $7E1451.","beginsAt":8262736,"endsAt":8262737,"type":"Sprites","descriptio":"This is used internally by the scroll sprites for updating the layer 1 Y position. In particular, the routine at $05:C4F9 uses it to add the current speed to."},{"address":"$7E1452","length":"2 bytes. Ends at $7E1453.","beginsAt":8262738,"endsAt":8262739,"type":"Sprites","descriptio":"This is used internally by the scroll sprites for updating the layer 2 X position. In particular, the routine at $05:C4F9 uses it to add the current speed to."},{"address":"$7E1454","length":"2 bytes. Ends at $7E1455.","beginsAt":8262740,"endsAt":8262741,"type":"Sprites","descriptio":"This is used internally by the scroll sprites for updating the layer 2 Y position. In particular, the routine at $05:C4F9 uses it to add the current speed to."},{"address":"$7E1456","length":"1 byte","beginsAt":8262742,"endsAt":8262742,"type":"Sprites","descriptio":"Used by the scroll sprites as an index for what layer to process. #$00 is Layer 1, and #$04 is Layer 2. The RAM addresses indexed include the entire area of $7E:1446-$7E:1455."},{"address":"$7E1457","length":"1 byte","beginsAt":8262743,"endsAt":8262743,"type":"Flag","descriptio":"This flag is set and used to determine whether to upload the multicolor Yoshis in the ending cutscene. The surprised Yoshi image (when the eggs are hatching) will appear regardless of this address, but the jumping Yoshi images require this flag to be #$01.\nIf anything else, they will not be drawn on-screen."},{"address":"$7E1458","length":"2 bytes. Ends at $7E1459.","beginsAt":8262744,"endsAt":8262745,"type":"Misc.","descriptio":"Used in the Layer 3 images to control the X speed of Layer 3. This address is primarily used for the tileset specific images (not #$01 or #$03), for example the goldfish and the ghost house fog."},{"address":"$7E145A","length":"2 bytes. Ends at $7E145B.","beginsAt":8262746,"endsAt":8262747,"type":"Misc.","descriptio":"Used in the Layer 3 images to control the Y speed of Layer 3. This address is used primarily for the rising/falling Layer 3 tide."},{"address":"$7E145C","length":"2 bytes. Ends at $7E145D.","beginsAt":8262748,"endsAt":8262749,"type":"Misc.","descriptio":"This is used internally by Layer 3 images for updating the Layer 3 X position, which is used in (for example) the goldfish and ghost house fog.\nIt's also used as accumulating fraction bits for the Layer 3 Y speed during the rising/sinking Layer 3 tide.\n\n$7E:145D is also used as a timer to determine when to move to the next game mode after the Yoshi house credits scene. Is set to #$F0 the moment all eggs hatched."},{"address":"$7E145E","length":"2 bytes. Ends at $7E145F.","beginsAt":8262750,"endsAt":8262751,"type":"Misc.","descriptio":"Used by Lunar Magic to hold various Layer 3 settings, as follows:\n\n$145E: yyyyy-se\n- yyyyy: Initial Y position. Equal to the value shown in the \"Initial Y Position/Offset\" box divided by 2.\n- -: Unused bit.\n- s: Enable scroll sync fix.\n- e: Enable advanced bypass settings.\n\n$145F: yyyyxxxx\n- yyyy: Vertical scroll setting.\n- xxxx: Horizontal scroll setting.\n\nEmpty in original game. Cleared on reset, titlescreen load, overworld load and cutscene load."},{"address":"$7E1460","length":"1 byte","beginsAt":8262752,"endsAt":8262752,"type":"Misc.","descriptio":"Layer 3 vertical scrolling direction. #$00 = downwards; #$01 = upwards.\nAlso used by Lunar Magic when a level is set for auto layer 3 vertical scrolling, in which case it combines with $7E:1461 to hold Y accumulation bits."},{"address":"$7E1461","length":"1 byte","beginsAt":8262753,"endsAt":8262753,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and cutscene load.\nThis byte functions as the \"high byte\" of $7E:1460. SMW does not actually use this byte, however it is overwritten during level load (see $05:BE92).\nCleared on reset, titlescreen, overworld, level (with the exception of boss rooms) and cutscene load."},{"address":"$7E1462","length":"2 bytes. Ends at $7E1463.","beginsAt":8262754,"endsAt":8262755,"type":"Misc.","descriptio":"Layer 1 X position, next frame.\nMuch similar to $7E:001A, maintaining the exact same values, with the difference being the usage of their values.\nThis is more notable in auto-scroll commands, for example, if $7E:1462 were to remain static while there was a Layer 2 auto-scroll going, the image would stay, but the level would move.\nIs also used for temporary storage to determine how much the screen has moved horizontally in the current frame. ($7E:001A - $7E:1462 = $7E:17BD)"},{"address":"$7E1464","length":"2 bytes. Ends at $7E1465.","beginsAt":8262756,"endsAt":8262757,"type":"Misc.","descriptio":"Layer 1 Y position, next frame.\nMuch similar to $7E:001C.\nIs also used for temporary storage to determine how much the screen has moved vertically in the current frame. ($7E:001C - $7E:1464 = $7E:17BC)"},{"address":"$7E1466","length":"2 bytes. Ends at $7E1467.","beginsAt":8262758,"endsAt":8262759,"type":"Misc.","descriptio":"Layer 2 X position, next frame.\nMuch similar to $7E:001E.\nIs also used for temporary storage to determine how much the screen has moved horizontally in the current frame. ($7E:001E - $7E:1466 = $7E:17BF)"},{"address":"$7E1468","length":"2 bytes. Ends at $7E1469.","beginsAt":8262760,"endsAt":8262761,"type":"Misc.","descriptio":"Layer 2 Y position, next frame.\nMuch similar to $7E:0020.\nIs also used for temporary storage to determine how much Layer 2 has moved vertically in the current frame. ($7E:0020 - $7E:1468 = $7E:17BE)"},{"address":"$7E146A","length":"2 bytes. Ends at $7E146B.","beginsAt":8262762,"endsAt":8262763,"type":"Misc.","descriptio":"Used to determine how much layer 3 has moved horizontally in the current frame. This address is only used during the credits while displaying the enemies for the windowing HDMA.\nAlso used by Lunar Magic to hold the Layer 3 Initial X position/offset."},{"address":"$7E146C","length":"4 bytes. Ends at $7E146F.","beginsAt":8262764,"endsAt":8262767,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and cutscene load."},{"address":"$7E1470","length":"1 byte","beginsAt":8262768,"endsAt":8262768,"type":"Flag","descriptio":"Carrying something flag. Very similar to $7E:148F, with the difference that, if this flag is set, the player's graphics don't change, and throw blocks can still be picked up as long as $7E:148F remains zero. If used in a carryable custom sprite to check if the player is already carrying something, definitely combine it with $7E:148F to assure there are no exceptions.\n#$00 = Carrying nothing; #$01 = carrying something."},{"address":"$7E1471","length":"1 byte","beginsAt":8262769,"endsAt":8262769,"type":"Misc.","descriptio":"Whether the player is on top of a solid sprite, and what kind of sprite that is.\n\n#$01 = Standing on top of a floating rock, floating grass platform, floating skull, Mega Mole, carrot top lift, etc. This one calculates the player's position based on the next frame.\n#$02 = Standing on top of a springboard, pea bouncer. This one calculates the player's position based on the next frame.\nThere's a check at $00:D60B so that the player can hold the jump button pressed for a longer while to jump higher.\n#$03 = Standing on top of a brown chained platform, gray falling platform. This one calculates the player's position based on the current frame."},{"address":"$7E1472","length":"1 byte","beginsAt":8262770,"endsAt":8262770,"type":"Sprites","descriptio":"Left window X position of the top of the spotlight. It's always #$78. This is the value stored that is stored to $7E:147A every four frames."},{"address":"$7E1473","length":"1 byte","beginsAt":8262771,"endsAt":8262771,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E1474","length":"1 byte","beginsAt":8262772,"endsAt":8262772,"type":"Sprites","descriptio":"Right window X position of the top of the spotlight. It's always #$87. This is the value that is stored to $7E:147C every four frames."},{"address":"$7E1475","length":"1 byte","beginsAt":8262773,"endsAt":8262773,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E1476","length":"1 byte","beginsAt":8262774,"endsAt":8262774,"type":"Sprites","descriptio":"Left window X position of the extreme bottom of the spotlight.\nPlease note that this position is for the imaginary scanline #$FF, whereas there are normally only #$E0 scanlines on a screen.\nThat means that the value here is never equal to the left window X position on the very bottom of the screen, unless $7E:1476 is equal to $7E:1472, forming a straight vertical line."},{"address":"$7E1477","length":"1 byte","beginsAt":8262775,"endsAt":8262775,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E1478","length":"1 byte","beginsAt":8262776,"endsAt":8262776,"type":"Sprites","descriptio":"Right window X position of the extreme bottom of the spotlight.\nPlease note that this position is for the imaginary scanline #$FF, whereas there are normally only #$E0 scanlines on a screen.\nThat means that the value here is never equal to the right window X position on the very bottom of the screen, unless $7E:1478 is equal to $7E:1474, forming a straight vertical line."},{"address":"$7E1479","length":"1 byte","beginsAt":8262777,"endsAt":8262777,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E147A","length":"1 byte","beginsAt":8262778,"endsAt":8262778,"type":"Sprites","descriptio":"In the spotlight code, the left window X position of each scanline is calculated and temporarily stored here, after which this address stores its value to an even byte of $7E:04A0.\nWhat is left at the end of every frame is the left window X position on the very bottom scanline.\nThis is used once in every four frames, probably to reduce lag."},{"address":"$7E147B","length":"1 byte","beginsAt":8262779,"endsAt":8262779,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E147C","length":"1 byte","beginsAt":8262780,"endsAt":8262780,"type":"Sprites","descriptio":"In the spotlight code, the right window X position of each scanline is calculated and temporarily stored here, after which this address stores its value to an odd byte of $7E:04A0.\nWhat is left at the end of every frame is the right window X position on the very bottom scanline.\nThis address used once in every four frames, probably to reduce lag."},{"address":"$7E147D","length":"1 byte","beginsAt":8262781,"endsAt":8262781,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E147E","length":"1 byte","beginsAt":8262782,"endsAt":8262782,"type":"Sprites","descriptio":"Used by the spotlight to calculate whether or not to move the left window on a particular scan line into the direction of the resulting X position on the bottom left.\nIt works by adding the width from $7E:1480 to itself (starting at #$00 initially), and if the resulting value is higher than #$CF (or even overflows, setting the carry bit), the left window moves a pixel into the direction of the resulting X position on the bottom left."},{"address":"$7E147F","length":"1 byte","beginsAt":8262783,"endsAt":8262783,"type":"Sprites","descriptio":"Used by the spotlight to calculate whether or not to move the right window on a particular scan line into the direction of the resulting X position on the bottom right.\nIt works by adding the width from $7E:1481 to itself (starting at #$00 initially), and if the resulting value is higher than #$CF (or even overflows, setting the carry bit), the right window moves a pixel into the direction of the resulting X position on the bottom right."},{"address":"$7E1480","length":"1 byte","beginsAt":8262784,"endsAt":8262784,"type":"Sprites","descriptio":"Width between the top left window ($7E:1472) and the bottom left window ($7E:1476) of the spotlight. This value is always positive, and its sign flag is saved at $7E:1484."},{"address":"$7E1481","length":"1 byte","beginsAt":8262785,"endsAt":8262785,"type":"Sprites","descriptio":"Width between the top right window ($7E:1474) and the bottom right window ($7E:1478) of the spotlight. This value is always positive, and its sign flag is saved at $7E:1485."},{"address":"$7E1482","length":"1 byte","beginsAt":8262786,"endsAt":8262786,"type":"Flag","descriptio":"Used as a flag in the spotlight code to skip initialization of the top left, top right, bottom left, and bottom right RAM addresses.\n#$00 = Run initialization; #$01 = Do not run initialization."},{"address":"$7E1483","length":"1 byte","beginsAt":8262787,"endsAt":8262787,"type":"Sprites","descriptio":"Used as a flag for the current direction the spotlight is moving. #$00 = spotlight is moving right; #$01 = spotlight is moving left."},{"address":"$7E1484","length":"1 byte","beginsAt":8262788,"endsAt":8262788,"type":"Sprites","descriptio":"A flag used in the spotlight code to determine which side of the top left window border the bottom left window border is on.\n#$00 = bottom left is more to the left; #$01 = bottom left is on the same position, or more to the right."},{"address":"$7E1485","length":"1 byte","beginsAt":8262789,"endsAt":8262789,"type":"Sprites","descriptio":"A flag used in the spotlight code to determine which side of the top right window border the bottom right window border is on.\n#$00 = bottom right is more to the left; #$01 = bottom right is on the same position, or more to the right."},{"address":"$7E1486","length":"1 byte","beginsAt":8262790,"endsAt":8262790,"type":"Sprites","descriptio":"Unused, set to #$01 in the dark room spotlight sprite. Change $03:C544 to EA EA EA (NOP #3) to change this into free RAM. If that patch is performed, this address is safe for other uses. Cleared on reset, titlescreen load, overworld load and cutscene load."},{"address":"$7E1487","length":"4 bytes. Ends at $7E148A.","beginsAt":8262791,"endsAt":8262794,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E148B","length":"2 bytes. Ends at $7E148C.","beginsAt":8262795,"endsAt":8262796,"type":"Misc.","descriptio":"Used by random number generation subroutine to determine the next output.\nDo not use these if you want a random number. Use $7E:148D instead."},{"address":"$7E148D","length":"2 bytes. Ends at $7E148E.","beginsAt":8262797,"endsAt":8262798,"type":"Misc.","descriptio":"Output of random number generation routine, located at $01:ACF9."},{"address":"$7E148F","length":"1 byte","beginsAt":8262799,"endsAt":8262799,"type":"Player","descriptio":"Flag used to detect if the player is holding an object (throw block, key, shell, etc.) Also adjusts the player image, different from $7E:1470. This address does store its value to $7E:1470.\nIf the player is carrying something, this address should usually (not always, regarding the glitch) prevent the player from holding a second item.\n#$00 = Carrying nothing; #$01 = carrying something."},{"address":"$7E1490","length":"1 byte","beginsAt":8262800,"endsAt":8262800,"type":"Timer","descriptio":"Star power timer. Decrements every fourth frame, except when lock flag ($9D) AND while the freezable frame counter ($14) has a value divisible by 4, will decrement each frame (assuming it's a glitch). The music will revert when this timer reaches #$1E."},{"address":"$7E1491","length":"1 byte","beginsAt":8262801,"endsAt":8262801,"type":"Sprites","descriptio":"Amount of pixels on the X/Y axis a sprite has moved in the current frame. It is set after every call to update sprite position based on speed, and the routine that updates both X/Y position based on speed will leave $7E:1491 with the movement on the X axis in this address. Very often used for rideable sprites as this address can be added to the player position to move the player in tandem with the sprite."},{"address":"$7E1492","length":"1 byte","beginsAt":8262802,"endsAt":8262802,"type":"Timer","descriptio":"Player peace image timer."},{"address":"$7E1493","length":"1 byte","beginsAt":8262803,"endsAt":8262803,"type":"Timer","descriptio":"End level timer. Setting to #$FF will end the level as a goal sphere / boss fight. Peace sign is shown here when the timer hits #$28. The switches (yellow, green, red and blue) set it to #$08."},{"address":"$7E1494","length":"1 byte","beginsAt":8262804,"endsAt":8262804,"type":"Palettes","descriptio":"Direction of the color fading at level end. Only the highest bit is ever read.\n#$00 = getting darker; #$80 = getting brighter."},{"address":"$7E1495","length":"1 byte","beginsAt":8262805,"endsAt":8262805,"type":"Timer","descriptio":"Timer that controls fading and the level end scorecard. Increments and stops when it hits #$40. While it's ticking, the colors will fade; when it's done, $7E:003A through $7E:003D won't be read and the Layer 3 scrolling will be locked."},{"address":"$7E1496","length":"1 byte","beginsAt":8262806,"endsAt":8262806,"type":"Timer","descriptio":"Player animation timer. This controls a lot of things such as the walking/running animation rate, how long the death animation should last, how long to stay invisible for after getting the cape, the alternating player images when the player is walking over slippery surfaces, etc."},{"address":"$7E1497","length":"1 byte","beginsAt":8262807,"endsAt":8262807,"type":"Timer","descriptio":"Flashing invulnerability timer - not to be confused with the star timer. This is activated when the player gets hurt. Controls both interaction (player should not interact with sprites again) as well as the blinking graphics."},{"address":"$7E1498","length":"1 byte","beginsAt":8262808,"endsAt":8262808,"type":"Timer","descriptio":"Time to show player picking an item/object up pose."},{"address":"$7E1499","length":"1 byte","beginsAt":8262809,"endsAt":8262809,"type":"Timer","descriptio":"Time for player to face the screen."},{"address":"$7E149A","length":"1 byte","beginsAt":8262810,"endsAt":8262810,"type":"Timer","descriptio":"Time to show player kicking something pose."},{"address":"$7E149B","length":"1 byte","beginsAt":8262811,"endsAt":8262811,"type":"Timer","descriptio":"Time for the player to change through palettes, as if he got a fire flower. Only ticks when the \"get flower\" animation is active, and is just a flag otherwise."},{"address":"$7E149C","length":"1 byte","beginsAt":8262812,"endsAt":8262812,"type":"Timer","descriptio":"Time to show player shooting a fireball pose."},{"address":"$7E149D","length":"1 byte","beginsAt":8262813,"endsAt":8262813,"type":"Timer","descriptio":"Side flipping climbing net sprite flag and timer. Whenever you punch the flipping net, this gets set to #$1E and decrements every frame till it's zero. That's how many frames the spinning animation lasts. It also determines the X speed the player has while he's on the climbing net sprite - this means that it should be decremented every frame in order to avoid issues."},{"address":"$7E149E","length":"1 byte","beginsAt":8262814,"endsAt":8262814,"type":"Timer","descriptio":"Player punches while climbing on a net flag and timer. Every time you punch a net this is set to #$08 and decremented till it's zero again. During the time it's not zero, the frame is displayed that shows the player punching the net. If you store #$08 or greater to it every frame you'll be hold onto the net without being able to move or get off.\nWhen this RAM address is non-zero, the player can also not move."},{"address":"$7E149F","length":"1 byte","beginsAt":8262815,"endsAt":8262815,"type":"Timer","descriptio":"This timer controls the time until the player gets into gliding/sinking mode after he has jumped into the air with a cape. Is set to #$50 the moment you get airborne, and decrements every frame afterwards. The ability of raising any further stops at #$00.\n\nNote that this doesn't reset when going into another sublevel, allowing the player to \"carry over\" flying if the player is spawn in midair (or jump immediately when placed on ground) and maintains holding dash."},{"address":"$7E14A0","length":"1 byte","beginsAt":8262816,"endsAt":8262816,"type":"Timer","descriptio":"How long the running frames should be shown after the player launches off with the cape. Is #$10 by default and decrements each frame."},{"address":"$7E14A1","length":"1 byte","beginsAt":8262817,"endsAt":8262817,"type":"Timer","descriptio":"Player slides a bit when turning around timer. Most notably used with very steep slopes. If this is non-zero, $7E:13DD's image (#$0D) won't be shown."},{"address":"$7E14A2","length":"1 byte","beginsAt":8262818,"endsAt":8262818,"type":"Timer","descriptio":"Used as a timer for the cape animation. This is what makes the cape wave when the player walks and what makes the cape fall when he stops."},{"address":"$7E14A3","length":"1 byte","beginsAt":8262819,"endsAt":8262819,"type":"Timer","descriptio":"A timer for Yoshi's tongue stretching out.\n#$12 = Yoshi about to stretch out tongue (timer starts here), player pose #$27.\n#$10 = $7E:18AE is set to #$06.\n#$0C = Player now gets a different pose, #$28.\n#$00 = Player now gets a different pose, #$20 (or #$21 if turning around, $7E:187A is used to determine that)."},{"address":"$7E14A4","length":"1 byte","beginsAt":8262820,"endsAt":8262820,"type":"Timer","descriptio":"Time until the player advances a diving stage, while flying and holding forward, and time until the player pulls back up a stage, while flying and holding backward."},{"address":"$7E14A5","length":"1 byte","beginsAt":8262821,"endsAt":8262821,"type":"Timer","descriptio":"Timer for how long you keep floating after releasing B when floating with the cape."},{"address":"$7E14A6","length":"1 byte","beginsAt":8262822,"endsAt":8262822,"type":"Player","descriptio":"Cape spin timer."},{"address":"$7E14A7","length":"1 byte","beginsAt":8262823,"endsAt":8262823,"type":"Timer","descriptio":"Timer for breaking the bridge in Reznor battles. It is set to #$40 and decrements each frame. When it reaches #$3C, a tile on each side breaks. When it drops to #$00, a sound is played and it's reset to #$40 again."},{"address":"$7E14A8","length":"3 bytes. Ends at $7E14AA.","beginsAt":8262824,"endsAt":8262826,"type":"Misc.","descriptio":"Unused. $7E:14A8 decrements every frame automatically until it reaches zero, while $7E:14A9 and $7E:14AA decrement every fourth frame. $7E:14A9 is cleared when the player ground pounds with the cape (this can be prevented by setting $02:94C6 to NOP #3 or [EA EA EA]), and $7E:14AA is set to #$40 when Yoshi grabs the wings (this can be stopped by setting $01:F6CF to NOP #3 or [EA EA EA])."},{"address":"$7E14AB","length":"1 byte","beginsAt":8262827,"endsAt":8262827,"type":"Timer","descriptio":"Bonus game ending timer. Does nothing in a normal level, but during a bonus game, setting it will end the bonus game and return to the overworld. At #$44 it starts the \"end bonus game\" music, and at #$01 it actually fades to the overworld."},{"address":"$7E14AC","length":"1 byte","beginsAt":8262828,"endsAt":8262828,"type":"Empty","descriptio":"Empty. However, due to the code at $00:C563 and $00:C513, it decrements every fourth frame until it hits zero."},{"address":"$7E14AD","length":"1 byte","beginsAt":8262829,"endsAt":8262829,"type":"Timer","descriptio":"Blue P-Switch timer. Decrements every fourth frame. The P-switch running out sound is played when this hits #$1E."},{"address":"$7E14AE","length":"1 byte","beginsAt":8262830,"endsAt":8262830,"type":"Timer","descriptio":"Silver P-Switch timer. Decrements every fourth frame. The P-switch running out sound is played when this hits #$1E."},{"address":"$7E14AF","length":"1 byte","beginsAt":8262831,"endsAt":8262831,"type":"Flag","descriptio":"On/Off Switch value. #$00 is ON and all others (non-zero, i.e. #$01-#$FF) are OFF."},{"address":"$7E14B0","length":"2 bytes. Ends at $7E14B1.","beginsAt":8262832,"endsAt":8262833,"type":"Misc.","descriptio":"Used for multiple purposes.\n\nThe 16-bit address forms the center X position of the brown chained platform that is currently processed. The formula for this address = $7E:14B4 - $7E:14BC.\n\nAdditionally, the Lakitu cloud graphics routine uses $7E:14B0 as scratch RAM for the X position of a tile.\n\n$7E:14B0 is furthermore used in the Bowser battle as a timer between his various attacks. Set to #$78 at the beginning, and between attacks afterwards it is set to #$54 each time.\nNote that, whether he throws the Mechakoopas or not, does not only depend on this address!\n\nAnd finally, $7E:14B1 is a timer that is set to #$FF when Bowser begins with the Mechakoopa attack. Note that the Mechakoopas are thrown when this timer is at #$80."},{"address":"$7E14B2","length":"2 bytes. Ends at $7E14B3.","beginsAt":8262834,"endsAt":8262835,"type":"Misc.","descriptio":"Used for multiple purposes.\n\nThe 16-bit address forms the center Y position of the brown chained platform that is currently processed. Note that, since the radius based on the sprite Y position is always zero, this holds the same value as $7E:14B6. The formula for this address = $7E:14B6 - $7E:14BF.\n\nAdditionally, the Lakitu cloud graphics routine uses $7E:14B2 as scratch RAM for the Y position of a tile.\n\n$7E:14B2 is also a flag for scaling when Bowser is flying away. #$00 = shrinking; #$01 = growing; #$02 = disappear.\n\nAnd finally, $7E:14B3 is an incrementing index to the Y position for the teardrop tile that appears on the Clown Car when Bowser is hurt."},{"address":"$7E14B4","length":"2 bytes. Ends at $7E14B5.","beginsAt":8262836,"endsAt":8262837,"type":"Misc.","descriptio":"Used for multiple purposes.\n\nThe 16-bit address is the X position of the brown chained platform sprite at cos a = 1. It is in fact a mirror of the sprite X position, which always stays the same. By subtracting the horizontal radius ($7E:14BC) from this address, the center position to revolve around is calculated.\n\nThe 16-bit address is also used to determine Iggy/Larry interactive X position, as well as the player's fireball X position during this boss battle.\n\n$7E:14B4 is used in the Bowser battle as an index to what music should be played in phase 2 and 3. It only appears to have these values after written to:\n#$07 = Use track #$19.\n#$08 = Use track #$1A.\nBoth tracks are identical. Perhaps this seperation was intended to be used so that a different track played on each phase.\n\nAnd finally, $7E:14B5 is a timer for Bowser's hurt state. If non-zero, Bowser will show his hurt pose."},{"address":"$7E14B6","length":"2 bytes. Ends at $7E14B7.","beginsAt":8262838,"endsAt":8262839,"type":"Sprites","descriptio":"Used for multiple purposes.\n\nThe 16-bit address is the Y position of the brown chained platform sprite at sin a = 0. It is in fact a mirror of the sprite Y position, which always stays the same. By subtracting the horizontal radius ($7E:14BF) from this address, the center position to revolve around is calculated. Since $7E:14BF is always zero, the center position and this address always have the same identical value.\n\nThe 16-bit address is also used to determine Iggy/Larry interactive Y position, as well as the player's fireball Y position during this boss battle.\n\n$7E:14B6 is also a timer that is set to #$FF when Bowser begins with the Big Steelie attack. Note that the Big Steelie is thrown when this timer is at #$80.\n\nAnd finally, $7E:14B7 holds the X position of each new fireball that falls from the sky in the Bowser battle, as well as the index to the sound effects that are generated with them (table at $03:A841)."},{"address":"$7E14B8","length":"2 bytes. Ends at $7E14B9.","beginsAt":8262840,"endsAt":8262841,"type":"Misc.","descriptio":"Used for multiple purposes.\n\nThe 16-bit address is the X position of the first (outermost) chain tile of the brown chained platform currently being processed. This address is responsible for the actual movement of the platform and interaction with the player.\n\n$7E:14B8 itself seems to form a buffer for the X position of Iggy/Larry during that boss battle, much similar to $7E:14B4.\n\nLastly, $7E:14B8 is an attack counter used in the second phase of the Bowser battle to determine if Bowser should throw Mechakoopas or Big Steelies. It increments on every throw, on #$02 Mechakoopas are thrown, and on #$03 it resets to #$00."},{"address":"$7E14BA","length":"2 bytes. Ends at $7E14BB.","beginsAt":8262842,"endsAt":8262843,"type":"Sprites","descriptio":"Used for multiple purposes.\n\nThe 16-bit address is the Y position of the first (outermost) chain tile of the brown chained platform currently being processed. This address is responsible for the actual movement of the platform and interaction with the player.\n\n$7E:14BA itself seems to form a buffer for the Y position of Iggy/Larry during that boss battle, much similar to $7E:14B6."},{"address":"$7E14BC","length":"2 bytes. Ends at $7E14BD.","beginsAt":8262844,"endsAt":8262845,"type":"Sprites","descriptio":"Radius of the rotating brown platform, by default this value is #$50 (found at $01:CACC). This value is subtracted from $7E:14B4 and stored into $7E:14B0.\nIn SMW however, the value is always #$50. Additionally, the high byte is always #$00.\n\nNote that this radius depends on sprite X position (which stays the same). It calculates the center position of the imaginary circle you rotate around from that position.\nThe further you increment the radius, the further you will have to move the sprite to the right in order for the center position to be the same.\n\nSee also $7E:14BF."},{"address":"$7E14BE","length":"1 byte","beginsAt":8262846,"endsAt":8262846,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and cutscene load."},{"address":"$7E14BF","length":"2 bytes. Ends at $7E14C0.","beginsAt":8262847,"endsAt":8262848,"type":"Sprites","descriptio":"Another type of radius that would rely on the brown chained platform's Y position, except that it's always #$0000, and thus effectively it does nothing. Subtracted from $7E:14B6 and stored into $7E:14B2. See also $7E:14BC."},{"address":"$7E14C1","length":"1 byte","beginsAt":8262849,"endsAt":8262849,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen, overworld and cutscene load."},{"address":"$7E14C2","length":"2 bytes. Ends at $7E14C3.","beginsAt":8262850,"endsAt":8262851,"type":"Sprites","descriptio":"Used to hold the sine value of the brown rotating platform. Note that the range of this is always #$0000-#$0100. XOR isn't applied to this value when it is negative."},{"address":"$7E14C4","length":"1 byte","beginsAt":8262852,"endsAt":8262852,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen, overworld and cutscene load."},{"address":"$7E14C5","length":"2 bytes. Ends at $7E14C6.","beginsAt":8262853,"endsAt":8262854,"type":"Sprites","descriptio":"Used to hold the cosine value of the brown rotating platform. Note that the range of this is always #$0000-#$0100. XOR isn't applied to this value when it is negative."},{"address":"$7E14C7","length":"1 byte","beginsAt":8262855,"endsAt":8262855,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen, overworld and cutscene load."},{"address":"$7E14C8","length":"12 bytes. Ends at $7E14D3.","beginsAt":8262856,"endsAt":8262867,"type":"Sprites","descriptio":"Sprite status table:\n\n#$00 = Free slot, non-existent sprite.\n#$01 = Initial phase of sprite.\n#$02 = Killed, falling off screen.\n#$03 = Smushed. Rex and shell-less Koopas can be in this state.\n#$04 = Killed with a spinjump.\n#$05 = Burning in lava; sinking in mud.\n#$06 = Turn into coin at level end.\n#$07 = Stay in Yoshi's mouth.\n#$08 = Normal routine.\n#$09 = Stationary / Carryable.\n#$0A = Kicked.\n#$0B = Carried.\n#$0C = Powerup from being carried past goaltape.\n\nStates 08 and above are considered alive; sprites in other states are dead and should not be interacted with."},{"address":"$7E14D4","length":"12 bytes. Ends at $7E14DF.","beginsAt":8262868,"endsAt":8262879,"type":"Sprites","descriptio":"Sprite Y position, high byte."},{"address":"$7E14E0","length":"12 bytes. Ends at $7E14EB.","beginsAt":8262880,"endsAt":8262891,"type":"Sprites","descriptio":"Sprite X position, high byte."},{"address":"$7E14EC","length":"12 bytes. Ends at $7E14F7.","beginsAt":8262892,"endsAt":8262903,"type":"Sprites","descriptio":"Accumulating fraction bits for fixed point sprite Y speed."},{"address":"$7E14F8","length":"12 bytes. Ends at $7E1503.","beginsAt":8262904,"endsAt":8262915,"type":"Sprites","descriptio":"Accumulating fraction bits for fixed point sprite X speed."},{"address":"$7E1504","length":"12 bytes. Ends at $7E150F.","beginsAt":8262916,"endsAt":8262927,"type":"Sprites","descriptio":"Miscellaneous sprite table. In the original game, it's only used in the revolving brown platform and nowhere else. More information can be found here."},{"address":"$7E1510","length":"12 bytes. Ends at $7E151B.","beginsAt":8262928,"endsAt":8262939,"type":"Sprites","descriptio":"Miscellaneous sprite table. In the original game, it's only used in the revolving brown platform and nowhere else. Unlike $1504 (and every other sprite table), it is also not cleared by the sprite table initialization routine. More information can be found here."},{"address":"$7E151C","length":"12 bytes. Ends at $7E1527.","beginsAt":8262940,"endsAt":8262951,"type":"Sprites","descriptio":"Miscellaneous sprite table. In SMW, it's used for vertical directions, and Yoshi uses it to determine which sprite to spawn out of an egg.\n$7E:1520-$7E:1523 is a 'Reznor killed flag'. If a byte is set to #$01, the Reznor will disappear. Byte 1 is for Reznor 1, byte 2 for Reznor 2 and so on. More information can be found here."},{"address":"$7E1528","length":"12 bytes. Ends at $7E1533.","beginsAt":8262952,"endsAt":8262963,"type":"Sprites","descriptio":"Miscellaneous sprite table. In SMW, it's used for Chargin' Chuck HP, Thwomp's face expression, etc. More information can be found here."},{"address":"$7E1534","length":"12 bytes. Ends at $7E153F.","beginsAt":8262964,"endsAt":8262975,"type":"Sprites","descriptio":"Miscellaneous sprite table.\nCertain powerups use this table as a blink-fall flag.\n#$00 = Off; #$01 = On, powerup will blink and fall straight down.\nThe game stores #$01 here when it drops the reserved item from the item box. The blink-fall flag affects the Super Mushroom and the Fire Flower, but not the Cape Feather. The blink-fall flag also affects some other sprites, at least the Starman, the 1-Up mushroom and the coin sprite, but these sprites might glitch if you set the flag.\nOne glitch is that the blinking sprite-coin permanently occupies a sprite slot if it falls off the level, so that it might prevent the spawning of other common sprites.\nOther than that, this address has many different purposes. More information can be found here."},{"address":"$7E1540","length":"12 bytes. Ends at $7E154B.","beginsAt":8262976,"endsAt":8262987,"type":"Sprites","descriptio":"Miscellaneous sprite table. Table decrements itself once per frame, except for carryable sprites, where it decrements every second frame.\nVarious sprites use this table as a stun timer. For example, this timer controls when flipped Goombas and squashed Mecha-Koopas decide to rise and walk. This table is also the sprite spinjump death frame counter - that is, how long to show the \"spinjumped\" image when the sprite is killed by a jump of such sorts. More information can be found here."},{"address":"$7E154C","length":"12 bytes. Ends at $7E1557.","beginsAt":8262988,"endsAt":8262999,"type":"Sprites","descriptio":"Miscellaneous sprite table. Used as a timer to disable sprite contact with the player. Table decrements itself once per frame. More information can be found here."},{"address":"$7E1558","length":"12 bytes. Ends at $7E1563.","beginsAt":8263000,"endsAt":8263011,"type":"Sprites","descriptio":"Miscellaneous sprite table. Used as a timer for how long a sprite is sinking in lava/mud. Table decrements itself once per frame. More information can be found here."},{"address":"$7E1564","length":"12 bytes. Ends at $7E156F.","beginsAt":8263012,"endsAt":8263023,"type":"Sprites","descriptio":"Miscellaneous sprite table. Used as a timer to disable sprite contact with other sprites. Table decrements itself once per frame. More information can be found here."},{"address":"$7E1570","length":"12 bytes. Ends at $7E157B.","beginsAt":8263024,"endsAt":8263035,"type":"Sprites","descriptio":"Miscellaneous sprite table. In SMW, it's used as a frame counter for timed lifts (amount of frames until it hits zero), a frame counter that indicates when sprites #$00-#$13 that have the 'Follow player' flag set should turn, etc. More information can be found here."},{"address":"$7E157C","length":"12 bytes. Ends at $7E1587.","beginsAt":8263036,"endsAt":8263047,"type":"Sprites","descriptio":"Miscellaneous sprite table. It's most often used as a horizontal sprite direction table. #$00 = Right; #$01 = Left. More information can be found here."},{"address":"$7E1588","length":"12 bytes. Ends at $7E1593.","beginsAt":8263048,"endsAt":8263059,"type":"Sprites","descriptio":"Sprite blocked status table. Format: asb?udlr.\na = touching Layer 2 from above.\ns = touching Layer 2 from the side.\nb = touching Layer 2 from below.\n? = unknown, probably unused.\nu = up.\nd = down.\nl = left.\nr = right."},{"address":"$7E1594","length":"12 bytes. Ends at $7E159F.","beginsAt":8263060,"endsAt":8263071,"type":"Sprites","descriptio":"Miscellaneous sprite table. In classic Piranha Plants, it is used to check if the sprite should be made visible and have interaction with the player. If it's any non-zero value, that Piranha Plant will become invisible. More information can be found here."},{"address":"$7E15A0","length":"12 bytes. Ends at $7E15AB.","beginsAt":8263072,"endsAt":8263083,"type":"Sprites","descriptio":"Sprite off screen flag table, horizontal."},{"address":"$7E15AC","length":"12 bytes. Ends at $7E15B7.","beginsAt":8263084,"endsAt":8263095,"type":"Sprites","descriptio":"Miscellaneous sprite table. It's often used as a timer to determine how long it takes to turn around. Table decrements itself once per frame. More information can be found here."},{"address":"$7E15B8","length":"12 bytes. Ends at $7E15C3.","beginsAt":8263096,"endsAt":8263107,"type":"Sprites","descriptio":"Determines what kind of slope a sprite is on. Possible values:\n#$FC = very steep slope left.\n#$FD = steep slope left.\n#$FE = normal slope left.\n#$FF = gradual slope left.\n#$00 = flat ground (or in the air).\n#$01 = gradual slope right.\n#$02 = normal slope right.\n#$03 = steep slope right.\n#$04 = very steep slope right."},{"address":"$7E15C4","length":"12 bytes. Ends at $7E15CF.","beginsAt":8263108,"endsAt":8263119,"type":"Sprites","descriptio":"Flag set if a sprite is more than 4 tiles horizontally offscreen. Used by a few large sprites (e.g. turnblock bridges and chained platforms) to determine whether to draw any of the sprite at all."},{"address":"$7E15D0","length":"12 bytes. Ends at $7E15DB.","beginsAt":8263120,"endsAt":8263131,"type":"Sprites","descriptio":"Flag for whether the sprite is on Yoshi's tongue. #$00 = No; #$01 = Yes."},{"address":"$7E15DC","length":"12 bytes. Ends at $7E15E7.","beginsAt":8263132,"endsAt":8263143,"type":"Sprites","descriptio":"Flag to disable sprite interaction with objects. Ghost house ledge holes store their sprite index (plus one) to this to make sprites fall through the ground, but any non-zero value will work."},{"address":"$7E15E8","length":"1 byte","beginsAt":8263144,"endsAt":8263144,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E15E9","length":"1 byte","beginsAt":8263145,"endsAt":8263145,"type":"Sprites","descriptio":"Sprite index for the current sprite that is being processed."},{"address":"$7E15EA","length":"12 bytes. Ends at $7E15F5.","beginsAt":8263146,"endsAt":8263157,"type":"Sprites","descriptio":"Sprite index to the OAM table."},{"address":"$7E15F6","length":"12 bytes. Ends at $7E1601.","beginsAt":8263158,"endsAt":8263169,"type":"Sprites","descriptio":"Sprite YXPPCCCT table. Many sprites use it in their graphics routines."},{"address":"$7E1602","length":"12 bytes. Ends at $7E160D.","beginsAt":8263170,"endsAt":8263181,"type":"Sprites","descriptio":"Miscellaneous sprite table. Often used as graphics pointer. More information can be found here."},{"address":"$7E160E","length":"12 bytes. Ends at $7E1619.","beginsAt":8263182,"endsAt":8263193,"type":"Sprites","descriptio":"Miscellaneous sprite table. In SMW, it is used to keep track of things such as the green bouncing Koopa's Y speed and the sprite number of certain spawned, kicked, etc. sprites. More information can be found here."},{"address":"$7E161A","length":"12 bytes. Ends at $7E1625.","beginsAt":8263194,"endsAt":8263205,"type":"Sprites","descriptio":"Sprite index to the load status table (see $7E1938)."},{"address":"$7E1626","length":"12 bytes. Ends at $7E1631.","beginsAt":8263206,"endsAt":8263217,"type":"Sprites","descriptio":"Miscellaneous sprite table. Consecutive enemies killed by a sprite table. Each byte is how many sprites that particular sprite has killed. In SMW, this applies to sprites that can be thrown, such as Koopa shells. More information can be found here."},{"address":"$7E1632","length":"12 bytes. Ends at $7E163D.","beginsAt":8263218,"endsAt":8263229,"type":"Sprites","descriptio":"\"Sprite is behind scenery\" flag. Used by, among others, the net Koopas."},{"address":"$7E163E","length":"12 bytes. Ends at $7E1649.","beginsAt":8263230,"endsAt":8263241,"type":"Sprites","descriptio":"Miscellaneous sprite table. Table decrements once per frame. In SMW, it's used as e.g. a timer that, when it's zero, makes Ludwig face the player, while he's spitting fireballs. More information can be found here."},{"address":"$7E164A","length":"12 bytes. Ends at $7E1655.","beginsAt":8263242,"endsAt":8263253,"type":"Sprites","descriptio":"Sprite is in liquid indicator table. #$00 = Sprite not in liquid; #$01 = Sprite in water; #$80 = Sprite in lava.\n\nAlso used in the Morton/Roy battle as an indicator that the walls have to close in, and in Bowser's fight to indicate the music after Bowser is defeated has already started."},{"address":"$7E1656","length":"12 bytes. Ends at $7E1661.","beginsAt":8263254,"endsAt":8263265,"type":"Sprites","descriptio":"Sprite properties, first Tweaker/MWR byte.\nFormat: sSjJcccc\ns=Disappear in cloud of smoke\nS=Hop in/kick shells\nj=Dies when jumped on\nJ=Can be jumped on (false = player gets hurt if he jumps on the sprite, but can bounce off with a spin jump)\ncccc=Object clipping"},{"address":"$7E1662","length":"12 bytes. Ends at $7E166D.","beginsAt":8263266,"endsAt":8263277,"type":"Sprites","descriptio":"Sprite properties, second Tweaker/MWR byte.\nFormat: dscccccc\nd=Falls straight down when killed\ns=Use shell as death frame\ncccccc=Sprite clipping"},{"address":"$7E166E","length":"12 bytes. Ends at $7E1679.","beginsAt":8263278,"endsAt":8263289,"type":"Sprites","descriptio":"Sprite properties, third Tweaker/MWR byte.\nFormat: lwcfpppg\nl=Don't interact with layer 2 (or layer 3 tides)\nw=Disable water splash\nc=Disable cape killing\nf=Disable fireball killing\nppp=Palette\ng=Use second graphics page"},{"address":"$7E167A","length":"12 bytes. Ends at $7E1685.","beginsAt":8263290,"endsAt":8263301,"type":"Sprites","descriptio":"Sprite properties, fourth Tweaker/MWR byte.\nFormat: dpmksPiS\nd=Don't use default interaction with player\np=Gives power-up when eaten by Yoshi\nm=Process interaction with player every frame\nk=Can't be kicked like a shell\ns=Don't change into a shell when stunned\nP=Process while off screen\ni=Invincible to star/cape/fire/bouncing bricks\nS=Don't disable clipping when killed with star"},{"address":"$7E1686","length":"12 bytes. Ends at $7E1691.","beginsAt":8263302,"endsAt":8263313,"type":"Sprites","descriptio":"Sprite properties, fifth Tweaker/MWR byte.\nFormat: dnctswye\nd=Don't interact with objects\nn=Spawns a new sprite\nc=Don't turn into a coin when goal passed\nt=Don't change direction if touched\ns=Don't interact with other sprites\nw=Weird ground behavior\ny=Stay in Yoshi's mouth\ne=Inedible"},{"address":"$7E1692","length":"1 byte","beginsAt":8263314,"endsAt":8263314,"type":"Sprites","descriptio":"Sprite memory setting from header."},{"address":"$7E1693","length":"1 byte","beginsAt":8263315,"endsAt":8263315,"type":"Blocks","descriptio":"For the regular tiles in SMW, this holds the low byte of the Map16 number (Y contains the high byte). Within custom block code, this contains the low byte of the \"acts like\"/\"act as\" setting, Y has the high byte, and $03-$04 contain the actual Map16 number. This gets its value from a pointer to the Map16 tile table at $7E:C800 (Y gets its value from $7F:C800)."},{"address":"$7E1694","length":"1 byte","beginsAt":8263316,"endsAt":8263316,"type":"Blocks","descriptio":"How many pixels the sprite should move down from the nearest 16x16 tile. Originally, its data comes from the table at $00:E632."},{"address":"$7E1695","length":"1 byte","beginsAt":8263317,"endsAt":8263317,"type":"Misc.","descriptio":"Used most often in tracking the second sprite being checked in various interaction routines, for example the second sprite's index in the sprite contact routine. It also serves a use during checking when a sprite is entering/exiting water."},{"address":"$7E1696","length":"1 byte","beginsAt":8263318,"endsAt":8263318,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."},{"address":"$7E1697","length":"1 byte","beginsAt":8263319,"endsAt":8263319,"type":"Counter","descriptio":"Consecutive enemies stomped."},{"address":"$7E1698","length":"1 byte","beginsAt":8263320,"endsAt":8263320,"type":"Sprites","descriptio":"Current index being processed for a variety of sprite types, specifically minor extended sprites, bounce sprites, quake sprites, and smoke sprites."},{"address":"$7E1699","length":"4 bytes. Ends at $7E169C.","beginsAt":8263321,"endsAt":8263324,"type":"Sprites","descriptio":"Bounce sprite type number. A list of possible values can be found here."},{"address":"$7E169D","length":"4 bytes. Ends at $7E16A0.","beginsAt":8263325,"endsAt":8263328,"type":"Sprites","descriptio":"Bounce sprite initialization flag table. #$00 = bounce sprite in init routine; #$01 = bounce sprite in main routine. Used for several things, such as generating tile 152 (invisible solid) once only."},{"address":"$7E16A1","length":"4 bytes. Ends at $7E16A4.","beginsAt":8263329,"endsAt":8263332,"type":"Sprites","descriptio":"Bounce sprite Y position, low byte."},{"address":"$7E16A5","length":"4 bytes. Ends at $7E16A8.","beginsAt":8263333,"endsAt":8263336,"type":"Sprites","descriptio":"Bounce sprite X position, low byte."},{"address":"$7E16A9","length":"4 bytes. Ends at $7E16AC.","beginsAt":8263337,"endsAt":8263340,"type":"Sprites","descriptio":"Bounce sprite Y position, high byte."},{"address":"$7E16AD","length":"4 bytes. Ends at $7E16B0.","beginsAt":8263341,"endsAt":8263344,"type":"Sprites","descriptio":"Bounce sprite X position, high byte."},{"address":"$7E16B1","length":"4 bytes. Ends at $7E16B4.","beginsAt":8263345,"endsAt":8263348,"type":"Sprites","descriptio":"Bounce sprite Y speed."},{"address":"$7E16B5","length":"4 bytes. Ends at $7E16B8.","beginsAt":8263349,"endsAt":8263352,"type":"Sprites","descriptio":"Bounce sprite X speed."},{"address":"$7E16B9","length":"4 bytes. Ends at $7E16BC.","beginsAt":8263353,"endsAt":8263356,"type":"Sprites","descriptio":"Accumulating fraction bits for bounce sprite X speed."},{"address":"$7E16BD","length":"4 bytes. Ends at $7E16C0.","beginsAt":8263357,"endsAt":8263360,"type":"Sprites","descriptio":"Accumulating fraction bits for bounce sprite Y speed."},{"address":"$7E16C1","length":"4 bytes. Ends at $7E16C4.","beginsAt":8263361,"endsAt":8263364,"type":"Sprites","descriptio":"Bounce sprite turns into Map16 tile. This uses the same values as $7E:009C."},{"address":"$7E16C5","length":"4 bytes. Ends at $7E16C8.","beginsAt":8263365,"endsAt":8263368,"type":"Sprites","descriptio":"Bounce sprite timer - amount of frames until bounce sprite disappears. Turn blocks are set to spinning mode when this timer runs out."},{"address":"$7E16C9","length":"4 bytes. Ends at $7E16CC.","beginsAt":8263369,"endsAt":8263372,"type":"Sprites","descriptio":"Block bounce sprite table.\nFormat: L-----DD\nL is which layer it is on. Clear means it's on layer 1, set means it's on layer 2 (or layer 3 if applicable).\nDD is the direction it is moving in. 00 = up; 01 = right; 10 = left; 11 = down.\nThe -'s are unknown. They're likely unused, but that's not certain yet."},{"address":"$7E16CD","length":"4 bytes. Ends at $7E16D0.","beginsAt":8263373,"endsAt":8263376,"type":"Sprites","descriptio":"Quake/interaction sprite type. 0 = empty, 1 = hitting/breaking a block, 2 = Yoshi's stomp."},{"address":"$7E16D1","length":"4 bytes. Ends at $7E16D4.","beginsAt":8263377,"endsAt":8263380,"type":"Sprites","descriptio":"Quake/interaction sprite X position, low byte."},{"address":"$7E16D5","length":"4 bytes. Ends at $7E16D8.","beginsAt":8263381,"endsAt":8263384,"type":"Sprites","descriptio":"Quake/interaction sprite X position, high byte."},{"address":"$7E16D9","length":"4 bytes. Ends at $7E16DC.","beginsAt":8263385,"endsAt":8263388,"type":"Sprites","descriptio":"Quake/interaction sprite Y position, low byte."},{"address":"$7E16DD","length":"4 bytes. Ends at $7E16E0.","beginsAt":8263389,"endsAt":8263392,"type":"Sprites","descriptio":"Quake/interaction sprite Y position, high byte."},{"address":"$7E16E1","length":"6 bytes. Ends at $7E16E6.","beginsAt":8263393,"endsAt":8263398,"type":"Sprites","descriptio":"Score/1-Up sprite number. A list of possible values can be found here."},{"address":"$7E16E7","length":"6 bytes. Ends at $7E16EC.","beginsAt":8263399,"endsAt":8263404,"type":"Sprites","descriptio":"Score/1-up sprite Y position, low byte."},{"address":"$7E16ED","length":"6 bytes. Ends at $7E16F2.","beginsAt":8263405,"endsAt":8263410,"type":"Sprites","descriptio":"Score/1-up sprite X position, low byte."},{"address":"$7E16F3","length":"6 bytes. Ends at $7E16F8.","beginsAt":8263411,"endsAt":8263416,"type":"Sprites","descriptio":"Score/1-up sprite X position, high byte."},{"address":"$7E16F9","length":"6 bytes. Ends at $7E16FE.","beginsAt":8263417,"endsAt":8263422,"type":"Sprites","descriptio":"Score/1-up sprite Y position, high byte."},{"address":"$7E16FF","length":"6 bytes. Ends at $7E1704.","beginsAt":8263423,"endsAt":8263428,"type":"Sprites","descriptio":"Score/1-up sprite Y movement - how long the score sprite should move upwards. It is not possible to go down, and the maximum amount of frames is #$30. Additionally, the sprite is twice as slow with #$10-#$1F as with #$20-#$2F, and four times as slow with #$00-#$0F. The sprite terminates itself when this hits zero."},{"address":"$7E1705","length":"6 bytes. Ends at $7E170A.","beginsAt":8263429,"endsAt":8263434,"type":"Sprites","descriptio":"Layer the score/1-up sprite is on. Used to control its position."},{"address":"$7E170B","length":"10 bytes. Ends at $7E1714.","beginsAt":8263435,"endsAt":8263444,"type":"Sprites","descriptio":"Extended sprite number. A list of possible values can be found here. Last two bytes reserved for fireballs."},{"address":"$7E1715","length":"10 bytes. Ends at $7E171E.","beginsAt":8263445,"endsAt":8263454,"type":"Sprites","descriptio":"Extended sprite Y position, low byte. Last two bytes reserved for fireballs."},{"address":"$7E171F","length":"10 bytes. Ends at $7E1728.","beginsAt":8263455,"endsAt":8263464,"type":"Sprites","descriptio":"Extended sprite X position, low byte. Last two bytes reserved for fireballs."},{"address":"$7E1729","length":"10 bytes. Ends at $7E1732.","beginsAt":8263465,"endsAt":8263474,"type":"Sprites","descriptio":"Extended sprite Y position, high byte. Last two bytes reserved for fireballs."},{"address":"$7E1733","length":"10 bytes. Ends at $7E173C.","beginsAt":8263475,"endsAt":8263484,"type":"Sprites","descriptio":"Extended sprite X position, high byte. Last two bytes reserved for fireballs."},{"address":"$7E173D","length":"10 bytes. Ends at $7E1746.","beginsAt":8263485,"endsAt":8263494,"type":"Sprites","descriptio":"Extended sprite Y speed. Last two bytes reserved for fireballs."},{"address":"$7E1747","length":"10 bytes. Ends at $7E1750.","beginsAt":8263495,"endsAt":8263504,"type":"Sprites","descriptio":"Extended sprite X speed. Last two bytes reserved for fireballs."},{"address":"$7E1751","length":"10 bytes. Ends at $7E175A.","beginsAt":8263505,"endsAt":8263514,"type":"Sprites","descriptio":"Accumulating fraction bits for extended sprite Y speed. The last two bytes are for the player's fireballs."},{"address":"$7E175B","length":"10 bytes. Ends at $7E1764.","beginsAt":8263515,"endsAt":8263524,"type":"Sprites","descriptio":"Accumulating fraction bits for extended sprite X speed. The last two bytes are for the player's fireballs. The fireballs also use this table for a hit flag table."},{"address":"$7E1765","length":"10 bytes. Ends at $7E176E.","beginsAt":8263525,"endsAt":8263534,"type":"Sprites","descriptio":"Extended sprite table. Most extended sprites increment this table and use it for their GFX table. (Use a different image every x frames.)"},{"address":"$7E176F","length":"10 bytes. Ends at $7E1778.","beginsAt":8263535,"endsAt":8263544,"type":"Sprites","descriptio":"Extended sprite table with multiple purposes. Fireballs use it as a frame counter table when they hit an object. Various other extended sprites, such as the trail of smoke, use it as a graphics pointer. Table decrements once per frame."},{"address":"$7E1779","length":"10 bytes. Ends at $7E1782.","beginsAt":8263545,"endsAt":8263554,"type":"Sprites","descriptio":"Extended sprite goes behind layers flag. Last two bytes reserved for fireballs."},{"address":"$7E1783","length":"8 bytes. Ends at $7E178A.","beginsAt":8263555,"endsAt":8263562,"type":"Sprites","descriptio":"Shooter number. #$00 = None, #$01 = Bullet Bill shooter, #$02 = Torpedo Launcher."},{"address":"$7E178B","length":"8 bytes. Ends at $7E1792.","beginsAt":8263563,"endsAt":8263570,"type":"Sprites","descriptio":"Shooter Y position, low byte."},{"address":"$7E1793","length":"8 bytes. Ends at $7E179A.","beginsAt":8263571,"endsAt":8263578,"type":"Sprites","descriptio":"Shooter Y position, high byte."},{"address":"$7E179B","length":"8 bytes. Ends at $7E17A2.","beginsAt":8263579,"endsAt":8263586,"type":"Sprites","descriptio":"Shooter X position, low byte."},{"address":"$7E17A3","length":"8 bytes. Ends at $7E17AA.","beginsAt":8263587,"endsAt":8263594,"type":"Sprites","descriptio":"Shooter X position, high byte."},{"address":"$7E17AB","length":"8 bytes. Ends at $7E17B2.","beginsAt":8263595,"endsAt":8263602,"type":"Sprites","descriptio":"Amount of time it takes for a shooter to shoot the next sprite. Decrements every 2 frames via $13."},{"address":"$7E17B3","length":"8 bytes. Ends at $7E17BA.","beginsAt":8263603,"endsAt":8263610,"type":"Sprites","descriptio":"Shooter's index to level table (see $7E:1938). Curiously, shooters are always reloaded, because there is no routine to erase them."},{"address":"$7E17BB","length":"1 byte","beginsAt":8263611,"endsAt":8263611,"type":"Empty","descriptio":"Contains the low byte of the level number when loading the levels, but never read by anything. It's cleared when the loading is done. Can be used as freeram."},{"address":"$7E17BC","length":"1 byte","beginsAt":8263612,"endsAt":8263612,"type":"Misc.","descriptio":"How much the Y position of Layer 1 changed in the current frame. Only used by the originally unused winged cage sprite."},{"address":"$7E17BD","length":"1 byte","beginsAt":8263613,"endsAt":8263613,"type":"Misc.","descriptio":"How much the X position of Layer 1 changed in the current frame. Used in various instances, for example to check how fast the spinning coins should move horizontally when a goal tape is touched when there are sprites on screen."},{"address":"$7E17BE","length":"1 byte","beginsAt":8263614,"endsAt":8263614,"type":"Misc.","descriptio":"How much the Y position of Layer 2 changed in the current frame. Used when the player should be still compared to a moving layer 2. For example, it's used by the Layer 2 horizontal scroll sprite, F4."},{"address":"$7E17BF","length":"1 byte","beginsAt":8263615,"endsAt":8263615,"type":"Misc.","descriptio":"How much the X position of Layer 2 changed in the current frame."},{"address":"$7E17C0","length":"4 bytes. Ends at $7E17C3.","beginsAt":8263616,"endsAt":8263619,"type":"Sprites","descriptio":"Smoke sprite number:\n\n#$00 = Free slot.\n#$01 = Puff of smoke.\n#$02 = Contact graphic.\n#$03 = Smoke when the player turns around abruptly.\n#$04 = Unused/None.\n#$05 = Glitter sprite."},{"address":"$7E17C4","length":"4 bytes. Ends at $7E17C7.","beginsAt":8263620,"endsAt":8263623,"type":"Sprites","descriptio":"Smoke sprite Y position, low byte."},{"address":"$7E17C8","length":"4 bytes. Ends at $7E17CB.","beginsAt":8263624,"endsAt":8263627,"type":"Sprites","descriptio":"Smoke sprite X position, low byte."},{"address":"$7E17CC","length":"4 bytes. Ends at $7E17CF.","beginsAt":8263628,"endsAt":8263631,"type":"Sprites","descriptio":"Smoke sprite timer - amount of frames until smoke sprite disappears."},{"address":"$7E17D0","length":"4 bytes. Ends at $7E17D3.","beginsAt":8263632,"endsAt":8263635,"type":"Sprites","descriptio":"Spinning coin from block. If zero, the slot is free, otherwise it's occupied by such a spinning coin."},{"address":"$7E17D4","length":"4 bytes. Ends at $7E17D7.","beginsAt":8263636,"endsAt":8263639,"type":"Sprites","descriptio":"Spinning coin from block Y position, low byte."},{"address":"$7E17D8","length":"4 bytes. Ends at $7E17DB.","beginsAt":8263640,"endsAt":8263643,"type":"Sprites","descriptio":"Spinning coin from block Y speed. $20-$9F will terminate the sprite and cause a score sprite to appear."},{"address":"$7E17DC","length":"4 bytes. Ends at $7E17DF.","beginsAt":8263644,"endsAt":8263647,"type":"Sprites","descriptio":"Accumulating fraction bits for fixed point spinning coin from block Y speed."},{"address":"$7E17E0","length":"4 bytes. Ends at $7E17E3.","beginsAt":8263648,"endsAt":8263651,"type":"Sprites","descriptio":"Spinning coin from block X position, low byte."},{"address":"$7E17E4","length":"4 bytes. Ends at $7E17E7.","beginsAt":8263652,"endsAt":8263655,"type":"Sprites","descriptio":"Spinning coin from block table. Indicates whether the spinning coin is generated from a block on Layer 1, or Layer 2/3. Depending on the layer, it updates its position based on the layer's movements."},{"address":"$7E17E8","length":"4 bytes. Ends at $7E17EB.","beginsAt":8263656,"endsAt":8263659,"type":"Sprites","descriptio":"Spinning coin from block Y position, high byte."},{"address":"$7E17EC","length":"4 bytes. Ends at $7E17EF.","beginsAt":8263660,"endsAt":8263663,"type":"Sprites","descriptio":"Spinning coin from block X position, high byte."},{"address":"$7E17F0","length":"12 bytes. Ends at $7E17FB.","beginsAt":8263664,"endsAt":8263675,"type":"Sprites","descriptio":"Minor extended sprite number. A list of possible values can be found here."},{"address":"$7E17FC","length":"12 bytes. Ends at $7E1807.","beginsAt":8263676,"endsAt":8263687,"type":"Sprites","descriptio":"Minor extended sprite Y position, low byte."},{"address":"$7E1808","length":"12 bytes. Ends at $7E1813.","beginsAt":8263688,"endsAt":8263699,"type":"Sprites","descriptio":"Minor extended sprite X position, low byte."},{"address":"$7E1814","length":"12 bytes. Ends at $7E181F.","beginsAt":8263700,"endsAt":8263711,"type":"Sprites","descriptio":"Minor extended sprite Y position, high byte."},{"address":"$7E1820","length":"12 bytes. Ends at $7E182B.","beginsAt":8263712,"endsAt":8263723,"type":"Sprites","descriptio":"Minor extended sprite Y speed."},{"address":"$7E182C","length":"12 bytes. Ends at $7E1837.","beginsAt":8263724,"endsAt":8263735,"type":"Sprites","descriptio":"Minor extended sprite X speed."},{"address":"$7E1838","length":"12 bytes. Ends at $7E1843.","beginsAt":8263736,"endsAt":8263747,"type":"Sprites","descriptio":"Accumulating fraction bits for fixed point minor extended sprite Y speed."},{"address":"$7E1844","length":"12 bytes. Ends at $7E184F.","beginsAt":8263748,"endsAt":8263759,"type":"Sprites","descriptio":"Accumulating fraction bits for fixed point minor extended sprite X speed."},{"address":"$7E1850","length":"12 bytes. Ends at $7E185B.","beginsAt":8263760,"endsAt":8263771,"type":"Sprites","descriptio":"Minor extended sprite timer. Indicates how long the minor extended sprite is still staying active, on-screen."},{"address":"$7E185C","length":"1 byte","beginsAt":8263772,"endsAt":8263772,"type":"Player","descriptio":"Flag to disable player interaction with objects. Ghost house ledge holes store their sprite index (plus one) to this to make Mario fall through the ground, but any non-zero value will work."},{"address":"$7E185D","length":"1 byte","beginsAt":8263773,"endsAt":8263773,"type":"Sprites","descriptio":"Related to the spawning of extended sprites. Used to index $7E:17F0 (minor extended sprite type table) if there are no empty slots when an extended sprite needs to be spawned. This is so that the oldest extended sprite can be removed when a new one needs to be made."},{"address":"$7E185E","length":"1 byte","beginsAt":8263774,"endsAt":8263774,"type":"Misc.","descriptio":"Sometimes used to keep track of a tile to generate at $00:BEB0 (before storing to $7E:009C); may be in conjunction with $7E:18B6. Also used to determine the player Y position when he's on the line guided rope, used to determine positions and such of Yoshi's tiles, etc."},{"address":"$7E185F","length":"1 byte","beginsAt":8263775,"endsAt":8263775,"type":"Sprites","descriptio":"This is the low byte of the Map16 tile (actual tile number, not \"acts like\" setting) that a sprite is touching vertically. The high byte is at $18D7.\n\nThis, $1860, $1862, and $18D7 are set after $019138, the subroutine that allows the sprite to interact with objects, is called. (This includes $01802A, the routine that updates sprite position with gravity, which calls $019138.)"},{"address":"$7E1860","length":"1 byte","beginsAt":8263776,"endsAt":8263776,"type":"Sprites","descriptio":"This is the low byte of the Map16 tile (actual tile number, not \"acts like\" setting) that a sprite is touching horizontally. The high byte is at $1862.\n\nThis, $185F, $1862, and $18D7 are set after $019138, the subroutine that allows the sprite to interact with objects, is called. (This includes $01802A, the routine that updates sprite position with gravity, which calls $019138.)"},{"address":"$7E1861","length":"1 byte","beginsAt":8263777,"endsAt":8263777,"type":"Sprites","descriptio":"Which sprite to overwrite if all slots are full. Used for blocks containing sprites and the item box.\nNote that only the last two slots can be overwritten using this method."},{"address":"$7E1862","length":"1 byte","beginsAt":8263778,"endsAt":8263778,"type":"Sprites","descriptio":"This is the high byte of the Map16 tile (actual tile number, not \"acts like\" setting) that a sprite is touching horizontally. The low byte is at $1860.\n\nThis, $185F, $1860, and $18D7 are set after $019138, the subroutine that allows the sprite to interact with objects, is called. (This includes $01802A, the routine that updates sprite position with gravity, which calls $019138.)"},{"address":"$7E1863","length":"1 byte","beginsAt":8263779,"endsAt":8263779,"type":"Sprites","descriptio":"Smoke sprite index. Holds the first available smoke image index and resets to #$03 if all of them have been filled and another smoke image is spawned."},{"address":"$7E1864","length":"1 byte","beginsAt":8263780,"endsAt":8263780,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E1865","length":"1 byte","beginsAt":8263781,"endsAt":8263781,"type":"Sprites","descriptio":"Spinning coin from block index. Holds the first available index and resets to #$03 if all of them have been filled and another coin is spawned."},{"address":"$7E1866","length":"2 bytes. Ends at $7E1867.","beginsAt":8263782,"endsAt":8263783,"type":"Misc.","descriptio":"Two seperate, 8-bit addresses used by the brown chained platform rotation routine. Used to tell if an angle is negative or not. Refer to $7E:0036 also."},{"address":"$7E1868","length":"1 byte","beginsAt":8263784,"endsAt":8263784,"type":"Blocks","descriptio":"Used as a mirror of $7E:1693 in stunned sprites. This address here is used to check if a sprite is hitting a smashable block (for example, a question mark block) from below."},{"address":"$7E1869","length":"2 bytes. Ends at $7E186A.","beginsAt":8263785,"endsAt":8263786,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E186B","length":"1 byte","beginsAt":8263787,"endsAt":8263787,"type":"Blocks","descriptio":"Multiple coin block timer - amount of time until the multiple coin block turns into a used block. Keeps decrementing until it's #$01, after that it stays that value until the block is hit again, at which it's turned into a used block. Then, this address gets set to zero."},{"address":"$7E186C","length":"12 bytes. Ends at $7E1877.","beginsAt":8263788,"endsAt":8263799,"type":"Sprites","descriptio":"Sprite off screen flag table, vertical. For sprites in bank 1, if the sprite is set to be two tiles high (with $190F), then bits 0 and 1 correspond to the top and bottom tiles respectively.\n\nThe routine that sets this address in bank 2 and 3 has an error, however; this address instead does the 2-bit functionality if bit 5 of $1662 (which is one of the bits in the sprite clipping value). As a result, some sprites will register as vertically offscreen when they're actually just at the top of the screen."},{"address":"$7E1878","length":"1 byte","beginsAt":8263800,"endsAt":8263800,"type":"Sprites","descriptio":"Indicates where the player is on the X axis in relation to the currently-active revolving net door sprite. If this is #$00, the player is perfectly centered on the sprite horizontally. It will be positive if the player is toward the left side of the sprite (the farther left, the bigger the positive number) and negative if the player is toward the right side of the sprite (the farther right, the bigger the negative number).\n\nIs used to calculate the player X speed as the net is turning around sideways."},{"address":"$7E1879","length":"1 byte","beginsAt":8263801,"endsAt":8263801,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E187A","length":"1 byte","beginsAt":8263802,"endsAt":8263802,"type":"Yoshi","descriptio":"Riding Yoshi Flag. #$00 = No, #$01 = Yes, #$02 = Yes, and turning around."},{"address":"$7E187B","length":"12 bytes. Ends at $7E1886.","beginsAt":8263803,"endsAt":8263814,"type":"Sprites","descriptio":"Miscellaneous sprite table. Has the following purposes:\n\nSprite stomp immunity flag table - enables stomp immunity for sprites if the flag is set.\nAdditionally, the changing item sprite uses it to determine which sprite it is (#$00 = mushroom, #$40 = fire flower, #$80 = feather, #$C0 = star), the goal tape determines by this address whether it activates the normal or secret exit, the radius of rotating chain sprites is held by this address, certain Yoshi abilities are handled, etc. More information can be found here.\n\n$7E:1884 is also used to determine what background should be used during the Morton/Roy/Ludwig battle scene. #$00 = Ludwig; #$01 = Morton/Roy.\nThere is also a bug with the background flames during the Ludwig battle, as they seem to change color upon this address not being #$01. This is responsible for a palette glitch in the original SMW, where the fire turns a greyish blue very briefly. Change $02:8380 to #$80 to fix the bug."},{"address":"$7E1887","length":"1 byte","beginsAt":8263815,"endsAt":8263815,"type":"Timer","descriptio":"Time to shake Layer 1."},{"address":"$7E1888","length":"2 bytes. Ends at $7E1889.","beginsAt":8263816,"endsAt":8263817,"type":"Misc.","descriptio":"Layer 1 image relative Y position, used by $7E:1887 (shaking ground). Does not affect Layer 1 interaction. #$0000 = default value, Layer 1's image unchanged. The higher the value (positive, #$0001 and beyond), the more Layer 1 goes up. The lower the value (negative, wraps around to #$FFFF and below) the more Layer 1 goes down."},{"address":"$7E188A","length":"1 byte","beginsAt":8263818,"endsAt":8263818,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load, hurt, death, and taking hit while cape flying ($00:F625 for the last three) and in the Peach Rescued scene ($03:AE39)."},{"address":"$7E188B","length":"1 byte","beginsAt":8263819,"endsAt":8263819,"type":"Player","descriptio":"Player image-relative Y position, used by $7E:1887 (shaking ground). Does not affect player interaction. Unlike $7E:1888, this is an 8-bit address."},{"address":"$7E188C","length":"1 byte","beginsAt":8263820,"endsAt":8263820,"type":"Flag","descriptio":"Flag that determines if the game should keep updating the tile and YXPPCCCT data for the sprite background tiles in the Morton/Roy/Ludwig room.\n\n#$00 = Keep updating; #$01 = Stop updating."},{"address":"$7E188D","length":"1 byte","beginsAt":8263821,"endsAt":8263821,"type":"Misc.","descriptio":"Used during the calculation of the X position of the background in the Morton/Roy/Ludwig room. It starts by copying the value from $7E:001A (8-bit) and getting the lowest bit from $7E:001B by using the carry bit. So first, this address is $7E:001A (9-bit) > 1.\nThis address is then, after it's inverted with EOR #$FF : INC A, used for $7E:0006 (scratch RAM, used for X displacement of all tiles)."},{"address":"$7E188E","length":"1 byte","beginsAt":8263822,"endsAt":8263822,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."},{"address":"$7E188F","length":"1 byte","beginsAt":8263823,"endsAt":8263823,"type":"Sprites","descriptio":"Used to indicate whether the bonus game is over. It will disable the interaction and movement."},{"address":"$7E1890","length":"1 byte","beginsAt":8263824,"endsAt":8263824,"type":"Counter","descriptio":"How many 1-Ups to spawn. (Used for bonus game.)"},{"address":"$7E1891","length":"1 byte","beginsAt":8263825,"endsAt":8263825,"type":"Timer","descriptio":"P-balloon timer. Ticks down one step per four frames.\nNote that setting this doesn't make the player fly away. The flight controller is $7E:13F3."},{"address":"$7E1892","length":"20 bytes. Ends at $7E18A5.","beginsAt":8263826,"endsAt":8263845,"type":"Sprites","descriptio":"Cluster sprite number. The pointer for those is at $02:F825. A list of possible values, as well as more information on cluster sprites in general, can be found here."},{"address":"$7E18A6","length":"1 byte","beginsAt":8263846,"endsAt":8263846,"type":"Empty","descriptio":"Empty, unused RAM. Referenced at $01CF9E (Morton's code) but never actually used. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E18A7","length":"1 byte","beginsAt":8263847,"endsAt":8263847,"type":"Blocks","descriptio":"This address is a mirror of $7E:1693, which holds the Map16 number of the current block that is being checked. Primarily used in the Chargin' Chuck turn/throw block detection code."},{"address":"$7E18A8","length":"2 bytes. Ends at $7E18A9.","beginsAt":8263848,"endsAt":8263849,"type":"Sprites","descriptio":"Morton and Roy left and right pillar status. $7E:18A8 controls the left pillar, whereas $7E:18A9 is used for the right pillar.\n#$00 = Pillar is not falling yet.\n#$01 = Pillar is falling.\n#$81 = Pillar has fallen."},{"address":"$7E18AA","length":"2 bytes. Ends at $7E18AB.","beginsAt":8263850,"endsAt":8263851,"type":"Sprites","descriptio":"Morton and Roy left and right pillar Y positions. $7E:18AA is the left pillar, $7E:18AB is the right pillar.\nThe pillar status ($7E:18A8 and $7E:18A9) is set to #$81 (pillar has fallen) as soon as this Y position becomes #$B0.\nThe Y speed here accelerates slightly - see $02:83F8 for reference."},{"address":"$7E18AC","length":"1 byte","beginsAt":8263852,"endsAt":8263852,"type":"Yoshi","descriptio":"Timer on when Yoshi will swallow the sprite in his mouth. It ticks down one step every fourth frame, and Yoshi's swallowing animation starts when this is #$26 or lower."},{"address":"$7E18AD","length":"1 byte","beginsAt":8263853,"endsAt":8263853,"type":"Yoshi","descriptio":"Frame counter for Yoshi's walking frames. It goes from #$00-#$02, forms an index for the image table at $01:EDEE, and becomes #$02 when it gets lower than #$00 (frame counter decrements).\nThis address is comparable with the player's version, at $7E:13DB."},{"address":"$7E18AE","length":"1 byte","beginsAt":8263854,"endsAt":8263854,"type":"Timer","descriptio":"How long it takes for Yoshi's tongue to come out after the player \"hits\" Yoshi (after $7E:14A3 becomes #$10). Starts at #$06 and decrements each frame."},{"address":"$7E18AF","length":"1 byte","beginsAt":8263855,"endsAt":8263855,"type":"Yoshi","descriptio":"Yoshi squatting timer. It's set to #$0C once the player hops onto Yoshi, decrements once every frame, and takes care of the ducking frame."},{"address":"$7E18B0","length":"2 bytes. Ends at $7E18B1.","beginsAt":8263856,"endsAt":8263857,"type":"Yoshi","descriptio":"Yoshi's X position. Used only to determine where Yoshi is when eating a berry (by means of walking into one, not sticking his tongue out)."},{"address":"$7E18B2","length":"2 bytes. Ends at $7E18B3.","beginsAt":8263858,"endsAt":8263859,"type":"Yoshi","descriptio":"Yoshi's Y position. Used only to determine where Yoshi is when eating a berry (by means of walking into one, not sticking his tongue out)."},{"address":"$7E18B4","length":"1 byte","beginsAt":8263860,"endsAt":8263860,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E18B5","length":"1 byte","beginsAt":8263861,"endsAt":8263861,"type":"Flag","descriptio":"Cleared when standing on the ground, set when standing on the floor of the unused winged cage. It tells whether the player should be following the cage or layer 1."},{"address":"$7E18B6","length":"1 byte","beginsAt":8263862,"endsAt":8263862,"type":"Misc.","descriptio":"Sometimes used to keep track of a tile to generate at $00:BEB0 (before storing to $7E:009C); may be in conjunction with $7E:185E. Also used to determine the player X position when he's on the line guided rope, used when the player is on top of Boo Block, etc."},{"address":"$7E18B7","length":"1 byte","beginsAt":8263863,"endsAt":8263863,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E18B8","length":"1 byte","beginsAt":8263864,"endsAt":8263864,"type":"Flag","descriptio":"Run cluster sprite code.\n#$00 = No; #$01 = Yes."},{"address":"$7E18B9","length":"1 byte","beginsAt":8263865,"endsAt":8263865,"type":"Sprites","descriptio":"Generator type that is currently active. #$01 = Eerie Generator; #$02 = Para Goomba; and so on. The pointer for this address is located at $02:B00C."},{"address":"$7E18BA","length":"1 byte","beginsAt":8263866,"endsAt":8263866,"type":"Sprites","descriptio":"Index to the Boo rings that are on screen (maximum is two). Additionally, depending on bit 0 of this byte, the reappearing ghosts use position combination 1 or 2."},{"address":"$7E18BB","length":"1 byte","beginsAt":8263867,"endsAt":8263867,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E18BC","length":"1 byte","beginsAt":8263868,"endsAt":8263868,"type":"Sprites","descriptio":"Floating skull speed. It's set to #$00 in the sprite initial routine, and set to #$0C when the player touches the sprite."},{"address":"$7E18BD","length":"1 byte","beginsAt":8263869,"endsAt":8263869,"type":"Timer","descriptio":"Time to stun the player. It will make the player face the screen and make him unable to move."},{"address":"$7E18BE","length":"1 byte","beginsAt":8263870,"endsAt":8263870,"type":"Flag","descriptio":"Flag used to tell if the player can climb on air. The line guided ropes use this to let the player get onto them."},{"address":"$7E18BF","length":"1 byte","beginsAt":8263871,"endsAt":8263871,"type":"Timer","descriptio":"Timer used by a bunch of appearing/disappearing sprites (examples: Lakitu, Magikoopa, and Layer 3 smasher). Sprite D2 freezes it by incrementing the timer - effectively getting rid of the decrements applied by said sprites."},{"address":"$7E18C0","length":"1 byte","beginsAt":8263872,"endsAt":8263872,"type":"Timer","descriptio":"Timer for respawning certain sprites, such as the Boo Buddies or sprite E5 (and Lakitu). Sprite D2, Turn Off Generator 2, sets this to zero when it is active."},{"address":"$7E18C1","length":"1 byte","beginsAt":8263873,"endsAt":8263873,"type":"Sprites","descriptio":"Used by Magikoopa and Lakitu to determine which sprite number should respawn when $7E:18BF is zero."},{"address":"$7E18C2","length":"1 byte","beginsAt":8263874,"endsAt":8263874,"type":"Flag","descriptio":"Player is inside Lakitu cloud flag.\n#$00 = Not inside Lakitu cloud.\n#$01 = Inside Lakitu cloud.\nIf the latter, the player does not animate as if he were walking or floating."},{"address":"$7E18C3","length":"2 bytes. Ends at $7E18C4.","beginsAt":8263875,"endsAt":8263876,"type":"Sprites","descriptio":"Y position of the respawning sprite, used with $7E:18C0 (respawn timer) and $7E:18C1 (respawn sprite number)."},{"address":"$7E18C5","length":"8 bytes. Ends at $7E18CC.","beginsAt":8263877,"endsAt":8263884,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E18CD","length":"1 byte","beginsAt":8263885,"endsAt":8263885,"type":"Sprites","descriptio":"Bounce sprite (alternative) index. Also used as which bounce sprite to overwrite if all slots are full when resetting a turn block (similar to $7E1861)."},{"address":"$7E18CE","length":"4 bytes. Ends at $7E18D1.","beginsAt":8263886,"endsAt":8263889,"type":"Timer","descriptio":"Spinning turn block timer - amount of frames a spinning turn block lasts. When it hits zero, it reverts to a regular turn block."},{"address":"$7E18D2","length":"1 byte","beginsAt":8263890,"endsAt":8263890,"type":"Player","descriptio":"This address is incremented every time the player kills a sprite with a star while the star is active and will reset when the star runs out.\n#$01 = 200; #$02 = 400; #$03 = 800; #$04 = 1000; #$05 = 2000; #$06 = 4000; #$07 = 8000; #$08 and above = 1-Up"},{"address":"$7E18D3","length":"1 byte","beginsAt":8263891,"endsAt":8263891,"type":"Timer","descriptio":"Write a value to here, and sparkles (like the ones from the stars) will fly around the player for that amount of frames. However, it is never used in the original game.\nNote that if the player has an invincibility star, this timer will wait until the star runs out."},{"address":"$7E18D4","length":"1 byte","beginsAt":8263892,"endsAt":8263892,"type":"Yoshi","descriptio":"Red berries eaten by Yoshi. After 10 berries, the counter resets and Yoshi lays an egg, containing a mushroom."},{"address":"$7E18D5","length":"1 byte","beginsAt":8263893,"endsAt":8263893,"type":"Yoshi","descriptio":"Pink berries eaten by Yoshi. After 2 berries, the counter resets and Yoshi lays an egg, containing a coin game cloud."},{"address":"$7E18D6","length":"1 byte","beginsAt":8263894,"endsAt":8263894,"type":"Yoshi","descriptio":"Type of the current berry being eaten. #$00 = Coin (no effect except getting a coin), #$01 = Red, #$02 = Pink, #$03 = Green. Controls both color and what happens when Yoshi eats the berry."},{"address":"$7E18D7","length":"1 byte","beginsAt":8263895,"endsAt":8263895,"type":"Sprites","descriptio":"This is the high byte of the Map16 tile (actual tile number, not \"acts like\" setting) that a sprite is touching vertically. The low byte is at $185F.\n\nThis, $185F, $1860, and $1862 are set after $019138, the subroutine that allows the sprite to interact with objects, is called. (This includes $01802A, the routine that updates sprite position with gravity, which calls $019138.)"},{"address":"$7E18D8","length":"1 byte","beginsAt":8263896,"endsAt":8263896,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."},{"address":"$7E18D9","length":"1 byte","beginsAt":8263897,"endsAt":8263897,"type":"Timer","descriptio":"Timer for the castle/ghost house door in the intro sequence. The castle door starts at #$FF, the ghost house door starts at #$7F.\nFor the castle door: start rising and generate first sound at #$B0, rise until #$81, stay still until #$30, then sink and generate second sound at #$01.\nFor the ghost house door: open and generate first sound at #$76, then close and generate second sound at #$08."},{"address":"$7E18DA","length":"1 byte","beginsAt":8263898,"endsAt":8263898,"type":"Yoshi","descriptio":"Sprite number that spawns when Yoshi lays an egg. Valid values are #$74 (mushroom) and #$6A (coin game cloud)."},{"address":"$7E18DB","length":"1 byte","beginsAt":8263899,"endsAt":8263899,"type":"Empty","descriptio":"Set to #$08 at $00:CDD4 (unreachable by default) and never touched again. Might have been intended as a starting index for the player's fireballs.\nCleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E18DC","length":"1 byte","beginsAt":8263900,"endsAt":8263900,"type":"Yoshi","descriptio":"Flag that is set when the player is ducking with Yoshi. They cannot turn around in this state. If you were to use the debug codes at $00:D085-$00:D089, this also makes the fireballs that the player fires when on Yoshi appear at a different position."},{"address":"$7E18DD","length":"1 byte","beginsAt":8263901,"endsAt":8263901,"type":"Counter","descriptio":"Number of silver coins collected."},{"address":"$7E18DE","length":"1 byte","beginsAt":8263902,"endsAt":8263902,"type":"Yoshi","descriptio":"Timer that determines how long it takes before an egg is laid by Yoshi, when 10 red Berries have been eaten. Is set to #$20 by default. Also, as long as this timer is above #$01, the player is frozen ($7E:13FB is set)."},{"address":"$7E18DF","length":"1 byte","beginsAt":8263903,"endsAt":8263903,"type":"Sprites","descriptio":"Slot (index to $7E:009E and similar) of the current Yoshi, plus 1. Set to #$00 when the Yoshi despawns."},{"address":"$7E18E0","length":"1 byte","beginsAt":8263904,"endsAt":8263904,"type":"Timer","descriptio":"Timer for how long stolen Lakitu clouds should remain before evaporating. Decrements once every four frames."},{"address":"$7E18E1","length":"1 byte","beginsAt":8263905,"endsAt":8263905,"type":"Sprites","descriptio":"Slot of the Lakitu cloud (index to the sprite table that corresponds to the Lakitu cloud sprite). Contains a valid value even if the Lakitu itself is still alive."},{"address":"$7E18E2","length":"1 byte","beginsAt":8263906,"endsAt":8263906,"type":"Yoshi","descriptio":"Loose Yoshi Flag. If set, any Yoshis spawned will become 1-Ups instead. It's also Yoshi's index in the sprite table, plus 1."},{"address":"$7E18E3","length":"1 byte","beginsAt":8263907,"endsAt":8263907,"type":"Sprites","descriptio":"How many of the coins from the coin game cloud (the one that appears if Yoshi eats two pink berries) the player has collected. Oddly enough, it's cleared if you get hurt."},{"address":"$7E18E4","length":"1 byte","beginsAt":8263908,"endsAt":8263908,"type":"Misc.","descriptio":"1-Up handler. Write to it to give that many lives. Handles everything except the 1-Up/2-Up/etc. graphics."},{"address":"$7E18E5","length":"1 byte","beginsAt":8263909,"endsAt":8263909,"type":"Timer","descriptio":"Amount of time until the next life is given through the 1-Up handler ($7E:18E4)."},{"address":"$7E18E6","length":"1 byte","beginsAt":8263910,"endsAt":8263910,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E18E7","length":"1 byte","beginsAt":8263911,"endsAt":8263911,"type":"Yoshi","descriptio":"Yoshi ground stomp flag. #$00 = Yoshi does not stomp the ground when landing on it; #$01 = Yoshi does stomp the ground when landing on it.\nThis is set to #$01 when a Yellow Yoshi has a shell in its mouth, or when any Yoshi has a yellow shell in its mouth."},{"address":"$7E18E8","length":"1 byte","beginsAt":8263912,"endsAt":8263912,"type":"Yoshi","descriptio":"Yoshi growing animation timer. Starts at #$40 and then decrements. Additionally, it freezes everything on the screen except Yoshi."},{"address":"$7E18E9","length":"1 byte","beginsAt":8263913,"endsAt":8263913,"type":"Sprites","descriptio":"Occasionally used to index $7E:17C0 (smoke image table). If there are no empty slots left when a smoke image should be spawned, the oldest one is removed and the index is reset."},{"address":"$7E18EA","length":"12 bytes. Ends at $7E18F5.","beginsAt":8263914,"endsAt":8263925,"type":"Sprites","descriptio":"Minor extended sprite X position, high byte."},{"address":"$7E18F6","length":"1 byte","beginsAt":8263926,"endsAt":8263926,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load, cutscene load and level load."},{"address":"$7E18F7","length":"1 byte","beginsAt":8263927,"endsAt":8263927,"type":"Sprites","descriptio":"Score sprite index."},{"address":"$7E18F8","length":"4 bytes. Ends at $7E18FB.","beginsAt":8263928,"endsAt":8263931,"type":"Sprites","descriptio":"Time for a bounce sprite to interact with a normal sprite. Starts at #$06 and decrements. Actual interaction doesn't occur until the value is lower than #$03, though, and $7E:16CD has to be non-zero."},{"address":"$7E18FC","length":"1 byte","beginsAt":8263932,"endsAt":8263932,"type":"Sprites","descriptio":"Alternative extended sprite index, used when the extended sprite tables are full. Holds the first available extended sprite index and resets to #$07 if all of them have been filled and another extended sprite is spawned."},{"address":"$7E18FD","length":"1 byte","beginsAt":8263933,"endsAt":8263933,"type":"Sprites","descriptio":"Flag set when Whistlin' Chuck whistles, even when it's the Super Koopa-generating kind. Setting this makes Rip van Fish chase the player."},{"address":"$7E18FE","length":"1 byte","beginsAt":8263934,"endsAt":8263934,"type":"Sprites","descriptio":"The diagonal and surrounded bullet bills timer. It increments every second frame, and when it reaches #$A0, it sends out some more Bullet Bills and resets itself."},{"address":"$7E18FF","length":"1 byte","beginsAt":8263935,"endsAt":8263935,"type":"Sprites","descriptio":"Shooter index for the current shooter that is being processed."},{"address":"$7E1900","length":"1 byte","beginsAt":8263936,"endsAt":8263936,"type":"Counter","descriptio":"Bonus stars gained at level end - decrements to zero."},{"address":"$7E1901","length":"4 bytes. Ends at $7E1904.","beginsAt":8263937,"endsAt":8263940,"type":"Sprites","descriptio":"YXPPCCCT data of bounce sprite that is being shown."},{"address":"$7E1905","length":"1 byte","beginsAt":8263941,"endsAt":8263941,"type":"Counter","descriptio":"Iggy's/Larry's platform total number of tilts made counter. It will increment everytime the platform will be at a maximum tilt.\nOnly the lowest bit is ever used, and it controls which direction it should move."},{"address":"$7E1906","length":"1 byte","beginsAt":8263942,"endsAt":8263942,"type":"Timer","descriptio":"Iggy/Larry's platform stationary phase timer. Is set to #$40 and decrements every frame. As long as it's not zero, the platform won't rotate."},{"address":"$7E1907","length":"1 byte","beginsAt":8263943,"endsAt":8263943,"type":"Counter","descriptio":"Iggy's platform rotation phase counter.\n#$00 = First phase, tilting left.\n#$01 = First phase, tilting right.\n#$02 = Second phase, tilting left.\n#$03 = Second phase, tilting right.\n#$04 = Third phase, tilting left steeply.\n#$05 = Third phase, tilting right steeply.\nAfter the third phase ends, the counter resets."},{"address":"$7E1908","length":"1 byte","beginsAt":8263944,"endsAt":8263944,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load."},{"address":"$7E1909","length":"1 byte","beginsAt":8263945,"endsAt":8263945,"type":"Flag","descriptio":"Flag that makes the creating/eating block run or not run. #$FF = don't run, any other value = run. Set to #$00 when a brown block is touched."},{"address":"$7E190A","length":"1 byte","beginsAt":8263946,"endsAt":8263946,"type":"Sprites","descriptio":"Reappearing Boo frame counter. They start appearing at #$FF, become fully opaque at #$DF, start disappearing at #$3F, and become fully invisible at #$1F. The counter decrements every frame and doesn't stop when it hits #$00 unless sprite D2 is active, which causes it to freeze at #$FF."},{"address":"$7E190B","length":"1 byte","beginsAt":8263947,"endsAt":8263947,"type":"Sprites","descriptio":"Big Boo Boss palette index, used for the transparency effect. The reappearing Boos (cluster sprites) also use this. They set this address to #$08."},{"address":"$7E190C","length":"1 byte","beginsAt":8263948,"endsAt":8263948,"type":"Timer","descriptio":"Directional coin timer. Decrements every fourth frame."},{"address":"$7E190D","length":"1 byte","beginsAt":8263949,"endsAt":8263949,"type":"Flag","descriptio":"Used as a flag in the Bowser battle for whether or not the final cutscene is playing. Used to remove the item box, as well as several palette updates and using a different OAM index for the roof tiles. Any non-zero value activates the flag."},{"address":"$7E190E","length":"1 byte","beginsAt":8263950,"endsAt":8263950,"type":"Sprites","descriptio":"Sprite buoyancy settings from level header. Format: XY-- ---- (bits)\nX = Enable sprite buoyancy. This reduces the number of sprites that can be on the screen at once without slowing down.\nY = Enable sprite buoyancy and disable all other sprite interaction with layer 2. This reduces the processing cost and slowdown."},{"address":"$7E190F","length":"12 bytes. Ends at $7E191A.","beginsAt":8263951,"endsAt":8263962,"type":"Sprites","descriptio":"Sprite properties, sixth Tweaker/MWR byte.\nFormat: wcdj5sDp\nw=Don't get stuck in walls (carryable sprites)\nc=Don't turn into a coin with silver POW\nd=Death frame 2 tiles high\nj=Can be jumped on with upward Y speed\n5=Takes 5 fireballs to kill. Clear means it's killed by one. The hit counter is at $7E:1528.\ns=Can't be killed by sliding\nD=Don't erase when goal passed\np=Make platform passable from below"},{"address":"$7E191B","length":"1 byte","beginsAt":8263963,"endsAt":8263963,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load, and every frame when Yoshi is on screen. The latter can be disabled by changing $01:EBD9 from [9C 1B 19] to [80 01 EA]."},{"address":"$7E191C","length":"1 byte","beginsAt":8263964,"endsAt":8263964,"type":"Yoshi","descriptio":"Indicates whether or not Yoshi has a key in his mouth. #$00 = no, #$01 = yes."},{"address":"$7E191D","length":"1 byte","beginsAt":8263965,"endsAt":8263965,"type":"Sprites","descriptio":"Which cluster sprite to overwrite for the Sumo Bros. lightning's flames if all usable slots are full. Only cycles through sprites 0 to 9."},{"address":"$7E191E","length":"1 byte","beginsAt":8263966,"endsAt":8263966,"type":"Misc.","descriptio":"Is set to a value #$00-#$03 when pressing a big switch. Depending on the value, either a green, yellow, blue or red flat switch sprite will be left behind in the room."},{"address":"$7E191F","length":"1 byte","beginsAt":8263967,"endsAt":8263967,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E1920","length":"1 byte","beginsAt":8263968,"endsAt":8263968,"type":"Counter","descriptio":"How many 1-Ups from the bonus game are still not collected. Decrements every time a 1-Up is collected. The bonus game ends when this address hits zero."},{"address":"$7E1921","length":"1 byte","beginsAt":8263969,"endsAt":8263969,"type":"Misc.","descriptio":"During the cutscene after defeating Bowser, indicates which letter the \"Mario's adventure is over...\" message is currently at. Ends at #$54."},{"address":"$7E1922","length":"1 byte","beginsAt":8263970,"endsAt":8263970,"type":"Should be 00","descriptio":"High byte of $7E:1921. This is never any value other than #$00 in the original SMW, but since $7E:1921 is sometimes loaded in 16-bit mode, it's not a good idea to use it if you're using the original Bowser battle. Cleared on reset, title screen load, and overworld load."},{"address":"$7E1923","length":"2 bytes. Ends at $7E1924.","beginsAt":8263971,"endsAt":8263972,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E1925","length":"1 byte","beginsAt":8263973,"endsAt":8263973,"type":"Misc.","descriptio":"Level mode settings from level header."},{"address":"$7E1926","length":"2 bytes. Ends at $7E1927.","beginsAt":8263974,"endsAt":8263975,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E1928","length":"1 byte","beginsAt":8263976,"endsAt":8263976,"type":"Misc.","descriptio":"One of two screen numbers used in the level loading routine. This one points to where the current object is placed and is never changed inside an object loading code. The other screen number is $7E:1BA1.\n\nIt is also used in the credits as a pointer to which background should be used for which part of the credits roll."},{"address":"$7E1929","length":"1 byte","beginsAt":8263977,"endsAt":8263977,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E192A","length":"1 byte","beginsAt":8263978,"endsAt":8263978,"type":"Misc.","descriptio":"RAM address used to hold some information from the level entrance. Format: swaaaaaa. s = slippery level, w = water level, a = player action. If one of bits 3-5 is set, the player action will be \"vertical pipe exit downwards, water level\".\nNote that the s and w bits are cleared after being transferred to $85/$86, so they'll be 0 when read mid-level."},{"address":"$7E192B","length":"1 byte","beginsAt":8263979,"endsAt":8263979,"type":"Graphics","descriptio":"Sprite GFX set that is currently used."},{"address":"$7E192C","length":"1 byte","beginsAt":8263980,"endsAt":8263980,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E192D","length":"1 byte","beginsAt":8263981,"endsAt":8263981,"type":"Misc.","descriptio":"FG palette settings from the level header."},{"address":"$7E192E","length":"1 byte","beginsAt":8263982,"endsAt":8263982,"type":"Misc.","descriptio":"Sprite palette settings from the level header."},{"address":"$7E192F","length":"1 byte","beginsAt":8263983,"endsAt":8263983,"type":"Misc.","descriptio":"Background color settings from the level header."},{"address":"$7E1930","length":"1 byte","beginsAt":8263984,"endsAt":8263984,"type":"Misc.","descriptio":"Background palette settings from the level header."},{"address":"$7E1931","length":"1 byte","beginsAt":8263985,"endsAt":8263985,"type":"Misc.","descriptio":"Tileset setting from level header. Also used on the overworld and in cutscenes to determine what graphics should be uploaded."},{"address":"$7E1932","length":"1 byte","beginsAt":8263986,"endsAt":8263986,"type":"Misc.","descriptio":"Copy of the tileset setting from the level header. Never read by anything."},{"address":"$7E1933","length":"1 byte","beginsAt":8263987,"endsAt":8263987,"type":"Misc.","descriptio":"Layer being processed. #$00 = Layer 1; #$01 = Layer 2/3 (depending on which is interactive). Used in both level loading routine and processing interactions."},{"address":"$7E1934","length":"1 byte","beginsAt":8263988,"endsAt":8263988,"type":"Should be 00","descriptio":"While this is never non-zero in the original SMW, $7E:1933 (current layer) is sometimes used in 16bit mode, so using this address for different purposes is a bad idea."},{"address":"$7E1935","length":"1 byte","beginsAt":8263989,"endsAt":8263989,"type":"Flag","descriptio":"When set to a non-zero value, it'll overwrite tiles #$4A-#$4F and #$5A-#$5F with graphics which it gets from $7E:0BF6 on level load. Used by the MARIO START! sign. Flag is immediately cleared after that."},{"address":"$7E1936","length":"2 bytes. Ends at $7E1937.","beginsAt":8263990,"endsAt":8263991,"type":"Misc.","descriptio":"Used by Lunar Magic v3.00+ to hold the screen size minus one tile. Effectively equivalent to $13D7 - #$10."},{"address":"$7E1938","length":"128 bytes. Ends at $7E19B7.","beginsAt":8263992,"endsAt":8264119,"type":"Sprites","descriptio":"Sprite load status within the level.\nLoaded sprites' indices to this table are stored in the sprite table at $7E:161A. Shooters' indices are stored to $7E:17B3.\nAll sprites are set to #$00 when the player enters a new area, meaning they are marked to be loaded.\nIf a sprite's value is set to anything else, for example if it's killed, it will not reload until the player exits and re-enters the area.\n\nNote that indices 0 to 63 (#$00 to #$3F) are cleared on level load, index 64 to 127 (#$40 to #$7F) are not. This can be fixed by changing $02ABF3 to #$7F."},{"address":"$7E19B8","length":"32 bytes. Ends at $7E19D7.","beginsAt":8264120,"endsAt":8264151,"type":"Misc.","descriptio":"Exit Table. This connects doors and exit-enabled pipes to their correct entrances.\nThe index for this exit table is the position of the exit (relative to layer 1) divided by 256. If layer 1 is vertical, then use the Y position of the exit, else use the X position. This is also known as the current screen number.\nFor primary exits, the value in this exit table is the low 8 bits of the level number of the destination room. For secondary exits, the value in this exit table is the index to the secondary entrance ROM tables; and ROM table $05:F800/0x2FA00 provides the low 8 bits of the room number."},{"address":"$7E19D8","length":"32 bytes. Ends at $7E19F7.","beginsAt":8264152,"endsAt":8264183,"type":"Misc.","descriptio":"Exit Table, flags + high bit. Format: HHHHwush\nh = Bit 8 of the level number for normal exits (0 = level 0xx, 1 = level 1xx).\nHHHHh = Bits 8-12 of the secondary exit number.\ns = Secondary exit flag.\nu = LM-modified flag. If not set, the entire byte is ignored and SMW's original exit system is used.\nw = Water flag (secondary exits) / Midway flag* (non-secondary exits).\n\n* Only used if the level has \"use seperate settings for midway entrance\" set.\n\nThis table is only used when Lunar Magic is done with the ROM. The original game does write the h bit, but never uses it."},{"address":"$7E19F8","length":"384 bytes. Ends at $7E1B77.","beginsAt":8264184,"endsAt":8264567,"type":"Misc.","descriptio":"Three tables of 128 bytes each for remembering which items have been collected (item memory settings). If the corresponding bits are set (items are collected), those objects will not be reloaded.\nThe tables are split up like this: every screen number has 4 bytes designated to it. The first byte is for the left half of the top subscreen, the second byte for the right half, and the third and fourth are for the bottom subscreen. Each vertical column within these regions uses one bit.\n\nItem memory setting 3 doesn't actually exist in the original game, but LM still allows you to select it. As of LM 1.8, it is apparently possible to use item memory setting 3 as well, but it only means \"make everything respawn\" and doesn't remember anything."},{"address":"$7E1B78","length":"2 bytes. Ends at $7E1B79.","beginsAt":8264568,"endsAt":8264569,"type":"Overworld","descriptio":"This is used on the overworld to determine if a hard coded path should be processed. This flag is set and read in 16-bit mode, it can have the values #$0000 or #$0001. #$0001 means that a hard coded path/event is processed.\nAlso used by Lunar Magic in levels for the \"Fix Layer 3 scroll sync\" option, but only when the option is on."},{"address":"$7E1B7A","length":"2 bytes. Ends at $7E1B7B.","beginsAt":8264570,"endsAt":8264571,"type":"Overworld","descriptio":"This address serves as index to $04:9086 which is used to get what hard coded tile to use for the current tile the player is walking on. This address plus one is also the index to $04:90CA.\nAlso used by Lunar Magic in levels for the \"Fix Layer 3 scroll sync\" option, but only when the option is on."},{"address":"$7E1B7C","length":"1 byte","beginsAt":8264572,"endsAt":8264572,"type":"Overworld","descriptio":"Accumulating fraction bits for the Layer 1 X speed on the overworld, used when the camera returns to the player after having been in free scrolling mode. This address handles incrementing the Layer 1 X position when it overflows."},{"address":"$7E1B7D","length":"1 byte","beginsAt":8264573,"endsAt":8264573,"type":"Overworld","descriptio":"Accumulating fraction bits for the Layer 1 Y speed on the overworld, used when the camera returns to the player after having been in free scrolling mode. This address handles incrementing the Layer 1 Y position when it overflows."},{"address":"$7E1B7E","length":"1 byte","beginsAt":8264574,"endsAt":8264574,"type":"Overworld","descriptio":"This address is a mirror of $7E:13C1 (tile the player is on in the overworld) and it's used to check whether the player is walking on a complementive corner tile (those small corners used with the paths, a list of all tile numbers can be found at $04:A03C) while settling on a level tile.\nAppears to be designed to allow for (very) curvy paths leading to level tiles, found in for example Star World and the path to the warp pipe from Chocolate Island 2.\nDepending on the complementive corner tile in question, the player image and position are altered when settling on a level tile."},{"address":"$7E1B7F","length":"1 byte","beginsAt":8264575,"endsAt":8264575,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load, overworld load and level load.\n\nThis address could be regarded as the \"high byte\" of $7E:1B7E, however it is never used (AND #$00FF is applied) and only stored to on the overworld. Thus, it is safe to use this address as free RAM outside of the overworld."},{"address":"$7E1B80","length":"1 byte","beginsAt":8264576,"endsAt":8264576,"type":"Overworld","descriptio":"Player is on a ladder or vine flag (tiles 3F-41).\n#$00 = Player is not on a climbing tile.\n#$01 = Player is on a climbing tile."},{"address":"$7E1B81","length":"1 byte","beginsAt":8264577,"endsAt":8264577,"type":"Should be 00","descriptio":"Uses in 16-bit loads to $7E:1B80, and otherwise #$00 is always stored here. Using this outside of the overworld is fine, however. Cleared on reset, titlescreen load and overworld load."},{"address":"$7E1B82","length":"1 byte","beginsAt":8264578,"endsAt":8264578,"type":"Overworld","descriptio":"X position on-screen of the current castle/fortress destruction explosion. Also denotes X position on-screen of the appearing event sprite tiles."},{"address":"$7E1B83","length":"1 byte","beginsAt":8264579,"endsAt":8264579,"type":"Overworld","descriptio":"Y position on-screen of the current castle/fortress destruction explosion. Also denotes Y position on-screen of the appearing event sprite tiles."},{"address":"$7E1B84","length":"2 bytes. Ends at $7E1B85.","beginsAt":8264580,"endsAt":8264581,"type":"Timer","descriptio":"The 16-bit address is used to determine whether the large event tiles (6x6) are uploaded or the small event tiles (2x2). It's #$0900 or higher if it's the latter. It gets its values from the table at $04:DD8D.\n\nSolely $7E:1B84 is a timer used for handling castle/fortress destruction on the overworld, as well as the timer used for a level tile being revealed (the flash sprite)."},{"address":"$7E1B86","length":"1 byte","beginsAt":8264582,"endsAt":8264582,"type":"Pointer","descriptio":"Pointer to the various routines that handle overworld events being activated. The pointers are located at $04E577.\n\n#$00 = Check if an event needs to run, and check if a \"explosion\" is needed.\n#$01 = Show the castle/P-switch \"explosion\".\n#$02 = Set up the event index counters.\n#$03 = Get layer 2 event tile.\n#$04 = Animate the fade in for layer 2 tile.\n#$05 = Get layer 1 event tile.\n#$06 = Animate the fade in for layer 1 tile.\n#$07 = End of event, marks event as run."},{"address":"$7E1B87","length":"1 byte","beginsAt":8264583,"endsAt":8264583,"type":"Pointer","descriptio":"Overworld continue/save prompt trigger.\n\n#$01 = Init of game over, continue screen. If 2-Player flag is on ($7E:0DB2 is non-zero), go to following value.\n#$02 = Preparing $7E:1B8A, go to following value, fading into the 'swap lives between players' screen.\n#$03 = Swap lives between players screen.\n#$04 = Fading out of the 'swap lives between players' screen.\n#$05 = Init of save prompt.\n#$06 = Fading into save prompt.\n#$07 = Save prompt screen.\n#$08 = Fading out of save prompt."},{"address":"$7E1B88","length":"1 byte","beginsAt":8264584,"endsAt":8264584,"type":"Flag","descriptio":"Message box expanding (#$00) or shrinking (#$01) flag. Also used in various other instances such as the save prompt on the overworld."},{"address":"$7E1B89","length":"1 byte","beginsAt":8264585,"endsAt":8264585,"type":"Misc.","descriptio":"Message box expansion and shrinking timer/size. Note: Setting expanding timer above #$04 will cause the message to be blank. Also used in various other instances such as the save prompt on the overworld."},{"address":"$7E1B8A","length":"1 byte","beginsAt":8264586,"endsAt":8264586,"type":"Flag","descriptio":"Which direction to point the arrow on the give lives menu.\n#$00 = Point to Luigi's direction, give him lives.\n#$01 = Point to Mario's direction, give him lives."},{"address":"$7E1B8B","length":"1 byte","beginsAt":8264587,"endsAt":8264587,"type":"Overworld","descriptio":"A timer that increments every frame, used for the blinking arrow on the give lives (between players) screen. If $7E:1B8B & #$18 gives a non-zero value, the arrow is shown. If the result of that is zero instead, a blank is shown."},{"address":"$7E1B8C","length":"1 byte","beginsAt":8264588,"endsAt":8264588,"type":"Flag","descriptio":"Used as a flag to determine whether you are at the first or second iteration of the pointer to $04:DB18 ($7E:1DE8 is #$00 or #$06). #$02 is fully cleared, #$00 is fully blacked out. Needed to make the windowing HDMA fade out at first, then fade back in when the submap switching process is done."},{"address":"$7E1B8D","length":"2 bytes. Ends at $7E1B8E.","beginsAt":8264589,"endsAt":8264590,"type":"Overworld","descriptio":"Used in the calculation of the X positions for the overworld fade in/out windowing HDMA transitions. Removing stores to this address will make it only active in the Y direction. Starts at #$0000 (completely black) and ends at #$7000 (cleared, except for the sides which are hidden under the overworld border)."},{"address":"$7E1B8F","length":"2 bytes. Ends at $7E1B90.","beginsAt":8264591,"endsAt":8264592,"type":"Overworld","descriptio":"Used in the calculation of the Y positions for the overworld fade in/out windowing HDMA transitions. Removing stores to this address will make it only active in the X direction. Starts at #$0000 (completely black) and ends at #$5400 (cleared)."},{"address":"$7E1B91","length":"1 byte","beginsAt":8264593,"endsAt":8264593,"type":"Counter","descriptio":"Blinking cursor frame counter (file select, save prompt, etc.)"},{"address":"$7E1B92","length":"1 byte","beginsAt":8264594,"endsAt":8264594,"type":"Misc.","descriptio":"Position of the cursor on the title screen menus."},{"address":"$7E1B93","length":"1 byte","beginsAt":8264595,"endsAt":8264595,"type":"Misc.","descriptio":"Use Secondary Exits flag. This is likely not used when Lunar Magic is done with the ROM."},{"address":"$7E1B94","length":"1 byte","beginsAt":8264596,"endsAt":8264596,"type":"Flag","descriptio":"Disable bonus game sprite from being loaded flag. If not zero, the bonus game sprite will terminate itself in the init routine."},{"address":"$7E1B95","length":"1 byte","beginsAt":8264597,"endsAt":8264597,"type":"Flag","descriptio":"This flag is set to #$02 as soon as the Yoshi wings animation (#$08 of $7E:0071) brings you above the screen ($7E:0080 = #$FFC0), which means you will be heading for level C8 or 1C8.\nA bycoming effect is that Yoshi will have wings in that level, and that you can't die from falling into the depths. Moreover, as you enter the level, Yoshi will always be blue. It's also the only way you can \"die\" with Yoshi without losing him on the overworld."},{"address":"$7E1B96","length":"1 byte","beginsAt":8264598,"endsAt":8264598,"type":"Flag","descriptio":"Side exit enabled flag. #$00 = Disabled; #$01 = enabled."},{"address":"$7E1B97","length":"2 bytes. Ends at $7E1B98.","beginsAt":8264599,"endsAt":8264600,"type":"Empty","descriptio":"This address is only stored to once in all of SMW, and that's in code that was originally never used (the fifth scrolling command, sprite #$EC). It was going to have some unknown use when you reached the last screen of the level. Because SMW never executes the code that writes to it (unless that command is used), this is a safe address to use.\n\nCleared on reset, titlescreen load, overworld load and cutscene load."},{"address":"$7E1B99","length":"1 byte","beginsAt":8264601,"endsAt":8264601,"type":"Flag","descriptio":"Used in goal point marching: flag to show peace image flag and handling the fade-out ellipse.\n#$00 = Don't show peace image yet, don't handle fade-out ellipse.\n#$01 = Show peace image and handle fade-out ellipse."},{"address":"$7E1B9A","length":"1 byte","beginsAt":8264602,"endsAt":8264602,"type":"Graphics","descriptio":"Background Scroll Activated flag. The unused orange platform (sprite 5E) sets it to #$01, and the flying turn blocks (sprite C1) set it to #$08.\nIf set, triggers the fast BG scroll sprite, as well as making the flying turn blocks move."},{"address":"$7E1B9B","length":"1 byte","beginsAt":8264603,"endsAt":8264603,"type":"Flag","descriptio":"Used to check if Yoshi should not reappear for the next room (castle intro cutscene and the likes). These cutscenes set the flag to #$01, which makes Yoshi not reappear for the next room, but it does keep Yoshi on the overworld. Automatically set to #$00 when the overworld is loaded again. One could use this RAM address to disable Yoshi for one room, but re-enable him in the next again."},{"address":"$7E1B9C","length":"1 byte","beginsAt":8264604,"endsAt":8264604,"type":"Overworld","descriptio":"Player is entering a warp pipe/star flag.\n#$00 = No; #$01 = Yes."},{"address":"$7E1B9D","length":"1 byte","beginsAt":8264605,"endsAt":8264605,"type":"Timer","descriptio":"Time to wait until the rising/sinking tide starts rising/sinking again (after the \"no movement\" interval)."},{"address":"$7E1B9E","length":"1 byte","beginsAt":8264606,"endsAt":8264606,"type":"Flag","descriptio":"Music has to be altered on the overworld during a 2-player game flag.\n#$00 = Do not alter music.\n#$01 = Do alter music.\nIt's set when the players are switching, but also when you go from submap to submap, the latter even when it's a 1-player game. But this flag is never read if it's a 1-player game."},{"address":"$7E1B9F","length":"1 byte","beginsAt":8264607,"endsAt":8264607,"type":"Counter","descriptio":"Number of broken tile pairs in the Reznor battle."},{"address":"$7E1BA0","length":"1 byte","beginsAt":8264608,"endsAt":8264608,"type":"Overworld","descriptio":"The overworld uses this address to shake the ground as the Valley of Bowser entrance rises from the depths, by setting this address to #$FF. It also changes the music and adds some sound effects. It's a timer, but it only decrements as long as $7E:13D9 is #$02."},{"address":"$7E1BA1","length":"1 byte","beginsAt":8264609,"endsAt":8264609,"type":"Misc.","descriptio":"One of two screen numbers used in the level loading routine. This one points to where the next tile will be placed and is often changed inside an object loading code. The other screen number is $7E:1928.\nAlthough referenced at $03:DF58 (Bowser's code), its value isn't actually used there."},{"address":"$7E1BA2","length":"1 byte","beginsAt":8264610,"endsAt":8264610,"type":"Sprites","descriptio":"Bits 0-6 form the index to the tilemap for the Mode 7 bosses, which read from the table at $03:D9DE, 16 bytes per image. Bit 7 is used to control the X-flip of the tiles. What actually happens then, is that the odd graphic tile is used instead of the even graphic tile, since all Mode 7 graphics are decompressed into a regular and flipped tile. For example, tile #$01 in VRAM is the same as tile #$00 except it's flipped."},{"address":"$7E1BA3","length":"64 bytes. Ends at $7E1BE2.","beginsAt":8264611,"endsAt":8264674,"type":"Graphics","descriptio":"A buffer that is used for uploading Mode 7 tile data to VRAM in non-platform Mode 7 bosses. The buffer is enough to fill in an entire 8x8 tile, as each 8x8 tile requires 64 bytes in Mode 7 8bpp.\n\n$7E:1BB2 is also used as a buffer in the graphics upload routine. The use seems to be for converting 3bpp to 4bpp format.\n\n$7E:1BBC is used as a flag in the graphics upload routine to alter 3bpp to 4bpp conversion depending on the graphics file that is being uploaded."},{"address":"$7E1BE3","length":"1 byte","beginsAt":8264675,"endsAt":8264675,"type":"Misc.","descriptio":"Layer 3 settings.\n#$00 = No Layer 3; #$01 = Low and high tide; #$02 = Low tide only; #$03 = Tileset specific image."},{"address":"$7E1BE4","length":"2 bytes. Ends at $7E1BE5.","beginsAt":8264676,"endsAt":8264677,"type":"Blocks","descriptio":"VRAM address to start uploading data from the table at $7E:1BE6. It's used for layer 1. Big endian."},{"address":"$7E1BE6","length":"256 bytes. Ends at $7E1CE5.","beginsAt":8264678,"endsAt":8264933,"type":"Blocks","descriptio":"Which tiles should be used for each row of 16x16 tiles, 2 bytes per 8x8 tile, used while scrolling layer 1 (loading new tiles). In horizontal levels, $7E:1BE6-$7E:1C65 form the left column of 8x8 tiles while $7E:1C66-$7E:1CE5 form the right column of 8x8 tiles. On the overworld and in vertical levels, $7E:1BE6-$7E:1C65 form the upper row of 8x8 tiles, while $7E:1C66-$7E:1CE5 form the bottom row of 8x8 tiles."},{"address":"$7E1CE6","length":"2 bytes. Ends at $7E1CE7.","beginsAt":8264934,"endsAt":8264935,"type":"Blocks","descriptio":"VRAM address to start uploading data from the table at $7E:1CE8. It's used for layer 2. Big endian."},{"address":"$7E1CE8","length":"256 bytes. Ends at $7E1DE7.","beginsAt":8264936,"endsAt":8265191,"type":"Blocks","descriptio":"Which tiles should be used for each row of 16x16 tiles, 2 bytes per 8x8 tile, used while scrolling interactive layer 2 (loading new tiles). In horizontal levels, $7E:1CE8-$7E:1D77 form the left column of 8x8 tiles while $7E:1D78-$7E:1DE7 form the right column of 8x8 tiles. On the overworld and in vertical levels, $7E:1CE8-$7E:1D77 form the upper row of 8x8 tiles, while $7E:1D78-$7E:1DE7 form the bottom row of 8x8 tiles."},{"address":"$7E1DE8","length":"1 byte","beginsAt":8265192,"endsAt":8265192,"type":"Overworld","descriptio":"This is a pointer index used for various tasks during the submap switching scene ($7E:13D9 is #$0A), possible values are:\n#$00 = Commence with handling windowing HDMA.\n#$01-04 = Update layer 1 on the overworld.\n#$05 = Handle palette loading.\n#$06 = End with windowing HDMA.\n#$07 = Terminate submap switching phase by storing #$04 to $7E:13D9, make eventual submap changes (for example, what music to play)."},{"address":"$7E1DE9","length":"1 byte","beginsAt":8265193,"endsAt":8265193,"type":"Overworld","descriptio":"If non-zero, indicates an event should be activated on overworld load (otherwise, event handling is skipped). The 'Course Clear!' and Switch Palace message box routines set this just before loading the overworld, and it's set to zero again when the event finishes executing.\n\nAdditionally, the enemy credits use this as the current screen number. Counts up to #$0C, which has the last set of enemies (the Koopa Kids and Bowser)."},{"address":"$7E1DEA","length":"1 byte","beginsAt":8265194,"endsAt":8265194,"type":"Overworld","descriptio":"Overworld event to run at level end. #$FF means that no event will be run."},{"address":"$7E1DEB","length":"2 bytes. Ends at $7E1DEC.","beginsAt":8265195,"endsAt":8265196,"type":"Overworld","descriptio":"Event tile to load to the overworld. A starting value is set to this at level end, and it increments until it reaches the value of $7E:1DED."},{"address":"$7E1DED","length":"2 bytes. Ends at $7E1DEE.","beginsAt":8265197,"endsAt":8265198,"type":"Overworld","descriptio":"Last event tile to load to the overworld during a given event, set at level end."},{"address":"$7E1DEF","length":"1 byte","beginsAt":8265199,"endsAt":8265199,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E1DF0","length":"2 bytes. Ends at $7E1DF1.","beginsAt":8265200,"endsAt":8265201,"type":"Overworld","descriptio":"$7E:1DF0 - X position of the camera when using the overworld scroll function, low byte.\n$7E:1DF1 - X position of the camera when using the overworld scroll function, high byte.\nThese values are only used to determine which way the camera should go to get back to the player."},{"address":"$7E1DF2","length":"2 bytes. Ends at $7E1DF3.","beginsAt":8265202,"endsAt":8265203,"type":"Overworld","descriptio":"$7E:1DF2 - Y position of the camera when using the overworld scroll function, low byte.\n$7E:1DF3 - Y position of the camera when using the overworld scroll function, high byte.\nThese values are only used to determine which way the camera should go to get back to the player."},{"address":"$7E1DF4","length":"1 byte","beginsAt":8265204,"endsAt":8265204,"type":"Misc.","descriptio":"Index to intro control sequence data table."},{"address":"$7E1DF5","length":"1 byte","beginsAt":8265205,"endsAt":8265205,"type":"Timer","descriptio":"Timer to used for multiple purposes:\n- How long a particular input during the intro sequence will remain pressed.\n- How long the Nintendo Presents screen will remain active.\n- How long a Switch Palace message will remain active.\n- How long the player has to wait before he can dismiss the intro message."},{"address":"$7E1DF6","length":"1 byte","beginsAt":8265206,"endsAt":8265206,"type":"Overworld","descriptio":"Star and Warp pipe handler. It's an index of the current star/warp pipe tile you're standing on, multiplied by two. With this index, the destination coordinates are determined."},{"address":"$7E1DF7","length":"1 byte","beginsAt":8265207,"endsAt":8265207,"type":"Player","descriptio":"Used by the Star Road warp star on the overworld. Determines the speed with which the player is launched in the air during warping. The higher the value, the faster he gets launched in the air. By default the maximum is #$04, though this cap can be altered by editing $04:9E70/0x22070."},{"address":"$7E1DF8","length":"1 byte","beginsAt":8265208,"endsAt":8265208,"type":"Timer","descriptio":"Used by the Star Road warp star tile on the overworld. It controls how long the player has to stay on the ground during the warp, before he actually gets launched in the air. The player gets airborne as soon as the timer hits #$31 (as it increments)."},{"address":"$7E1DF9","length":"4 bytes. Ends at $7E1DFC.","beginsAt":8265209,"endsAt":8265212,"type":"I/O","descriptio":"SPC700 I/O Ports. Write values to play music/SFX. A list of values can be found here."},{"address":"$7E1DFD","length":"2 bytes. Ends at $7E1DFE.","beginsAt":8265213,"endsAt":8265214,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen, overworld and level load (the latter two due to new music banks being uploaded). Note that $7E:1DFD is cleared twice, due to a 16-bit store to $7E:1DFC - at $04:969F/0x2189F (LDA #$0023 : STA $1DFC) and $05:C75D/0x2C95D (LDA #$0009 : STA $1DFC)."},{"address":"$7E1DFF","length":"1 byte","beginsAt":8265215,"endsAt":8265215,"type":"I/O","descriptio":"A copy of $7E:1DFB, the music register. It contains the last value written to SNES register $2142. Probably used to keep the music playing between areas."},{"address":"$7E1E00","length":"1 byte","beginsAt":8265216,"endsAt":8265216,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen, overworld and level load (the latter two due to new music banks being uploaded)."},{"address":"$7E1E01","length":"1 byte","beginsAt":8265217,"endsAt":8265217,"type":"Empty","descriptio":"Empty, unused. Cleared on reset and titlescreen load. However, if the debug code at $00:CC86/0x4E86 is enabled, this address allows you to be in free roaming mode: the player can move in any direction, without being affected by objects or sprites. #$00 = none; #$01 = dash immediately; #$02 = free roaming."},{"address":"$7E1E02","length":"20 bytes. Ends at $7E1E15.","beginsAt":8265218,"endsAt":8265237,"type":"Sprites","descriptio":"Cluster sprite Y position, low byte."},{"address":"$7E1E16","length":"20 bytes. Ends at $7E1E29.","beginsAt":8265238,"endsAt":8265257,"type":"Sprites","descriptio":"Cluster sprite X position, low byte."},{"address":"$7E1E2A","length":"20 bytes. Ends at $7E1E3D.","beginsAt":8265258,"endsAt":8265277,"type":"Sprites","descriptio":"Cluster sprite Y position, high byte."},{"address":"$7E1E3E","length":"20 bytes. Ends at $7E1E51.","beginsAt":8265278,"endsAt":8265297,"type":"Sprites","descriptio":"Cluster sprite X position, high byte."},{"address":"$7E1E52","length":"20 bytes. Ends at $7E1E65.","beginsAt":8265298,"endsAt":8265317,"type":"Sprites","descriptio":"Cluster sprite table. Used as:\n- Y position of reappearing Boos, frame 1. Not relative to screen border.\n- Y speed for Boos from ghost ceiling and death bats."},{"address":"$7E1E66","length":"20 bytes. Ends at $7E1E79.","beginsAt":8265318,"endsAt":8265337,"type":"Sprites","descriptio":"Cluster sprite table. Used as:\n- X position of reappearing Boos, frame 1. Not relative to screen border.\n- X speed for Boos from ghost ceiling and death bats."},{"address":"$7E1E7A","length":"20 bytes. Ends at $7E1E8D.","beginsAt":8265338,"endsAt":8265357,"type":"Sprites","descriptio":"Cluster sprite table. Used as:\n- Y position of reappearing Boos, frame 2. Not relative to screen border.\n- Accumulating fraction bits for fixed point Y speed of death bats."},{"address":"$7E1E8E","length":"20 bytes. Ends at $7E1EA1.","beginsAt":8265358,"endsAt":8265377,"type":"Sprites","descriptio":"Cluster sprite table. Used as:\n- X position of reappearing Boos, frame 2. Not relative to screen border."},{"address":"$7E1EA2","length":"96 bytes. Ends at $7E1F01.","beginsAt":8265378,"endsAt":8265473,"type":"Overworld","descriptio":"Overworld level setting flags, location within the table corresponds to $7E:13BF. Format: bmesudlr.\nb = level is beaten.\nm = midway point has been passed.\ne = no entry if level already passed.\ns = open Save Prompt when level is beaten.\nu = enable walking upwards.\nd = enable walking downwards.\nl = enable walking leftwards.\nr = enable walking rightwards.\n\nSetting the high bit of $7E:1EEB will enable the special stage features (autumn overworld palettes, etc.) in the ORIGINAL game."},{"address":"$7E1F02","length":"15 bytes. Ends at $7E1F10.","beginsAt":8265474,"endsAt":8265488,"type":"Overworld","descriptio":"Overworld event flags. The table works bitwise - if a bit corresponding to an event is set, that event has been run. If it's clear, it hasn't been run yet.\n\nThere's a little formula for finding out what event number corresponds to which bit. Take the event number, divide by eight and use that as index for this table. Take the remainder, and that number (0-7) is the position of the bit inside the indexed byte (left to right).\nExample: Finding event #$13. Division by eight turns #$02 as index (so $7E:1F04) and #$03 as the remainder. It's bit 4 of $7E:1F04 (xxxx xxxx). Not bit 3, because of the \"reversed\" AND tables that are used with this table - bits are not counted from right to left, but from left to right instead."},{"address":"$7E1F11","length":"1 byte","beginsAt":8265489,"endsAt":8265489,"type":"Overworld","descriptio":"Current submap for Mario. #$00 = Main map; #$01 = Yoshi's Island; #$02 = Vanilla Dome; #$03 = Forest of Illusion; #$04 = Valley of Bowser; #$05 = Special World; #$06 = Star World."},{"address":"$7E1F12","length":"1 byte","beginsAt":8265490,"endsAt":8265490,"type":"Overworld","descriptio":"Current submap for Luigi. #$00 = Main map; #$01 = Yoshi's Island; #$02 = Vanilla Dome; #$03 = Forest of Illusion; #$04 = Valley of Bowser; #$05 = Special World; #$06 = Star World."},{"address":"$7E1F13","length":"4 bytes. Ends at $7E1F16.","beginsAt":8265491,"endsAt":8265494,"type":"Player","descriptio":"Player animation on the overworld.\n\n#$00 = Move up.\n#$02 = Move down, stand still (facing the screen).\n#$04 = Move left.\n#$06 = Move right.\n#$08 = Move up while in water.\n#$0A = Move down while in water, stand still while in water (facing the screen).\n#$0C = Move left while in water.\n#$0E = Move right while in water.\n#$10 = Sticking hand out (entering level).\n#$12 = Sticking hand out while in the water (entering level).\n#$14 = Climb ladder/vine, only used when descending path tile #$41.\n#$16 = Climb ladder/vine, regular.\n\n$7E:1F13/4 form Mario's image and $7E:1F15/6 form Luigi's image. Note that the high bytes of the two (bytes 2 and 4, $7E:1F14 and $7E:1F16) are actually unused."},{"address":"$7E1F17","length":"2 bytes. Ends at $7E1F18.","beginsAt":8265495,"endsAt":8265496,"type":"Player","descriptio":"Overworld X position of Mario."},{"address":"$7E1F19","length":"2 bytes. Ends at $7E1F1A.","beginsAt":8265497,"endsAt":8265498,"type":"Player","descriptio":"Overworld Y position of Mario."},{"address":"$7E1F1B","length":"2 bytes. Ends at $7E1F1C.","beginsAt":8265499,"endsAt":8265500,"type":"Player","descriptio":"Overworld X position of Luigi."},{"address":"$7E1F1D","length":"2 bytes. Ends at $7E1F1E.","beginsAt":8265501,"endsAt":8265502,"type":"Player","descriptio":"Overworld Y position of Luigi."},{"address":"$7E1F1F","length":"2 bytes. Ends at $7E1F20.","beginsAt":8265503,"endsAt":8265504,"type":"Player","descriptio":"Pointer to Mario's overworld X position. Value is Mario's regular overworld X position divided by #$10 (#16)."},{"address":"$7E1F21","length":"2 bytes. Ends at $7E1F22.","beginsAt":8265505,"endsAt":8265506,"type":"Player","descriptio":"Pointer to Mario's overworld Y position. Value is Mario's regular overworld Y position divided by #$10 (#16)."},{"address":"$7E1F23","length":"2 bytes. Ends at $7E1F24.","beginsAt":8265507,"endsAt":8265508,"type":"Player","descriptio":"Pointer to Luigi's overworld X position. Value is Luigi's regular overworld X position divided by #$10 (#16)."},{"address":"$7E1F25","length":"2 bytes. Ends at $7E1F26.","beginsAt":8265509,"endsAt":8265510,"type":"Player","descriptio":"Pointer to Luigi's overworld Y position. Value is Luigi's regular overworld Y position divided by #$10 (#16)."},{"address":"$7E1F27","length":"4 bytes. Ends at $7E1F2A.","beginsAt":8265511,"endsAt":8265514,"type":"Flag","descriptio":"Switch palace block flags (Green, Yellow, Blue and Red). #$00 = off; only outlines, #$01-#$FF = on; solid."},{"address":"$7E1F2B","length":"3 bytes. Ends at $7E1F2D.","beginsAt":8265515,"endsAt":8265517,"type":"Empty","descriptio":"Empty. Unlike most empty addresses, this one is saved to and loaded from SRAM, so it's effectively cleared only at reset and new game."},{"address":"$7E1F2E","length":"1 byte","beginsAt":8265518,"endsAt":8265518,"type":"Counter","descriptio":"Number of events triggered. Can be used as a levels beaten counter."},{"address":"$7E1F2F","length":"12 bytes. Ends at $7E1F3A.","beginsAt":8265519,"endsAt":8265530,"type":"Flag","descriptio":"\"Collected five or more Yoshi Coins\" flags, for each level.\nEach seperate byte represents the values for 8 levels, with each bit acting as a flag for a given level.\nIf a bit is set, no Yoshi Coins will reappear in that level.\n\nThe format is as following: $7E:13BF (the level number) divided by 8 (3x LSR) provides the index per byte into this table; that's because 8 levels are represented by one byte, 1 bit per level.\nFor each byte, the level modulo 8 (AND #$07) is the index to the bit, and said index gets the corresponding bit from an AND table at $05:B35B.\nThat bit will be the flag for the level.\n0 = clear bit, less than five Yoshi Coins collected; 1 = set bit, five or more Yoshi Coins collected.\n\nAn example: checking if five or more Yoshi Coins were collected in level 105. First, convert to $7E:13BF format. #$29 indicates you're in level 105.\nDivide that by 8 to get the byte index - #$29 divided by 8 is five (rounded), so the sixth byte is the correct index.\nAfter that, apply modulo 8 on #$29 - AND #$07 - and you'll end up with #$01.\nThis value is then used to index the aforementioned AND table, which gets the corresponding bit - in this case, #$40, bit 6.\nSo if bit 6 of the sixth byte ($7E:1F34) in the table is set, five or more Yoshi Coins have been collected in level 105."},{"address":"$7E1F3B","length":"1 byte","beginsAt":8265531,"endsAt":8265531,"type":"Empty","descriptio":"Empty. Cleared on reset, titlescreen load and at the game over screen."},{"address":"$7E1F3C","length":"12 bytes. Ends at $7E1F47.","beginsAt":8265532,"endsAt":8265543,"type":"Flag","descriptio":"\"Collected invisible 1-Up flags\", for each level.\nEach seperate byte represents the values for 8 levels, with each bit acting as a flag for a given level.\nIf a bit is set, no invisible 1-Up will reappear in that level.\n\nThe format is as following: $7E:13BF (the level number) divided by 8 (3x LSR) provides the index per byte into this table; that's because 8 levels are represented by one byte, 1 bit per level.\nFor each byte, the level modulo 8 (AND #$07) is the index to the bit, and said index gets the corresponding bit from an AND table at $05:B35B.\nThat bit will be the flag for the level.\n0 = clear bit, invisible 1-Up not collected; 1 = set bit, invisible 1-Up collected.\n\nAn example: checking if an invisible 1-Up was collected in level 105. First, convert to $7E:13BF format. #$29 indicates you're in level 105.\nDivide that by 8 to get the byte index - #$29 divided by 8 is five (rounded), so the sixth byte is the correct index.\nAfter that, apply modulo 8 on #$29 - AND #$07 - and you'll end up with #$01.\nThis value is then used to index the aforementioned AND table, which gets the corresponding bit - in this case, #$40, bit 6.\nSo if bit 6 of the sixth byte ($7E:1F41) in the table is set, an invisible 1-Up has been collected in level 105."},{"address":"$7E1F48","length":"1 byte","beginsAt":8265544,"endsAt":8265544,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E1F49","length":"141 bytes. Ends at $7E1FD5.","beginsAt":8265545,"endsAt":8265685,"type":"Overworld","descriptio":"Buffer for $7E:1EA2-$7E:1F2E. SRAM transfer of those bytes goes via this buffer."},{"address":"$7E1FD6","length":"12 bytes. Ends at $7E1FE1.","beginsAt":8265686,"endsAt":8265697,"type":"Sprites","descriptio":"Unused sprite table, cleared at individual sprite load. (1 slot each.)"},{"address":"$7E1FE2","length":"12 bytes. Ends at $7E1FED.","beginsAt":8265698,"endsAt":8265709,"type":"Sprites","descriptio":"Sprite table that decrements once per frame, and is used for multiple purposes. All standard sprites have it briefly set after spawning.\n\nPrimarily, it disables water splashes from showing when the sprite enter or exits water, and disables interaction for the sprite with capespins, quake sprites, cape smashes, and net punches. Some sprites use it for miscellaneous purposes, as well. More information can be found here."},{"address":"$7E1FEE","length":"12 bytes. Ends at $7E1FF9.","beginsAt":8265710,"endsAt":8265721,"type":"Flag","descriptio":"\"Collected 3-Up moon\" flags, for each level.\nEach seperate byte represents the values for 8 levels, with each bit acting as a flag for a given level.\nIf a bit is set, no 3-Up will reappear in that level.\n\nThe format is as following: $7E:13BF (the level number) divided by 8 (3x LSR) provides the index per byte into this table; that's because 8 levels are represented by one byte, 1 bit per level.\nFor each byte, the level modulo 8 (AND #$07) is the index to the bit, and said index gets the corresponding bit from an AND table.\nThat bit will be the flag for the level.\n0 = clear bit, no 3-Up moon collected; 1 = set bit, 3-Up moon collected.\n\nAn example: checking if a 3-Up moon was collected in level 105. First, convert to $7E:13BF format. #$29 indicates you're in level 105.\nDivide that by 8 to get the byte index - #$29 divided by 8 is five (rounded), so the sixth byte is the correct index.\nAfter that, apply modulo 8 on #$29 - AND #$07 - and you'll end up with #$01.\nThis value is then used to index the aforementioned AND table, which gets the corresponding bit - in this case, #$40, bit 6.\nSo if bit 6 of the sixth byte ($7E:1FF3) in the table is set, a 3-Up moon has been collected in level 105."},{"address":"$7E1FFA","length":"1 byte","beginsAt":8265722,"endsAt":8265722,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E1FFB","length":"1 byte","beginsAt":8265723,"endsAt":8265723,"type":"Palettes","descriptio":"Lightning flash color index. Only #$00-#$07 are actually used. #$07 is the brightest shade of white, the lower the value, the closer to black it gets. This address gets its value from the table at $04:F700."},{"address":"$7E1FFC","length":"1 byte","beginsAt":8265724,"endsAt":8265724,"type":"Timer","descriptio":"How long to wait until the next lightning flash is generated. Gets its value from a table at $04:F6F8, which in turn gets its index from a \"random\" value in the routine of $04:F708 & #$07. This address decrements after the previous lightning flash has ended."},{"address":"$7E1FFD","length":"1 byte","beginsAt":8265725,"endsAt":8265725,"type":"Timer","descriptio":"How long a lightning flash should last, per color change. Is set to #$08 frames for the first color flash (the most bright one), then it's set to #$04 frames for the following color flashes which are becoming less and less bright. Decrements every frame."},{"address":"$7E1FFE","length":"1 byte","beginsAt":8265726,"endsAt":8265726,"type":"Flag","descriptio":"Whether to update the background in the first part of the credits, or not.\n#$00 = Don't update the background.\n#$01 = Do update the background."},{"address":"$7E1FFF","length":"1 byte","beginsAt":8265727,"endsAt":8265727,"type":"Empty","descriptio":"Empty. Cleared on reset and titlescreen load."},{"address":"$7E2000","length":"23808 bytes. Ends at $7E7CFF.","beginsAt":8265728,"endsAt":8289535,"type":"Graphics","descriptio":"GFX32 decompressed. Written while the Nintendo Presents logo is shown and never modified after that, but often read."},{"address":"$7E7D00","length":"12288 bytes. Ends at $7EACFF.","beginsAt":8289536,"endsAt":8301823,"type":"Graphics","descriptio":"GFX33 decompressed. Written while the Nintendo Presents logo is shown and never modified after that, but often read."},{"address":"$7EAD00","length":"3072 bytes. Ends at $7EB8FF.","beginsAt":8301824,"endsAt":8304895,"type":"Graphics","descriptio":"GFX file decompression buffer. Decompressed as 3bpp (3kb) for unexpanded GFX and as 4bpp for expanded.\nAlso used for Lunar Magic's extra animated tile space.\n$7E:B900 is also used as additional buffer kilobyte."},{"address":"$7EB900","length":"1024 bytes. Ends at $7EBCFF.","beginsAt":8304896,"endsAt":8305919,"type":"Blocks","descriptio":"Layer 2 tilemap, low byte. Format: First two 16x27 rectangles, then 160 25s that are never read.\n\nAlso used on the overworld during the switch block events for various purposes:\n$7EB900-$7EB927 = Switch block X position, high byte\n$7EB928-$7EB94F = Switch block Y position, high byte\n$7EB950-$7EB977 = Switch block Z position, high byte\n$7EB978-$7EB99F = Switch block X position, low byte\n$7EB9A0-$7EB9C7 = Switch block Y position, low byte\n$7EB9C8-$7EB9EF = Switch block Z position, low byte\n$7EB9F0-$7EBA17 = Switch block X speed\n$7EBA18-$7EBA3F = Switch block Y speed\n$7EBA40-$7EBA67 = Switch block Z speed\n$7EBA68-$7EBA8F = Accumulating fraction bits for fixed point switch block X speed\n$7EBA90-$7EBAB7 = Accumulating fraction bits for fixed point switch block Y speed\n$7EBAB8-$7EBADF = Accumulating fraction bits for fixed point switch block Z speed"},{"address":"$7EBD00","length":"1024 bytes. Ends at $7EC0FF.","beginsAt":8305920,"endsAt":8306943,"type":"Blocks","descriptio":"Layer 2 tilemap, high byte; same format as $7E:B900. Writing to this area with the gfx+2 patch installed generates BG garbage and should never be done."},{"address":"$7EC100","length":"1408 bytes. Ends at $7EC67F.","beginsAt":8306944,"endsAt":8308351,"type":"Empty","descriptio":"Empty, untouched RAM on an unhacked ROM. Lunar Magic uses it to store ExAnimation graphics data if the ExAnimation file is larger than 0x1400 bytes. Maximum size is 0x1B00, or enough for 0xD8 4bpp 8x8 tiles, in which case all of $7E:AD00-$7E:C7FF is used."},{"address":"$7EC680","length":"96 bytes. Ends at $7EC6DF.","beginsAt":8308352,"endsAt":8308447,"type":"Misc.","descriptio":"Tilemap of Mode 7 bosses (Ludwig, Roy, Morton and Bowser)."},{"address":"$7EC6E0","length":"288 bytes. Ends at $7EC7FF.","beginsAt":8308448,"endsAt":8308735,"type":"Empty","descriptio":"Empty, untouched RAM on an unhacked ROM. In a hacked ROM, it may be occupied by ExAnimation data (see $7E:C100)."},{"address":"$7EC800","length":"14336 bytes. Ends at $7EFFFF.","beginsAt":8308736,"endsAt":8323071,"type":"Blocks","descriptio":"Map16 Low Byte Table.\nFor horizontal levels, $1B0 tiles per screen, where each screen can be indexed using the format ------y yyyyxxxx. $7E:FE00-$7E:FFFF are unused.\nFor vertical levels, $200 bytes per screen, with the format --sssssx yyyyxxxx. All bytes are used.\nIf layer 2 or 3 is interactive in the level, it uses screens 10-1F (0E-1B in vertical levels).\n\nOn Lunar Magic version 3+, refer to this document for the blocks format for other level dimensions.\n\n\nOn the overworld:\n$7E:C800-$7E:CFFF (2048 ($800) bytes) is used as the Layer 1 tilemap for the overworld.\nTo index this table, use $7E:1F11, $7E:1F1F, and $7E:1F21 to find Mario, or use $7E:1F12, $7E:1F23, and $7E:1F25 to find Luigi.\nX position / 16: %---- ---- ---X xxxx\nY position / 16: %---- ---- ---Y yyyy\nIndex to this table: %---- -SYX yyyy xxxx\n* If Mario is on a submap, the S bit is set.\n\n$7ED000-$7ED7FF (2048 bytes) is used as a table that contains the translevel numbers for every Layer 1 tile, in the format of $7E13BF.\n$7ED800-$7EDFFF (2048 bytes) is used as a table that contains the path direction settings for every Layer 1 tile, in the format of $04D678.\n$7EE400-$7EEBFF (2048 bytes) is used for uploading the Layer 1 tile map to VRAM in 2KB chunks. One chunk is uploaded per frame for four frames during transitions between the main overworld and submaps. Data is refreshed after each DMA."},{"address":"$7F0000","length":"16384 bytes. Ends at $7F3FFF.","beginsAt":8323072,"endsAt":8339455,"type":"Overworld","descriptio":"Layer 2 event tilemap of the overworld. $7F:0D00-$7F:3FFF is empty (untouched) RAM on a vanilla ROM, but LM uses it to hold the expanded layer 2 event tilemap on a hacked ROM.\nLM also uses $7F:0000 and upwards to store title screen movement (three bytes every time a key is pressed or released, or if the same keys are held for #$FF frames), and $7F:0B44-$7F:1343 are also used as buffer for dynamic sprite graphics because of them being uploaded during V-Blank."},{"address":"$7F4000","length":"16384 bytes. Ends at $7F7FFF.","beginsAt":8339456,"endsAt":8355839,"type":"Overworld","descriptio":"The Layer 2 tilemap of the whole overworld (including submaps, starting at $7F:6000). It does NOT affect the event tiles. The tiles are also 8x8. The tilemap starts from the top left corner of the main overworld. Format is as following:\n[Tile number], [Tile properties]\nThis table is also used for a RAM buffer for the credit cutscene backgrounds."},{"address":"$7F8000","length":"387 bytes. Ends at $7F8182.","beginsAt":8355840,"endsAt":8356226,"type":"Sprites","descriptio":"Unrolled loop which, executed once per each frame, writes to OAM to put all sprites outside the screen (this clears the OAM slots by setting their Y positions to #$F0). Note: Not executed during pause."},{"address":"$7F8183","length":"504 bytes. Ends at $7F837A.","beginsAt":8356227,"endsAt":8356730,"type":"Empty","descriptio":"Empty, untouched RAM.\n~420 bytes used in LM 1.70+ for VRAM modification."},{"address":"$7F837B","length":"2 bytes. Ends at $7F837C.","beginsAt":8356731,"endsAt":8356732,"type":"Misc.","descriptio":"Current length of the $7F837D stripe image, excluding the FF terminator. Used to allow two subroutines to write to $7F837D in the same frame."},{"address":"$7F837D","length":"5118 bytes. Ends at $7F977A.","beginsAt":8356733,"endsAt":8361850,"type":"Misc.","descriptio":"VRAM upload table, as a stripe image. Used for things that change in the middle of the screen, such as ? blocks. Uploaded and reset every frame; most frames, it's empty.\n\nNot all of it is used during normal gameplay, so $7F:8600+ shouldn't be dangerous to use.\n\nSee here for more info."},{"address":"$7F977B","length":"768 bytes. Ends at $7F9A7A.","beginsAt":8361851,"endsAt":8362618,"type":"Misc.","descriptio":"Mario/Luigi Start, Game Over, Time Up etc. messages Graphics, decompressed."},{"address":"$7F9A7B","length":"512 bytes. Ends at $7F9C7A.","beginsAt":8362619,"endsAt":8363130,"type":"Sprites","descriptio":"Position of Wiggler's segments."},{"address":"$7F9C7B","length":"11141 bytes. Ends at $7FC7FF.","beginsAt":8363131,"endsAt":8374271,"type":"Empty","descriptio":"Empty RAM which is entirely untouched.\nThis area is used by many SMW hacking tools, so hacked ROMs are likely to use some of the addresses found here. A list of RAM addresses used by several SMW hacking tools can be found here.\nA few more addresses are documented here. [TODO: Merge those into SMWiki once it unlocks.]"},{"address":"$7FC800","length":"14336 bytes. Ends at $7FFFFF.","beginsAt":8374272,"endsAt":8388607,"type":"Blocks","descriptio":"Map16 high byte table. Same format as $7E:C800.\n$7F:FFF8 through $7F:FFFD are also used by Lunar Magic's title screen recording ASM."}]